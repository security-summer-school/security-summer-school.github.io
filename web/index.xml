<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security Summer School –</title><link>/web/</link><description>Recent content on Security Summer School</description><generator>Hugo -- gohugo.io</generator><atom:link href="/web/index.xml" rel="self" type="application/rss+xml"/><item><title>Web:</title><link>/web/05-injection-part-2/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/web/05-injection-part-2/readme/</guid><description>
&lt;h1 id="cross-site-scripting-xss">Cross-site Scripting (XSS)&lt;/h1>
&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>Cross-site Scripting (XSS) is a web security vulnerability that allows an attacker to inject malicious code, usually JavaScript, in the web browser of the victim. This implies that the attacker can do a lot of damage from stealing data to perform actions on behalf of the user. This type of vulnerability implies that the web application uses the user input in the HTML page that it serves. As opposed to other types of code injections, the malicious code in an XSS will always run on the client-side shifting the target from the server hosting the application to the users of the application.&lt;/p>
&lt;h2 id="impact">Impact&lt;/h2>
&lt;p>The impact of the vulnerability is linked with the functionality that the web application provides. If the app is doesn&amp;rsquo;t have much functionality (e.g. a news website) the attacker might not obtain much, but if it&amp;rsquo;s a banking app, there is certainly something to obtain.&lt;/p>
&lt;p>Cross-site Scripting can be used to achieve a lot of things:&lt;/p>
&lt;ul>
&lt;li>steal data - sensitive data as login credentials or credit card numbers&lt;/li>
&lt;li>hijack the session of the user - get the user&amp;rsquo;s session token and browse the application as it&amp;rsquo;s your account without any credentials&lt;/li>
&lt;li>track user movements - keylogging, taking screenshots of the page&lt;/li>
&lt;li>perform actions on behalf of the user - sending payments to attacker&amp;rsquo;s account&lt;/li>
&lt;li>alter the looks of the HTML page (virtual defacement) - fake the balance of the account while the attacker steals the money&lt;/li>
&lt;li>mining - placing a cryptocurrency miner in the page while the user reads a long article&lt;/li>
&lt;li>if that&amp;rsquo;s not enough, you may find more ideas &lt;a href="http://www.xss-payloads.com/payloads.html">here&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="types">Types&lt;/h2>
&lt;p>There are mainly three types of XSS:&lt;/p>
&lt;ul>
&lt;li>Reflected XSS&lt;/li>
&lt;li>Stored XSS&lt;/li>
&lt;li>DOM XSS&lt;/li>
&lt;/ul>
&lt;h3 id="reflected-xss">Reflected XSS&lt;/h3>
&lt;p>Reflected XSS or non-persistent is the simplest form of XSS and occurs when user input is immediately returned by the web application in the HTTP response.&lt;/p>
&lt;p>&lt;img src="../05-injection-2/support/reflected-xss.png" alt="Reflected XSS Steps">&lt;/p>
&lt;p>&lt;img src="../05-injection-2/support/XSS_reflected.gif" alt="Reflected XSS steps">&lt;/p>
&lt;ol>
&lt;li>The attacker crafts a URL containing a malicious string and sends it to the victim.&lt;/li>
&lt;li>The victim is tricked by the attacker into requesting the URL from the website.&lt;/li>
&lt;li>The website includes the malicious string from the URL in the response.&lt;/li>
&lt;li>The victim&amp;rsquo;s browser executes the malicious script inside the response, sending the victim&amp;rsquo;s cookies to the attacker&amp;rsquo;s server.&lt;/li>
&lt;/ol>
&lt;h4 id="example">Example&lt;/h4>
&lt;p>Let&amp;rsquo;s consider a simple application that greets the user with the name passed through the parameter &lt;code>name&lt;/code> in the URL.
&lt;code>https://example.com/greet?name=John&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">p&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>Hello John!&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">p&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Without changing the user input in any way, an attacker might give the following input:&lt;/p>
&lt;p>&lt;code>https://example.com/greet?name=&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">p&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>Hello &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000">alert&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>!&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">p&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The attacker now has control to the JavaScript code using a parameter stored in the URL.&lt;/p>
&lt;h3 id="stored-xss">Stored XSS&lt;/h3>
&lt;p>Stored XSS or persistent XSS happens when user input is stored in the database and it is used non-sanitized in the response HTML pages.&lt;/p>
&lt;p>&lt;img src="../05-injection-2/support/persistent-xss.png" alt="Persistent XSS Steps">&lt;/p>
&lt;p>&lt;img src="../05-injection-2/support/XSS_stored.gif" alt="Stored XXS Steps">&lt;/p>
&lt;ol>
&lt;li>The attacker uses one of the website&amp;rsquo;s forms to insert a malicious string into the website&amp;rsquo;s database.&lt;/li>
&lt;li>The victim requests a page from the website.&lt;/li>
&lt;li>The website includes the malicious string from the database in the response and sends it to the victim.&lt;/li>
&lt;li>The victim&amp;rsquo;s browser executes the malicious script inside the response, sending the victim&amp;rsquo;s cookies to the attacker&amp;rsquo;s server.&lt;/li>
&lt;/ol>
&lt;h4 id="example-1">Example&lt;/h4>
&lt;p>A simple example would be an online shop with a review system that would let customers to write text/comments about the products.
One might use it to say &lt;code>&amp;quot;This product is great! I recommend it!&amp;quot;&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">p&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>This product is great! I recommend it!&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">p&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But an attacker might use it to send &lt;code>&amp;quot;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&amp;quot;&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">p&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000">alert&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">p&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The difference between this example and the one at Reflected XSS is that the attacker uses a request to send the review that will be stored in the database of the server. Later on, when another user accesses the product page, the code behind the website will get from the database all reviews associated with the product and insert them in the HTML response page.&lt;/p>
&lt;h3 id="dom-xss">DOM XSS&lt;/h3>
&lt;p>DOM vulnerabilities usually arise when JavaScript code uses data from the user to construct the DOM / HTML page.&lt;/p>
&lt;p>&lt;img src="../05-injection-2/support/dom-based-xss.png" alt="DOM XSS Steps">
&lt;img src="../05-injection-2/support/XSS_dom.gif" alt="XSS DOM Steps">&lt;/p>
&lt;ol>
&lt;li>The attacker crafts a URL containing a malicious string and sends it to the victim.&lt;/li>
&lt;li>The victim is tricked by the attacker into requesting the URL from the website.&lt;/li>
&lt;li>The website receives the request, but does not include the malicious string in the response.&lt;/li>
&lt;li>The victim&amp;rsquo;s browser executes the legitimate script inside the response, causing the malicious script to be inserted into the page.&lt;/li>
&lt;li>The victim&amp;rsquo;s browser executes the malicious script inserted into the page, sending the victim&amp;rsquo;s cookies to the attacker&amp;rsquo;s server.&lt;/li>
&lt;/ol>
&lt;h4 id="example-2">Example&lt;/h4>
&lt;p>Suppose the following code is used to create a form to let the user choose his/her preferred language. A default language is also provided in the query string, as the parameter “default”.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">Select your language:
&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">select&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#204a87">document&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">write&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;OPTION value=1&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#204a87">document&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">location&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">href&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">substring&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">document&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">location&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">href&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">indexOf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;default=&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;/OPTION&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87">document&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">write&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;OPTION value=2&amp;gt;English&amp;lt;/OPTION&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">select&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The page is invoked with a URL such as:&lt;/p>
&lt;p>&lt;code>https://example.com/page.html?default=French&lt;/code>&lt;/p>
&lt;p>A DOM Based XSS attack against this page can be accomplished by sending the following URL to a victim:&lt;/p>
&lt;p>&lt;code>https://example.com/page.html?default=&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code>&lt;/p>
&lt;h2 id="note">Note&lt;/h2>
&lt;p>The three types of XSS presented above are the ones that historically speaking were categorised, but in order to do a categorization a criteria is needed. The types above have no criteria on which they are sepparated, so let&amp;rsquo;s split XSS vulnerabilities by the place where data is used:&lt;/p>
&lt;ul>
&lt;li>Server XSS&lt;/li>
&lt;li>Client XSS&lt;/li>
&lt;/ul>
&lt;p>By doing so, the three types above mentioned will look like this:
&lt;img src="../05-injection-2/support/server-client-xss.png" alt="Server vs Client XSS">&lt;/p>
&lt;h2 id="defense-mechanisms">Defense Mechanisms&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>Filter input on arrival.&lt;/strong> At the point where user input is received, filter as strictly as possible based on what is expected or valid input.&lt;/li>
&lt;li>&lt;strong>Encode data on output.&lt;/strong> At the point where user-controllable data is output in HTTP responses, encode the output to prevent it from being interpreted as active content. Depending on the output context, this might require applying combinations of HTML, URL, JavaScript, and CSS encoding.&lt;/li>
&lt;li>&lt;strong>Use appropriate response headers.&lt;/strong> To prevent XSS in HTTP responses that aren&amp;rsquo;t intended to contain any HTML or JavaScript, you can use the &lt;code>Content-Type&lt;/code> and &lt;code>X-Content-Type-Options&lt;/code> headers to ensure that browsers interpret the responses in the way you intend.&lt;/li>
&lt;li>&lt;strong>Content Security Policy.&lt;/strong> Use Content Security Policy (CSP) to reduce the severity of any XSS vulnerabilities that still occur.&lt;/li>
&lt;li>&lt;strong>Continuous database scanning.&lt;/strong> For stored XSS is common practice to scan the database at regulated intervals, although XSS payloads can be written in multiple formats (base64, binary etc.).&lt;/li>
&lt;/ol>
&lt;h2 id="other-xss">Other XSS&lt;/h2>
&lt;h3 id="self-xss">Self XSS&lt;/h3>
&lt;p>Self XSS is a social engineering attack used to gain access to victim&amp;rsquo;s web accounts. The victim is tricked into running malicious JavaScript code into their own browser, in web developer console, which can either exfiltrate data or perform actions on behalf of the user.
This is not a code injection vulnerability as each website is vulnerable to this type of attack. In order to prevent this, websites add warning messages in console. In the image below, there are two examples, from Google Meet and Facebook.&lt;/p>
&lt;p>&lt;img src="../05-injection-2/support/self-xss.png" alt="Self XSS">&lt;/p>
&lt;h3 id="mutated-xss">Mutated XSS&lt;/h3>
&lt;p>Mutated XSS happens when the browser tries to fix and rewrite invaild HTML but fails doing so thus executing attacker&amp;rsquo;s code. Because it depends from browser to browser, is extremely hard to detect or sanitize within the websites application logic. At the end of this page you will find a video explaining a mXSS on Google Search, and also check the link for one of the first papers describing mXSS attacks.&lt;/p>
&lt;h2 id="challenges">Challenges&lt;/h2>
&lt;h3 id="1-dvwa">1. DVWA&lt;/h3>
&lt;p>We will use Damn Vulnerable Web Application (DVWA) for this one. You may install it however you want, just to work, but a simple way to do it is by using Docker. Once you &lt;a href="https://docs.docker.com/engine/install/">installed&lt;/a> docker you must run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker run --rm -it -p 8080:80 vulnerables/web-dvwa
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To access the app, go to http://localhost:8080/setup.php and click on &lt;code>Create/Reset Database&lt;/code>. Login with username &lt;code>admin&lt;/code> and password &lt;code>password&lt;/code>.&lt;/p>
&lt;p>DVWA has multipe vulnerable components, but today we will use the XSS related ones. The app has 4 levels of security that can be changed from &amp;lsquo;DVWA Security&amp;rsquo; section.
All the DVWA challenges allow you to view the PHP source of the page to get additional info about the back-end script. However, in a real-world scenario you won&amp;rsquo;t have that kind of access, so please use this functionality only after you have finished the challenge.&lt;/p>
&lt;p>The goal of this challenges is to rise an &lt;code>alert(1)&lt;/code> from JavaScript like this:
&lt;img src="../05-injection-2/support/dvwa-alert-1.png" alt="DVWA Alert 1">&lt;/p>
&lt;p>With the security level set on &lt;strong>low&lt;/strong> you will have to go through each XSS type. Raise the alert, then change the security level to &lt;strong>medium&lt;/strong> and then &lt;strong>high&lt;/strong>. After you are done with this, change on &lt;strong>impossible&lt;/strong> and click on &lt;code>View Source&lt;/code>. Why an exploit is not possible in this case? Check the PHP documentation to understand why.&lt;/p>
&lt;p>Go thgough each on in the following order: Reflected, Stored, DOM&lt;/p>
&lt;h3 id="2-xss-challenges">2. XSS Challenges&lt;/h3>
&lt;p>You have 6 levels to finish here: &lt;a href="https://xss-game.appspot.com/">https://xss-game.appspot.com/&lt;/a>&lt;/p>
&lt;h3 id="3-even-more-xss-challenges">3. Even more XSS Challenges&lt;/h3>
&lt;p>&lt;a href="https://alf.nu/alert1">https://alf.nu/alert1&lt;/a>&lt;/p>
&lt;h3 id="4-if-you-get-here">4. If you get here&lt;/h3>
&lt;p>&lt;a href="http://prompt.ml/0">http://prompt.ml/0&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://xss-quiz.int21h.jp/">https://xss-quiz.int21h.jp/&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://sudo.co.il/xss/">http://sudo.co.il/xss/&lt;/a>&lt;/p>
&lt;p>Those should be enough to suck the soul out of you.&lt;/p>
&lt;h2 id="further-reading">Further reading&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://owasp.org/www-community/attacks/xss/">https://owasp.org/www-community/attacks/xss/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://portswigger.net/web-security/cross-site-scripting">https://portswigger.net/web-security/cross-site-scripting&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pentest-tools.com/blog/xss-attacks-practical-scenarios/">5 Practical Scenarios for XSS Attacks&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.xss-payloads.com/payloads.html">XSS Exploit Payloads&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">XSS Cheat Sheet 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://owasp.org/www-community/xss-filter-evasion-cheatsheet">XSS Cheat Sheet 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=lG7U3fuNw3A">Mutated XSS on Google Search&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cure53.de/fp170.pdf">mXSS paper&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="cross-site-request-forgery-csrf">Cross-Site Request Forgery (CSRF)&lt;/h1>
&lt;h2 id="intro-1">Intro&lt;/h2>
&lt;p>Cross-site request forgery is a vulnerability in web applications that allows an attacker to trick users into performing actions that they did not intend.&lt;/p>
&lt;h2 id="impact-1">Impact&lt;/h2>
&lt;p>Once again, the impact of the vulnerability is linked with the functionality that the web application provides, but it can range from posting a comment on behalf of the user with an outdated 2008 meme to making payments to attacker&amp;rsquo;s wallet to full account takeover.&lt;/p>
&lt;h2 id="how-does-it-work">How does it work?&lt;/h2>
&lt;p>For a CSRF attack to be possible, three key conditions must be in place:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>A relevant action.&lt;/strong> There is an action within the application that the attacker has a reason to induce. This might be a privileged action (such as modifying permissions for other users) or any action on user-specific data (such as changing the user&amp;rsquo;s own password).&lt;/li>
&lt;li>&lt;strong>Cookie-based session handling.&lt;/strong> Performing the action involves issuing one or more HTTP requests, and the application relies solely on session cookies to identify the user who has made the requests. There is no other mechanism in place for tracking sessions or validating user requests.&lt;/li>
&lt;li>&lt;strong>No unpredictable request parameters.&lt;/strong> The requests that perform the action do not contain any parameters whose values the attacker cannot determine or guess. For example, when causing a user to change their password, the function is not vulnerable if an attacker needs to know the value of the existing password.&lt;/li>
&lt;/ul>
&lt;p>For example, suppose an application contains a function that lets the user change the email address on their account. When a user performs this action, they make an HTTP request like the following:&lt;/p>
&lt;pre>&lt;code>POST /email/change HTTP/1.1
Host: vulnerable-website.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 30
Cookie: session=yvthwsztyeQkAPzeQ5gHgTvlyxHfsAfE
email=wiener@normal-user.com
&lt;/code>&lt;/pre>&lt;p>This meets the conditions required for CSRF:&lt;/p>
&lt;ul>
&lt;li>The action of changing the email address on a user&amp;rsquo;s account is of interest to an attacker. Following this action, the attacker will typically be able to trigger a password reset and take full control of the user&amp;rsquo;s account.&lt;/li>
&lt;li>The application uses a session cookie to identify which user issued the request. There are no other tokens or mechanisms in place to track user sessions.&lt;/li>
&lt;li>The attacker can easily determine the values of the request parameters that are needed to perform the action.&lt;/li>
&lt;/ul>
&lt;p>With these conditions in place, the attacker can construct a web page containing the following HTML:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">html&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">body&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">form&lt;/span> &lt;span style="color:#c4a000">action&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;https://vulnerable-website.com/email/change&amp;#34;&lt;/span> &lt;span style="color:#c4a000">method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;POST&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">input&lt;/span> &lt;span style="color:#c4a000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;hidden&amp;#34;&lt;/span> &lt;span style="color:#c4a000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;email&amp;#34;&lt;/span> &lt;span style="color:#c4a000">value&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;pwned@evil-user.net&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">/&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">form&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#204a87">document&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">forms&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">].&lt;/span>&lt;span style="color:#000">submit&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">body&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">html&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="prevention">Prevention&lt;/h2>
&lt;ul>
&lt;li>Use SameSite cookie attribute (similar to HTTPOnly and Secure)&lt;/li>
&lt;li>Add a CSRF token for each request that changes the state of the application (e.g. changing password, sending messages) and validate it on backend&lt;/li>
&lt;li>Use user interaction based CSRF defense for sensitive actions such as changing credentials: re-authentication, one-time token, captcha&lt;/li>
&lt;li>Use Cross-origin resource sharing (CORS) headers to prevent CSRF from your website&lt;/li>
&lt;li>GET methods should not change the state of the application. Use appropriate HTTP methods for their intention.&lt;/li>
&lt;li>in-depth list &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html">here&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>If you find an action/request to have a CSRF token don&amp;rsquo;t give up to that so easily, there are a number of ways that improper validation of the token will still result in a CSRF vulnerability:&lt;/p>
&lt;ul>
&lt;li>Validation of CSRF token depends on request method&lt;/li>
&lt;li>Validation of CSRF token depends on token being present&lt;/li>
&lt;li>CSRF token is not tied to the user session&lt;/li>
&lt;li>CSRF token is tied to a non-session cookie&lt;/li>
&lt;li>CSRF token is simply duplicated in a cookie&lt;/li>
&lt;/ul>
&lt;h2 id="note-1">Note&lt;/h2>
&lt;p>You can combine XSS with CSRF :). If you have two websites that share a part of their user base, you can use a XSS vulnerability in one to abuse a CSRF vulnerability in the other one. For example if a company provides two related services (e.g. email and calendar) you can assume that there is a high probability that a user might have accounts on both of the services, making a Stored XSS in one app a great way to exploit a CSRF in the other one.&lt;/p>
&lt;h2 id="challenges-1">Challenges&lt;/h2>
&lt;h3 id="1-dvwa-1">1. DVWA&lt;/h3>
&lt;p>Using the same setup as for XSS challenges, go to the CSRF page of DVWA and craft URLs that will change the password for the user accessing it for each security level: &lt;strong>low&lt;/strong>, &lt;strong>medium&lt;/strong>, &lt;strong>hard&lt;/strong>. Why a CSRF is not possible for &lt;strong>impossible&lt;/strong>?&lt;/p>
&lt;h3 id="2-portswigger-academy">2. PortSwigger Academy&lt;/h3>
&lt;p>You have 8 challenges here: &lt;a href="https://portswigger.net/web-security/all-labs#cross-site-request-forgery-csrf">https://portswigger.net/web-security/all-labs#cross-site-request-forgery-csrf&lt;/a>&lt;/p>
&lt;h2 id="further-reading-1">Further reading&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://portswigger.net/web-security/csrf">https://portswigger.net/web-security/csrf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://owasp.org/www-community/attacks/csrf">https://owasp.org/www-community/attacks/csrf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html">CSRF Prevention Cheat Sheet&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Web:</title><link>/web/08-secure-communication/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/web/08-secure-communication/readme/</guid><description>
&lt;p>http connections are plain text&lt;/p>
&lt;p>attackers controlling the middleboxes can intercept traffic (man-in-the-middle, MitM attack)&lt;/p>
&lt;p>information on MitM: &lt;a href="https://www.thesslstore.com/blog/man-in-the-middle-attack-2/,">https://www.thesslstore.com/blog/man-in-the-middle-attack-2/,&lt;/a> &lt;a href="https://charlesreid1.com/wiki/Man_in_the_Middle,">https://charlesreid1.com/wiki/Man_in_the_Middle,&lt;/a> &lt;a href="https://charlesreid1.com/wiki/Man_in_the_Middle/HTTPS">https://charlesreid1.com/wiki/Man_in_the_Middle/HTTPS&lt;/a>&lt;/p>
&lt;p>connections need to be security: confidentiality and integrity&lt;/p>
&lt;p>confidentiality: encryption and identity&lt;/p>
&lt;p>TLS: certificates (identity) + encryption (confidentiality)&lt;/p>
&lt;p>certificates: identity + symmetric key generation for encryption&lt;/p>
&lt;p>SSL1.0, SSL2.0, SSL3.0, TLS1.0, TLS1.1, TLS1.2, TLS1.3: &lt;a href="https://maulwuff.de/research/ssl-debugging.html">https://maulwuff.de/research/ssl-debugging.html&lt;/a>&lt;/p>
&lt;p>use wget + https (google.com)&lt;/p>
&lt;p>save certificate&lt;/p>
&lt;p>use &lt;code>openssl s_client&lt;/code>&lt;/p>
&lt;p>investigate certificate&lt;/p>
&lt;p>self-signed certificates&lt;/p>
&lt;p>use ssllabs&lt;/p>
&lt;p>certificate internals&lt;/p>
&lt;ul>
&lt;li>key exchange&lt;/li>
&lt;li>public key algorithm&lt;/li>
&lt;li>ciphers&lt;/li>
&lt;/ul>
&lt;p>issues: &lt;a href="https://www.venafi.com/education-center/ssl/common-ssl-attacks">https://www.venafi.com/education-center/ssl/common-ssl-attacks&lt;/a>&lt;/p>
&lt;p>HTTP spoofing: client (referal), server-name close, &lt;a href="https://doubleoctopus.com/security-wiki/threats-and-tools/https-spoofing/">https://doubleoctopus.com/security-wiki/threats-and-tools/https-spoofing/&lt;/a>&lt;/p>
&lt;p>client authentication&lt;/p>
&lt;p>SSL stripping: &lt;a href="https://charlesreid1.com/wiki/SSLStrip,">https://charlesreid1.com/wiki/SSLStrip,&lt;/a> &lt;a href="https://www.venafi.com/blog/what-are-ssl-stripping-attacks">https://www.venafi.com/blog/what-are-ssl-stripping-attacks&lt;/a>&lt;/p>
&lt;p>use SSLSniff: &lt;a href="https://charlesreid1.com/wiki/SSLSniff,">https://charlesreid1.com/wiki/SSLSniff,&lt;/a> &lt;a href="https://github.com/moxie0/sslsniff">https://github.com/moxie0/sslsniff&lt;/a>&lt;/p>
&lt;p>redirection HTTP to HTTPS, issues&lt;/p>
&lt;p>HSTS: &lt;a href="https://https.cio.gov/hsts/,">https://https.cio.gov/hsts/,&lt;/a> &lt;a href="https://www.sentinelstand.com/article/http-strict-transport-security-hsts-canonical-www-redirects,">https://www.sentinelstand.com/article/http-strict-transport-security-hsts-canonical-www-redirects,&lt;/a> &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security,">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security,&lt;/a> &lt;a href="https://security.stackexchange.com/questions/129273/whats-the-difference-between-using-hsts-and-doing-a-301-redirection">https://security.stackexchange.com/questions/129273/whats-the-difference-between-using-hsts-and-doing-a-301-redirection&lt;/a>&lt;/p>
&lt;p>mitmproxy: &lt;a href="https://mitmproxy.org/,">https://mitmproxy.org/,&lt;/a> &lt;a href="https://tools.kali.org/sniffingspoofing/mitmproxy">https://tools.kali.org/sniffingspoofing/mitmproxy&lt;/a>&lt;/p>
&lt;p>certificate pinning&lt;/p>
&lt;p>TLS / SSL attacks: &lt;a href="https://tools.ietf.org/html/rfc7457,">https://tools.ietf.org/html/rfc7457,&lt;/a> &lt;a href="https://www.acunetix.com/blog/articles/tls-vulnerabilities-attacks-final-part/,">https://www.acunetix.com/blog/articles/tls-vulnerabilities-attacks-final-part/,&lt;/a> &lt;a href="https://www.cloudinsidr.com/content/known-attack-vectors-against-tls-implementation-vulnerabilities/">https://www.cloudinsidr.com/content/known-attack-vectors-against-tls-implementation-vulnerabilities/&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Logjam: &lt;a href="https://weakdh.org/logjam.html">https://weakdh.org/logjam.html&lt;/a>&lt;/li>
&lt;li>BACKRONYM: &lt;a href="http://backronym.fail/">http://backronym.fail/&lt;/a>&lt;/li>
&lt;li>DROWN: &lt;a href="https://drownattack.com/">https://drownattack.com/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>connection downgrade&lt;/p>
&lt;p>protocol downgrade: &lt;a href="https://www.venafi.com/blog/preventing-downgrade-attacks">https://www.venafi.com/blog/preventing-downgrade-attacks&lt;/a>&lt;/p>
&lt;p>thc-ssl-dos: &lt;a href="https://tools.kali.org/stress-testing/thc-ssl-dos">https://tools.kali.org/stress-testing/thc-ssl-dos&lt;/a>&lt;/p>
&lt;p>sslsplit: &lt;a href="https://tools.kali.org/information-gathering/sslsplit">https://tools.kali.org/information-gathering/sslsplit&lt;/a>&lt;/p>
&lt;p>mitmengine: &lt;a href="https://portswigger.net/daily-swig/sysadmins-offered-new-tools-to-detect-https-interception,">https://portswigger.net/daily-swig/sysadmins-offered-new-tools-to-detect-https-interception,&lt;/a> &lt;a href="https://github.com/cloudflare/mitmengine">https://github.com/cloudflare/mitmengine&lt;/a>&lt;/p>
&lt;p>using stunnel, securing a plain-text connection: &lt;a href="https://www.stunnel.org/">https://www.stunnel.org/&lt;/a>&lt;/p>
&lt;p>TODO: Create a CA self-signed certificate, create new certificate, sign it with the CA self-signed certificate. See &lt;a href="https://blogg.bekk.no/how-to-sign-a-certificate-request-with-openssl-e046c933d3ae">https://blogg.bekk.no/how-to-sign-a-certificate-request-with-openssl-e046c933d3ae&lt;/a>&lt;/p>
&lt;p>Resources&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://tlseminar.github.io/class1/">https://tlseminar.github.io/class1/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="commands">Commands&lt;/h2>
&lt;pre>&lt;code>razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl s_client -connect www.upb.ro:443 -servername www.upb.ro
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl s_client -connect swarm.cs.pub.ro:443 -servername swarm.cs.pub.ro
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl s_client -connect facebook.com:443 -servername facebook.com
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl x509 -in facebook.crt -noout -text
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl s_client -show-certs -connect facebook.com:443 -servername facebook.com
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl s_client -show_certs -connect facebook.com:443 -servername facebook.com
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl verify -CAfile intermediary.crt facebook.crt
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl verify -CApath /etc/ssl/certs/ intermediary.crt
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl verify -CAfile /etc/ssl/certs/DigiCert_High_Assurance_EV_Root_CA.pem intermediary.crt
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ wget --no-check-certificate security.cs.pub.ro/summer-school/
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ telnet security.cs.pub.ro 80
Trying 141.85.227.114...
Connected to koala.cs.pub.ro.
Escape character is '^]'.
GET / HTTP/1.0
HTTP/1.1 200 OK
[...]
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ telnet 141.85.227.114 80
Trying 141.85.227.114...
Connected to 141.85.227.114.
Escape character is '^]'.
GET / HTTP/1.1
Host: security.cs.pub.ro
[...]
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl x509 -in local/ssl.crt/awesome-ca.com.crt -noout -text
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl genrsa -out local/ssl.key/bucuresti.ro.key 4096
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl rsa -in local/ssl.key/bucuresti.ro.key -noout -text
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl req -new -key local/ssl.key/bucuresti.ro.key -out local/ssl.csr/bucuresti.ro.csr
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl req -noout -text -in local/ssl.csr/bucuresti.ro.csr
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ cat local/ca.conf
[ ca ]
default_ca = ca_default
[ ca_default ]
dir = ./local/
certs = $dir
new_certs_dir = $dir/ssl.crt
database = $dir/ca.db.index
serial = $dir/ca.db.serial
RANDFILE = $dir/ca.db.rand
certificate = $dir/ssl.crt/awesome-ca.com.crt
private_key = $dir/ssl.key/awesome-ca.com.key
default_days = 365
default_crl_days = 30
default_md = sha256
preserve = no
policy = generic_policy
[ generic_policy ]
countryName = optional
stateOrProvinceName = optional
localityName = optional
organizationName = optional
organizationalUnitName = optional
commonName = optional
emailAddress = optional
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ echo &amp;quot;1234&amp;quot; &amp;gt; local/ca.db.serial
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ touch local/ca.db.index
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl ca -config local/ca.conf -out local/ssl.crt/bucuresti.ro.crt -infiles local/ssl.csr/bucuresti.ro.csr
Using configuration from local/ca.conf
Check that the request matches the signature
Signature ok
The Subject's Distinguished Name is as follows
countryName :PRINTABLE:'RO'
stateOrProvinceName :ASN.1 12:'Bucharest'
organizationName :ASN.1 12:'Internet Widgits Pty Ltd'
commonName :ASN.1 12:'bucuresti.ro'
Certificate is to be certified until Jul 16 15:19:40 2021 GMT (365 days)
Sign the certificate? [y/n]:y
1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl x509 -noout -text -in local/ssl.crt/bucuresti.ro.crt
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl verify -CAfile local/ssl.crt/awesome-ca.com.crt local/ssl.crt/bucuresti.ro.crt
local/ssl.crt/bucuresti.ro.crt: OK
&lt;/code>&lt;/pre></description></item><item><title>Web:</title><link>/web/09-privilege-escalation/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/web/09-privilege-escalation/readme/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>When performing an attack on a target, the last step of a malicious actor, before achieving full system compromise, is to elevate his or her privileges to an administrative account. Once the attacker reached this phase and successully escalated his access rights, he can do anything with the vulnerable application or computer system.&lt;/p>
&lt;h2 id="what-is-privilege-escalation">What is privilege escalation?&lt;/h2>
&lt;p>Privilege escalation vulnerabilities are security issues that allow users to gain more permissions and a higher level of access to systems or applications than their administrators intended. These types of flaws are valuable for attackers because they&amp;rsquo;re needed for full exploit chains but can be overlooked by defenders or developers because of their lower severity scores.&lt;/p>
&lt;p>In general, any violation of an intentional security boundary can be considered a privilege escalation issue, including gaining kernel access from a user application in an operating system, escaping a virtual machine to access the underlying hypervisor, gaining domain administrator access from a workstation, or gaining privileged roles in public web applications by exploiting misconfigurations.&lt;/p>
&lt;p>There are two main types of privilege escalation:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Horizontal Privilege Escalation&lt;/strong> is when a user gains the access rights of another user who has the same access level as he or she does.&lt;/li>
&lt;li>&lt;strong>Vertical Privilege Escalation&lt;/strong> is when an attacker uses a flaw in the system to gain access above what was intended for him or her.&lt;/li>
&lt;/ol>
&lt;h3 id="horizontal-privilege-escalation">Horizontal Privilege Escalation&lt;/h3>
&lt;p>Gaining access to a user account with the same level of privileges as the malicious actor might sound a little weird, but there are legitimate use-cases for this. Think about the following scenario:&lt;/p>
&lt;blockquote>
&lt;p>Bob and Alice both have their own accounts at the same bank. Bob has malicious intents and exploits a misconfiguration to gain access to Alice&amp;rsquo;s account. Even though they have the same level of access to the application&amp;rsquo;s functionality, Bob can now access Alice&amp;rsquo;s personal information, and is able to alter her account, transfer money on her behalf and many other things.&lt;/p>
&lt;/blockquote>
&lt;h3 id="vertical-privilege-escalation">Vertical Privilege Escalation&lt;/h3>
&lt;p>Generally, when someone attempts to hack into a system, it’s because they want to perform some action on the system. This could be damaging the system or stealing information. Oftentimes, this requires a privilege level the attacker does not possess. This is where vertical privilege escalation comes in.&lt;/p>
&lt;p>The attacker exploits a flaw in the system, abuses a misconfiguration, or uses another vector to elevate his privileges from a normal user to an administrator.&lt;/p>
&lt;p>Once the attacker managed to elevate his access rights, he will be able to perform any action the compromised account was able to perform.&lt;/p>
&lt;p>An actual scenario to better understand the potential damage:&lt;/p>
&lt;blockquote>
&lt;p>The attacker managed to capture the admin&amp;rsquo;s session cookies and takes over his session. Once logged in using the admin&amp;rsquo;s cookies, he has access to the administration panel of the web application. From here, he can steal sensitive information (such as users data), perform a Denial of Service (DoS) attack (by deleting website&amp;rsquo;s data), and create persistence (by locking out the actual administrators of the website).&lt;/p>
&lt;/blockquote>
&lt;h2 id="application-vs-system-privesc">Application vs System PrivEsc&lt;/h2>
&lt;p>In the context of Web Security, we can also speak of another way of categorizing privilege escalation:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Application Privilege Escalation&lt;/strong> is when the attacker uses the application accounts to gain further access to application functionality.&lt;/li>
&lt;li>&lt;strong>System Privilege Escalation&lt;/strong> is when the attacker has already gained access to the underlying system where the web application runs and wishes to elevate his privileges to the administrator&amp;rsquo;s account of the server.&lt;/li>
&lt;/ol>
&lt;p>We have already given a few examples of application privilege escalations in thre previous section, so now we will focus on system privilege escalation.&lt;/p>
&lt;h3 id="system-privilege-escalation">System Privilege Escalation&lt;/h3>
&lt;p>Security best practices suggest a very useful principle, called the &lt;strong>Principle of Least Privilege&lt;/strong>, in which a user is given the minimum levels of access – or permissions – needed to perform his/her job functions.&lt;/p>
&lt;p>Following this principle, web servers should always be run by an unprivileged user – say &lt;code>www-data&lt;/code> on a Linux system. The reciprocate of this is to &lt;strong>never&lt;/strong> run a web server as &lt;code>root&lt;/code>. This is &lt;em>very important&lt;/em>, as it adds an extra security layer in case the web application is compromised. If that happens, the attacker will have the same privileges on the system as the user running the application.&lt;/p>
&lt;p>Let&amp;rsquo;s say that an attacker managed to find an &lt;strong>RCE vulnerability&lt;/strong> (Remote Code Execution) on the web application. If the application is run by &lt;code>root&lt;/code>, the attacker will be able to perform any command on the system with the same privileges as &lt;code>root&lt;/code>. If, however, the application is run as &lt;code>www-data&lt;/code>, the attacker will only have access to a small part of the system and will have to find another vulnerability to elevate his privileges.&lt;/p>
&lt;h2 id="privilege-escalation-vectors">Privilege Escalation Vectors&lt;/h2>
&lt;h3 id="application-vectors">Application Vectors&lt;/h3>
&lt;p>First of all, let&amp;rsquo;s talk about how an attacker could perform a privilege escalation attack on the web application.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Broken Access Control&lt;/strong> - when a user can in fact access some resource or perform some action that they are not supposed to be able to access.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;strong>Example:&lt;/strong> The web application has an admin panel protected against unauthorized access, but uses API calls to retrieve users and perform actions. The developer forgot to secure these API endpoints with the same protection as the admin panel interface and the attacker discovered them, having unrestricted access to admin commands.&lt;/p>
&lt;/blockquote>
&lt;ol start="2">
&lt;li>&lt;strong>Session Hijacking&lt;/strong> - when a user steals another user / administrator session cookies and impersonates him.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;strong>Example:&lt;/strong> The attacker found an XSS vulnerability / performed a Man in the Middle Attack and stole the session cookie of another user. Now he is able to impersonate that user in any request by using their cookies. If the compromised account is a normal user, it&amp;rsquo;s called horizontal privilege escalation. If it&amp;rsquo;s an administrator account, it&amp;rsquo;s called vertical privilege escalation.&lt;/p>
&lt;/blockquote>
&lt;h3 id="system-vectors">System Vectors&lt;/h3>
&lt;p>Finally, let&amp;rsquo;s analyze a few methods where an attacker could gain elevated privileges once he has a foothold of the system (is able to execute commands on the underlying system).&lt;/p>
&lt;p>There are countless methods to elevate privileges on a Linux system. The key in finding them is to &lt;strong>enumerate&lt;/strong> the host for potential vectors.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Kernel Exploit&lt;/strong>
&lt;ul>
&lt;li>CVE-2016-5195 (&lt;a href="https://dirtycow.ninja/">DirtyCow&lt;/a>) - Linux Kernel &amp;lt;= &lt;code>3.19.0-73.8&lt;/code>.
A race condition was found in the way the Linux kernel&amp;rsquo;s memory subsystem handled the copy-on-write (COW) breakage of private read-only memory mappings. An unprivileged local user could use this flaw to gain write access to otherwise read-only memory mappings and thus increase their privileges on the system.&lt;/li>
&lt;li>sudo &amp;lt;= &lt;code>v1.28&lt;/code>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&amp;gt; sudo -u#-1 /bin/bash
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>&lt;/code>&lt;/pre>&lt;/li>
&lt;li>More kernel exploits in this Git repos: &lt;a href="https://github.com/lucyoa/kernel-exploits">@lucyoa&lt;/a>, &lt;a href="https://github.com/offensive-security/exploitdb-bin-sploits/tree/master/bin-sploits">@offensive-security&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Exploiting SUDO Rights / SUID Binaries&lt;/strong>
&lt;ul>
&lt;li>Sudo configuration might allow a user to execute some command with another user privileges without knowing the password:
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&amp;gt; sudo -l
User demo may run the following commands on demo-host:
&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>root&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> NOPASSWD: /usr/bin/vim
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>This would allow the attacker to create a privileged shell:
```bash
&amp;gt; sudo vim -c '!sh'
&lt;/code>&lt;/pre>&lt;pre>&lt;code>&lt;/code>&lt;/pre>&lt;/li>
&lt;li>SUID Binaries. SUID/Setuid stands for &amp;ldquo;set user ID upon execution&amp;rdquo;, and it is enabled by default in every Linux distributions. If a file with this bit is ran, the &lt;code>uid&lt;/code> will be changed by the owner one. If the file owner is &lt;code>root&lt;/code>, the &lt;code>uid&lt;/code> will be changed to &lt;code>root&lt;/code> even if it was executed from user &lt;code>bob&lt;/code>. SUID bit is represented by an &lt;code>s&lt;/code>.
Commands to list SUID binaries:
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&amp;gt; find / -perm -4000 -type f -exec ls -la &lt;span style="color:#ce5c00;font-weight:bold">{}&lt;/span> 2&amp;gt;/dev/null &lt;span style="color:#4e9a06">\;&lt;/span>
&amp;gt; find / -uid &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> -perm -4000 -type f 2&amp;gt;/dev/null
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://gtfobins.github.io/">GTFOBins&lt;/a> are a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Path Hijacking&lt;/strong>
&lt;ul>
&lt;li>Path Hijacking occurs when a program uses the relative path to another program instead of the absolute path. Consider the following Python code:
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">os&lt;/span>
&lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">system&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;create_backup&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code> The `$PATH` variable is a Linux environment variable that specifies where to look for a specific binary when a full path is not provided. An attacker can exploit this mechanism by either being allowed to modify the `$PATH` variable or being able to write files inside directories specified there.
So, in order to exploit the above Python code, the attacker places a program called `create_backup` inside a location from the `$PATH` variable and Linux will execute the malicious program instead of the intended one.
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Docker Privilege Escalation / Container Escape&lt;/strong>
&lt;ul>
&lt;li>This requires the user to be privileged enough to run docker, i.e. being in the &lt;code>docker&lt;/code> group or being &lt;code>root&lt;/code>.
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&amp;gt; docker run -v /:/mnt --rm -it alpine chroot /mnt sh
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code> The command above creates a new container based on the `Linux Alpine` image, mounts the `/` directory from the host on `/mnt` inside the container and runs it with `/bin/sh`. Now the attacker can read any file on the system.
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Escaping Docker privileged containers. Docker privileged containers are those run with the &lt;code>--privileged&lt;/code> flag. Unlike regular containers, these have root privilege to the host machine. A detailed article can be read &lt;a href="https://betterprogramming.pub/escaping-docker-privileged-containers-a7ae7d17f5a1">here&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Others&lt;/strong>
&lt;ul>
&lt;li>&lt;code>id&lt;/code> / &lt;code>whoami&lt;/code> - identify if the user is part of special groups, such as &lt;code>docker&lt;/code>, &lt;code>admin&lt;/code>, etc.&lt;/li>
&lt;li>&lt;code>cat /etc/passwd&lt;/code> - list system users for potential privilege escalation&lt;/li>
&lt;li>&lt;code>crontab -l&lt;/code> / &lt;code>ls -al /etc/cron* /etc/at*&lt;/code> - enumerate cron jobs (scheduled jobs) on the system.&lt;/li>
&lt;li>&lt;code>ps aux&lt;/code> / &lt;code>ps -ef&lt;/code> - inspect running processes&lt;/li>
&lt;li>&lt;code>find / -name authorized_keys 2&amp;gt; /dev/null&lt;/code> - find SSH authorized keys&lt;/li>
&lt;li>&lt;code>find / -name id_rsa 2&amp;gt; /dev/null&lt;/code> - find SSH private keys&lt;/li>
&lt;li>&lt;code>find / -type f -iname &amp;quot;.*&amp;quot; -ls 2&amp;gt;/dev/null&lt;/code> - find hidden files&lt;/li>
&lt;li>&lt;code>grep --color=auto -rnw '/' -ie &amp;quot;PASSWORD&amp;quot; --color=always 2&amp;gt; /dev/null&lt;/code> - find files containing passwords.&lt;/li>
&lt;li>Manually looking through web server logs, such as access or error logs for any sensitive information. Default locations for these logs:
&lt;ul>
&lt;li>&lt;code>/var/log/apache2/error.log&lt;/code>&lt;/li>
&lt;li>&lt;code>/var/log/apache/access.log&lt;/code>&lt;/li>
&lt;li>&lt;code>/var/log/apache2/access.log&lt;/code>&lt;/li>
&lt;li>&lt;code>/etc/httpd/logs/access_log&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="tools">Tools&lt;/h3>
&lt;p>There are many tools that automated the process of enumeration and could help you save a lot of time when looking for privilege escalation vectors. The best tool for Linux is &lt;a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS">LinPEAS&lt;/a>.&lt;/p>
&lt;h2 id="preventing-privilege-escalation">Preventing Privilege Escalation&lt;/h2>
&lt;p>When it comes to OS-level privilege escalation vulnerabilities, it&amp;rsquo;s vital to install security patches as soon as possible, not only for the OS, but for all third-party applications used on the system.&lt;/p>
&lt;p>Application whitelisting technologies can be used to restrict which programs may run on a system, enabling organizations to reduce a machine&amp;rsquo;s attack surface. Making sure that unneeded services are turned off and that unused hardware components and drivers are disabled is also very important.&lt;/p>
&lt;h2 id="further-reading">Further reading&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.csoonline.com/article/3564726/privilege-escalation-explained-why-these-flaws-are-so-valuable-to-hackers.html">https://www.csoonline.com/article/3564726/privilege-escalation-explained-why-these-flaws-are-so-valuable-to-hackers.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://portswigger.net/web-security/access-control">https://portswigger.net/web-security/access-control&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation">https://book.hacktricks.xyz/linux-unix/privilege-escalation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dirtycow.ninja/">https://dirtycow.ninja/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/lucyoa/kernel-exploits">https://github.com/lucyoa/kernel-exploits&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/offensive-security/exploitdb-bin-sploits/tree/master/bin-sploits">https://github.com/offensive-security/exploitdb-bin-sploits/tree/master/bin-sploits&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gtfobins.github.io/">https://gtfobins.github.io/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://betterprogramming.pub/escaping-docker-privileged-containers-a7ae7d17f5a1">https://betterprogramming.pub/escaping-docker-privileged-containers-a7ae7d17f5a1&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS">https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://app.hackthebox.eu/machines">https://app.hackthebox.eu/machines&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="challenges">Challenges&lt;/h2>
&lt;ul>
&lt;li>Escalation&lt;/li>
&lt;/ul></description></item><item><title>Web:</title><link>/web/10-best-practices/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/web/10-best-practices/readme/</guid><description>
&lt;p>Session 10 content&lt;/p></description></item></channel></rss>