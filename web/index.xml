<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security Summer School –</title><link>/web/</link><description>Recent content on Security Summer School</description><generator>Hugo -- gohugo.io</generator><atom:link href="/web/index.xml" rel="self" type="application/rss+xml"/><item><title>Web:</title><link>/web/05-injection-part-2/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/web/05-injection-part-2/readme/</guid><description>
&lt;h1 id="cross-site-scripting-xss">Cross-site Scripting (XSS)&lt;/h1>
&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>Cross-site Scripting (XSS) is a web security vulnerability that allows an attacker to inject malicious code, usually JavaScript, in the web browser of the victim. This implies that the attacker can do a lot of damage from stealing data to perform actions on behalf of the user. This type of vulnerability implies that the web application uses the user input in the HTML page that it serves. As opposed to other types of code injections, the malicious code in an XSS will always run on the client-side shifting the target from the server hosting the application to the users of the application.&lt;/p>
&lt;h2 id="impact">Impact&lt;/h2>
&lt;p>The impact of the vulnerability is linked with the functionality that the web application provides. If the app is doesn&amp;rsquo;t have much functionality (e.g. a news website) the attacker might not obtain much, but if it&amp;rsquo;s a banking app, there is certainly something to obtain.&lt;/p>
&lt;p>Cross-site Scripting can be used to achieve a lot of things:&lt;/p>
&lt;ul>
&lt;li>steal data - sensitive data as login credentials or credit card numbers&lt;/li>
&lt;li>hijack the session of the user - get the user&amp;rsquo;s session token and browse the application as it&amp;rsquo;s your account without any credentials&lt;/li>
&lt;li>track user movements - keylogging, taking screenshots of the page&lt;/li>
&lt;li>perform actions on behalf of the user - sending payments to attacker&amp;rsquo;s account&lt;/li>
&lt;li>alter the looks of the HTML page (virtual defacement) - fake the balance of the account while the attacker steals the money&lt;/li>
&lt;li>mining - placing a cryptocurrency miner in the page while the user reads a long article&lt;/li>
&lt;li>if that&amp;rsquo;s not enough, you may find more ideas &lt;a href="http://www.xss-payloads.com/payloads.html">here&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="types">Types&lt;/h2>
&lt;p>There are mainly three types of XSS:&lt;/p>
&lt;ul>
&lt;li>Reflected XSS&lt;/li>
&lt;li>Stored XSS&lt;/li>
&lt;li>DOM XSS&lt;/li>
&lt;/ul>
&lt;h3 id="reflected-xss">Reflected XSS&lt;/h3>
&lt;p>Reflected XSS or non-persistent is the simplest form of XSS and occurs when user input is immediately returned by the web application in the HTTP response.&lt;/p>
&lt;p>&lt;img src="../05-injection-2/support/reflected-xss.png" alt="Reflected XSS Steps">&lt;/p>
&lt;p>&lt;img src="../05-injection-2/support/XSS_reflected.gif" alt="Reflected XSS steps">&lt;/p>
&lt;ol>
&lt;li>The attacker crafts a URL containing a malicious string and sends it to the victim.&lt;/li>
&lt;li>The victim is tricked by the attacker into requesting the URL from the website.&lt;/li>
&lt;li>The website includes the malicious string from the URL in the response.&lt;/li>
&lt;li>The victim&amp;rsquo;s browser executes the malicious script inside the response, sending the victim&amp;rsquo;s cookies to the attacker&amp;rsquo;s server.&lt;/li>
&lt;/ol>
&lt;h4 id="example">Example&lt;/h4>
&lt;p>Let&amp;rsquo;s consider a simple application that greets the user with the name passed through the parameter &lt;code>name&lt;/code> in the URL.
&lt;code>https://example.com/greet?name=John&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">p&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>Hello John!&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">p&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Without changing the user input in any way, an attacker might give the following input:&lt;/p>
&lt;p>&lt;code>https://example.com/greet?name=&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">p&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>Hello &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000">alert&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>!&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">p&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The attacker now has control to the JavaScript code using a parameter stored in the URL.&lt;/p>
&lt;h3 id="stored-xss">Stored XSS&lt;/h3>
&lt;p>Stored XSS or persistent XSS happens when user input is stored in the database and it is used non-sanitized in the response HTML pages.&lt;/p>
&lt;p>&lt;img src="../05-injection-2/support/persistent-xss.png" alt="Persistent XSS Steps">&lt;/p>
&lt;p>&lt;img src="../05-injection-2/support/XSS_stored.gif" alt="Stored XXS Steps">&lt;/p>
&lt;ol>
&lt;li>The attacker uses one of the website&amp;rsquo;s forms to insert a malicious string into the website&amp;rsquo;s database.&lt;/li>
&lt;li>The victim requests a page from the website.&lt;/li>
&lt;li>The website includes the malicious string from the database in the response and sends it to the victim.&lt;/li>
&lt;li>The victim&amp;rsquo;s browser executes the malicious script inside the response, sending the victim&amp;rsquo;s cookies to the attacker&amp;rsquo;s server.&lt;/li>
&lt;/ol>
&lt;h4 id="example-1">Example&lt;/h4>
&lt;p>A simple example would be an online shop with a review system that would let customers to write text/comments about the products.
One might use it to say &lt;code>&amp;quot;This product is great! I recommend it!&amp;quot;&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">p&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>This product is great! I recommend it!&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">p&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>But an attacker might use it to send &lt;code>&amp;quot;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&amp;quot;&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">p&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>&lt;span style="color:#000">alert&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">)&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">p&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The difference between this example and the one at Reflected XSS is that the attacker uses a request to send the review that will be stored in the database of the server. Later on, when another user accesses the product page, the code behind the website will get from the database all reviews associated with the product and insert them in the HTML response page.&lt;/p>
&lt;h3 id="dom-xss">DOM XSS&lt;/h3>
&lt;p>DOM vulnerabilities usually arise when JavaScript code uses data from the user to construct the DOM / HTML page.&lt;/p>
&lt;p>&lt;img src="../05-injection-2/support/dom-based-xss.png" alt="DOM XSS Steps">
&lt;img src="../05-injection-2/support/XSS_dom.gif" alt="XSS DOM Steps">&lt;/p>
&lt;ol>
&lt;li>The attacker crafts a URL containing a malicious string and sends it to the victim.&lt;/li>
&lt;li>The victim is tricked by the attacker into requesting the URL from the website.&lt;/li>
&lt;li>The website receives the request, but does not include the malicious string in the response.&lt;/li>
&lt;li>The victim&amp;rsquo;s browser executes the legitimate script inside the response, causing the malicious script to be inserted into the page.&lt;/li>
&lt;li>The victim&amp;rsquo;s browser executes the malicious script inserted into the page, sending the victim&amp;rsquo;s cookies to the attacker&amp;rsquo;s server.&lt;/li>
&lt;/ol>
&lt;h4 id="example-2">Example&lt;/h4>
&lt;p>Suppose the following code is used to create a form to let the user choose his/her preferred language. A default language is also provided in the query string, as the parameter “default”.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">Select your language:
&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">select&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#204a87">document&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">write&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;OPTION value=1&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#204a87">document&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">location&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">href&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">substring&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87">document&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">location&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">href&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">indexOf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;default=&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;/OPTION&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#204a87">document&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">write&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;OPTION value=2&amp;gt;English&amp;lt;/OPTION&amp;gt;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">select&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The page is invoked with a URL such as:&lt;/p>
&lt;p>&lt;code>https://example.com/page.html?default=French&lt;/code>&lt;/p>
&lt;p>A DOM Based XSS attack against this page can be accomplished by sending the following URL to a victim:&lt;/p>
&lt;p>&lt;code>https://example.com/page.html?default=&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&lt;/code>&lt;/p>
&lt;h2 id="note">Note&lt;/h2>
&lt;p>The three types of XSS presented above are the ones that historically speaking were categorised, but in order to do a categorization a criteria is needed. The types above have no criteria on which they are sepparated, so let&amp;rsquo;s split XSS vulnerabilities by the place where data is used:&lt;/p>
&lt;ul>
&lt;li>Server XSS&lt;/li>
&lt;li>Client XSS&lt;/li>
&lt;/ul>
&lt;p>By doing so, the three types above mentioned will look like this:
&lt;img src="../05-injection-2/support/server-client-xss.png" alt="Server vs Client XSS">&lt;/p>
&lt;h2 id="defense-mechanisms">Defense Mechanisms&lt;/h2>
&lt;ol>
&lt;li>&lt;strong>Filter input on arrival.&lt;/strong> At the point where user input is received, filter as strictly as possible based on what is expected or valid input.&lt;/li>
&lt;li>&lt;strong>Encode data on output.&lt;/strong> At the point where user-controllable data is output in HTTP responses, encode the output to prevent it from being interpreted as active content. Depending on the output context, this might require applying combinations of HTML, URL, JavaScript, and CSS encoding.&lt;/li>
&lt;li>&lt;strong>Use appropriate response headers.&lt;/strong> To prevent XSS in HTTP responses that aren&amp;rsquo;t intended to contain any HTML or JavaScript, you can use the &lt;code>Content-Type&lt;/code> and &lt;code>X-Content-Type-Options&lt;/code> headers to ensure that browsers interpret the responses in the way you intend.&lt;/li>
&lt;li>&lt;strong>Content Security Policy.&lt;/strong> Use Content Security Policy (CSP) to reduce the severity of any XSS vulnerabilities that still occur.&lt;/li>
&lt;li>&lt;strong>Continuous database scanning.&lt;/strong> For stored XSS is common practice to scan the database at regulated intervals, although XSS payloads can be written in multiple formats (base64, binary etc.).&lt;/li>
&lt;/ol>
&lt;h2 id="other-xss">Other XSS&lt;/h2>
&lt;h3 id="self-xss">Self XSS&lt;/h3>
&lt;p>Self XSS is a social engineering attack used to gain access to victim&amp;rsquo;s web accounts. The victim is tricked into running malicious JavaScript code into their own browser, in web developer console, which can either exfiltrate data or perform actions on behalf of the user.
This is not a code injection vulnerability as each website is vulnerable to this type of attack. In order to prevent this, websites add warning messages in console. In the image below, there are two examples, from Google Meet and Facebook.&lt;/p>
&lt;p>&lt;img src="../05-injection-2/support/self-xss.png" alt="Self XSS">&lt;/p>
&lt;h3 id="mutated-xss">Mutated XSS&lt;/h3>
&lt;p>Mutated XSS happens when the browser tries to fix and rewrite invaild HTML but fails doing so thus executing attacker&amp;rsquo;s code. Because it depends from browser to browser, is extremely hard to detect or sanitize within the websites application logic. At the end of this page you will find a video explaining a mXSS on Google Search, and also check the link for one of the first papers describing mXSS attacks.&lt;/p>
&lt;h2 id="challenges">Challenges&lt;/h2>
&lt;h3 id="1-dvwa">1. DVWA&lt;/h3>
&lt;p>We will use Damn Vulnerable Web Application (DVWA) for this one. You may install it however you want, just to work, but a simple way to do it is by using Docker. Once you &lt;a href="https://docs.docker.com/engine/install/">installed&lt;/a> docker you must run&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ docker run --rm -it -p 8080:80 vulnerables/web-dvwa
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To access the app, go to http://localhost:8080/setup.php and click on &lt;code>Create/Reset Database&lt;/code>. Login with username &lt;code>admin&lt;/code> and password &lt;code>password&lt;/code>.&lt;/p>
&lt;p>DVWA has multipe vulnerable components, but today we will use the XSS related ones. The app has 4 levels of security that can be changed from &amp;lsquo;DVWA Security&amp;rsquo; section.
All the DVWA challenges allow you to view the PHP source of the page to get additional info about the back-end script. However, in a real-world scenario you won&amp;rsquo;t have that kind of access, so please use this functionality only after you have finished the challenge.&lt;/p>
&lt;p>The goal of this challenges is to rise an &lt;code>alert(1)&lt;/code> from JavaScript like this:
&lt;img src="../05-injection-2/support/dvwa-alert-1.png" alt="DVWA Alert 1">&lt;/p>
&lt;p>With the security level set on &lt;strong>low&lt;/strong> you will have to go through each XSS type. Raise the alert, then change the security level to &lt;strong>medium&lt;/strong> and then &lt;strong>high&lt;/strong>. After you are done with this, change on &lt;strong>impossible&lt;/strong> and click on &lt;code>View Source&lt;/code>. Why an exploit is not possible in this case? Check the PHP documentation to understand why.&lt;/p>
&lt;p>Go thgough each on in the following order: Reflected, Stored, DOM&lt;/p>
&lt;h3 id="2-xss-challenges">2. XSS Challenges&lt;/h3>
&lt;p>You have 6 levels to finish here: &lt;a href="https://xss-game.appspot.com/">https://xss-game.appspot.com/&lt;/a>&lt;/p>
&lt;h3 id="3-even-more-xss-challenges">3. Even more XSS Challenges&lt;/h3>
&lt;p>&lt;a href="https://alf.nu/alert1">https://alf.nu/alert1&lt;/a>&lt;/p>
&lt;h3 id="4-if-you-get-here">4. If you get here&lt;/h3>
&lt;p>&lt;a href="http://prompt.ml/0">http://prompt.ml/0&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://xss-quiz.int21h.jp/">https://xss-quiz.int21h.jp/&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://sudo.co.il/xss/">http://sudo.co.il/xss/&lt;/a>&lt;/p>
&lt;p>Those should be enough to suck the soul out of you.&lt;/p>
&lt;h2 id="further-reading">Further reading&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://owasp.org/www-community/attacks/xss/">https://owasp.org/www-community/attacks/xss/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://portswigger.net/web-security/cross-site-scripting">https://portswigger.net/web-security/cross-site-scripting&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://pentest-tools.com/blog/xss-attacks-practical-scenarios/">5 Practical Scenarios for XSS Attacks&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.xss-payloads.com/payloads.html">XSS Exploit Payloads&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">XSS Cheat Sheet 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://owasp.org/www-community/xss-filter-evasion-cheatsheet">XSS Cheat Sheet 2&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=lG7U3fuNw3A">Mutated XSS on Google Search&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cure53.de/fp170.pdf">mXSS paper&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="cross-site-request-forgery-csrf">Cross-Site Request Forgery (CSRF)&lt;/h1>
&lt;h2 id="intro-1">Intro&lt;/h2>
&lt;p>Cross-site request forgery is a vulnerability in web applications that allows an attacker to trick users into performing actions that they did not intend.&lt;/p>
&lt;h2 id="impact-1">Impact&lt;/h2>
&lt;p>Once again, the impact of the vulnerability is linked with the functionality that the web application provides, but it can range from posting a comment on behalf of the user with an outdated 2008 meme to making payments to attacker&amp;rsquo;s wallet to full account takeover.&lt;/p>
&lt;h2 id="how-does-it-work">How does it work?&lt;/h2>
&lt;p>For a CSRF attack to be possible, three key conditions must be in place:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>A relevant action.&lt;/strong> There is an action within the application that the attacker has a reason to induce. This might be a privileged action (such as modifying permissions for other users) or any action on user-specific data (such as changing the user&amp;rsquo;s own password).&lt;/li>
&lt;li>&lt;strong>Cookie-based session handling.&lt;/strong> Performing the action involves issuing one or more HTTP requests, and the application relies solely on session cookies to identify the user who has made the requests. There is no other mechanism in place for tracking sessions or validating user requests.&lt;/li>
&lt;li>&lt;strong>No unpredictable request parameters.&lt;/strong> The requests that perform the action do not contain any parameters whose values the attacker cannot determine or guess. For example, when causing a user to change their password, the function is not vulnerable if an attacker needs to know the value of the existing password.&lt;/li>
&lt;/ul>
&lt;p>For example, suppose an application contains a function that lets the user change the email address on their account. When a user performs this action, they make an HTTP request like the following:&lt;/p>
&lt;pre>&lt;code>POST /email/change HTTP/1.1
Host: vulnerable-website.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 30
Cookie: session=yvthwsztyeQkAPzeQ5gHgTvlyxHfsAfE
email=wiener@normal-user.com
&lt;/code>&lt;/pre>&lt;p>This meets the conditions required for CSRF:&lt;/p>
&lt;ul>
&lt;li>The action of changing the email address on a user&amp;rsquo;s account is of interest to an attacker. Following this action, the attacker will typically be able to trigger a password reset and take full control of the user&amp;rsquo;s account.&lt;/li>
&lt;li>The application uses a session cookie to identify which user issued the request. There are no other tokens or mechanisms in place to track user sessions.&lt;/li>
&lt;li>The attacker can easily determine the values of the request parameters that are needed to perform the action.&lt;/li>
&lt;/ul>
&lt;p>With these conditions in place, the attacker can construct a web page containing the following HTML:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">html&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">body&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">form&lt;/span> &lt;span style="color:#c4a000">action&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;https://vulnerable-website.com/email/change&amp;#34;&lt;/span> &lt;span style="color:#c4a000">method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;POST&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">input&lt;/span> &lt;span style="color:#c4a000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;hidden&amp;#34;&lt;/span> &lt;span style="color:#c4a000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;email&amp;#34;&lt;/span> &lt;span style="color:#c4a000">value&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;pwned@evil-user.net&amp;#34;&lt;/span> &lt;span style="color:#000;font-weight:bold">/&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">form&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#204a87">document&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">forms&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">].&lt;/span>&lt;span style="color:#000">submit&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">script&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">body&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">html&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="prevention">Prevention&lt;/h2>
&lt;ul>
&lt;li>Use SameSite cookie attribute (similar to HTTPOnly and Secure)&lt;/li>
&lt;li>Add a CSRF token for each request that changes the state of the application (e.g. changing password, sending messages) and validate it on backend&lt;/li>
&lt;li>Use user interaction based CSRF defense for sensitive actions such as changing credentials: re-authentication, one-time token, captcha&lt;/li>
&lt;li>Use Cross-origin resource sharing (CORS) headers to prevent CSRF from your website&lt;/li>
&lt;li>GET methods should not change the state of the application. Use appropriate HTTP methods for their intention.&lt;/li>
&lt;li>in-depth list &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html">here&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>If you find an action/request to have a CSRF token don&amp;rsquo;t give up to that so easily, there are a number of ways that improper validation of the token will still result in a CSRF vulnerability:&lt;/p>
&lt;ul>
&lt;li>Validation of CSRF token depends on request method&lt;/li>
&lt;li>Validation of CSRF token depends on token being present&lt;/li>
&lt;li>CSRF token is not tied to the user session&lt;/li>
&lt;li>CSRF token is tied to a non-session cookie&lt;/li>
&lt;li>CSRF token is simply duplicated in a cookie&lt;/li>
&lt;/ul>
&lt;h2 id="note-1">Note&lt;/h2>
&lt;p>You can combine XSS with CSRF :). If you have two websites that share a part of their user base, you can use a XSS vulnerability in one to abuse a CSRF vulnerability in the other one. For example if a company provides two related services (e.g. email and calendar) you can assume that there is a high probability that a user might have accounts on both of the services, making a Stored XSS in one app a great way to exploit a CSRF in the other one.&lt;/p>
&lt;h2 id="challenges-1">Challenges&lt;/h2>
&lt;h3 id="1-dvwa-1">1. DVWA&lt;/h3>
&lt;p>Using the same setup as for XSS challenges, go to the CSRF page of DVWA and craft URLs that will change the password for the user accessing it for each security level: &lt;strong>low&lt;/strong>, &lt;strong>medium&lt;/strong>, &lt;strong>hard&lt;/strong>. Why a CSRF is not possible for &lt;strong>impossible&lt;/strong>?&lt;/p>
&lt;h3 id="2-portswigger-academy">2. PortSwigger Academy&lt;/h3>
&lt;p>You have 8 challenges here: &lt;a href="https://portswigger.net/web-security/all-labs#cross-site-request-forgery-csrf">https://portswigger.net/web-security/all-labs#cross-site-request-forgery-csrf&lt;/a>&lt;/p>
&lt;h2 id="further-reading-1">Further reading&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://portswigger.net/web-security/csrf">https://portswigger.net/web-security/csrf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://owasp.org/www-community/attacks/csrf">https://owasp.org/www-community/attacks/csrf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html">CSRF Prevention Cheat Sheet&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Web:</title><link>/web/06-recon-enumeration/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/web/06-recon-enumeration/readme/</guid><description>
&lt;h1 id="enumeration--recon--recap">Enumeration &amp;amp; Recon &amp;amp; Recap&lt;/h1>
&lt;p>When it comes to hacking, knowledge is power. The more knowledge you have about a target system or network, the more options you have available. This session will put together all you have learned so far to give you an overview of how to approach a given target you want to exploit. You will also find out about some more security tools that can help you automate the process.&lt;/p>
&lt;h1 id="phases-of-penetration-testing">Phases of Penetration Testing&lt;/h1>
&lt;p>Penetration testing is an authorized simulated cyber attack on a computer system, performed to evaluate its security.&lt;/p>
&lt;p>A standard penetration testing flow implies 5 stages:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>reconnaissance&lt;/strong> - gathering information about the target system: website technologies, subdomains, open ports, Google hacking&lt;/li>
&lt;li>&lt;strong>scanning&lt;/strong> - manually or automatically (using tools) discovering vulnerabilities in the system, like SQL injection, XSS etc.&lt;/li>
&lt;li>&lt;strong>gaining access&lt;/strong> using enumeration - exploiting the vulnerabilities found before to collect sensitive information: usernames, machine names, network information, service settings&lt;/li>
&lt;li>&lt;strong>maintaining access&lt;/strong> - planting hidden programs (like Trojan horses) that make a future attack easier&lt;/li>
&lt;li>&lt;strong>covering tracks&lt;/strong> - cleaning up all the signs that may lead to thinking that an attack happened&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="./support/pentest_phases.png" alt="Penetration testing phases">&lt;/p>
&lt;p>Next, we introduce some popular tools that may help in the first three phases, to gather information about a target. Exploiting Tools/ Security Testing Tools/ Penetration Testing Tools are used for the discovery of vulnerabilities without attempting to actually exploit them.&lt;/p>
&lt;h1 id="1-reconnaissance">1. Reconnaissance&lt;/h1>
&lt;p>Reconnaissance is an important first stage in any ethical hacking attempt. Before it is possible to exploit a vulnerability in the target system, it is necessary to find it. By performing reconnaissance on the target, an ethical hacker can learn about the details of the target network and identify potential attack vectors.&lt;/p>
&lt;h2 id="nmap">Nmap&lt;/h2>
&lt;p>&lt;a href="https://insecure.org/">Nmap&lt;/a> is probably the most well-known tool for active &lt;strong>network&lt;/strong> reconnaissance. It is a network scanner designed to determine details about a system and the programs running on it.&lt;/p>
&lt;p>Every computer has a total of 65535 available ports; however, many of these are registered as standard ports. For example, a HTTP Webservice can nearly always be found on port 80 of the server. A HTTPS Webservice can be found on port 443. If we do not know which of these ports a server has open, then we do not have a hope of successfully attacking the target; thus, it is crucial that we begin any attack with a port scan. Nmap can be used to perform many different kinds of port scan; the basic theory is this: it will connect to each port of the target in turn. Depending on how the port responds, it can be determined as being &lt;em>open&lt;/em>, &lt;em>closed&lt;/em>, or &lt;em>filtered&lt;/em> (usually by a firewall). Once we know which ports are open, we can then look at &lt;em>enumerating&lt;/em> which services are running on each port – either manually, or more commonly using nmap.&lt;/p>
&lt;p>Typing the simple command &lt;code>nmap&lt;/code> will display all of its options for scanning, while &lt;code>nmap &amp;lt;target&amp;gt;&lt;/code> will convert the hostname to an IP address and scan the top 1000 TCP ports, displaying their state and the service running on it:&lt;/p>
&lt;p>&lt;img src="./support/nmap_output.png" alt="Nmap output">&lt;/p>
&lt;p>You can see the full example &lt;a href="https://nmap.org/book/port-scanning-tutorial.html">here&lt;/a> and practice more Nmap options &lt;a href="https://tryhackme.com/room/rpnmap">here&lt;/a>.&lt;/p>
&lt;h1 id="2-scanning">2. Scanning&lt;/h1>
&lt;h2 id="owasp-zap">OWASP Zap&lt;/h2>
&lt;p>Developed by OWASP (Open Web Application Security Project), &lt;a href="https://www.zaproxy.org/">ZAP&lt;/a> or Zed Attack Proxy is a multi-platform, open source web application security testing tool. ZAP is used for finding a number of security vulnerabilities in a web app during the development as well as testing phase. Other than its use as a scanner, ZAP can also be used to intercept a proxy for manually testing a webpage.
ZAP can identify:&lt;/p>
&lt;ul>
&lt;li>Application error disclosure&lt;/li>
&lt;li>Cookie not marked with the HttpOnly flag&lt;/li>
&lt;li>Missing anti-CSRF tokens and security headers&lt;/li>
&lt;li>Private IP disclosure&lt;/li>
&lt;li>Session ID in URL rewrite&lt;/li>
&lt;li>SQL injection&lt;/li>
&lt;li>XSS injection&lt;/li>
&lt;/ul>
&lt;p>You can read about other active recon tools &lt;a href="https://resources.infosecinstitute.com/topic/top-10-network-recon-tools/#gref">here&lt;/a>: Nessus, OpenVAS, Nikto, Metasploit.&lt;/p>
&lt;h1 id="3-enumeration">3. Enumeration&lt;/h1>
&lt;h2 id="extracting-common-passwords---burp-intruder">Extracting common passwords - Burp Intruder&lt;/h2>
&lt;p>You were introduced to Burp Proxy in earlier session. Now we&amp;rsquo;ll see an example of how to use Intruder in order to enumerate passwords.
With Burp Intruder, customized attacks can be automated against web applications. Customizing attacks requires that we specify one or more payloads and the position where the payloads will be placed in the website.&lt;/p>
&lt;ul>
&lt;li>I opened Burp and the built-in Chromium browser (or your browser of choice, but pay attention to the setting up the proxy), having the intercept &lt;strong>off&lt;/strong>.&lt;/li>
&lt;li>I navigated to &lt;a href="https://sss-ctf.security.cs.pub.ro/home">https://sss-ctf.security.cs.pub.ro/home&lt;/a> and tried to log in using the email &lt;strong>&lt;a href="mailto:a@a.com">a@a.com&lt;/a>&lt;/strong> and the password &lt;strong>abc123&lt;/strong>.&lt;/li>
&lt;li>The POST request can be found in HTTP history. Right click on it to send it to Intruder.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./support/send_to_intruder.png" alt="Send request to Burp Intruder">&lt;/p>
&lt;ul>
&lt;li>Let&amp;rsquo;s say we want to try all the passwords from &lt;strong>abc1&lt;/strong>, &lt;strong>abc3&lt;/strong>, &lt;strong>abc5&lt;/strong>&amp;hellip; to &lt;strong>abc100&lt;/strong>. Navigate to the &lt;strong>Positions&lt;/strong> tab - the payload position is specified with a pair of these characters: &lt;strong>§&lt;/strong> called &lt;strong>payload markers&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note!&lt;/strong> By default, Burp surrounds by default some parameter values which might be candidates for enumeration, such as cookie values, or POST data values. Remove the extra &lt;strong>§&lt;/strong> characters, leaving it like in the picture below.&lt;/p>
&lt;p>&lt;img src="./support/payload_position.png" alt="Set payload position">&lt;/p>
&lt;ol>
&lt;li>Our payload type (wordlist) is a sequence of numbers which can be automatically generated in Burp. Go to the &lt;strong>Payloads&lt;/strong> tab and select &lt;strong>Numbers&lt;/strong> as the &lt;strong>Payload type&lt;/strong>.&lt;/li>
&lt;li>Fill in the Payload options to generate all the numbers from 1 to 100, with the step 2 (1, 3, 5&amp;hellip;).&lt;/li>
&lt;li>Finally, launch the attack.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="./support/payload_type.png" alt="Set payload type">&lt;/p>
&lt;p>A new window opens and you can see all the requests Burp is making, with the payloads you specified. For example, you can check the request corresponding to the payload 7, with the resulting password being &lt;strong>abc7&lt;/strong>, and you can observe the response, its status code, or even open it in the browser.&lt;/p>
&lt;p>&lt;img src="./support/attack_example.png" alt="Attack example">&lt;/p>
&lt;p>There are many ways in which you can customize this process according to your needs. You can have multiple payload positions and select from four attack types, specifying how to insert the payloads (one different wordlist for each position, or combinations of them). Find more details &lt;a href="https://portswigger.net/burp/documentation/desktop/tools/intruder/positions">here&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Sniper&lt;/strong> - This uses a single set of payloads. It targets each payload position in turn, and places each payload into that position in turn. Positions that are not targeted for a given request are not affected - the position markers are removed and any enclosed text that appears between them in the template remains unchanged. This attack type is useful for fuzzing a number of request parameters individually for common vulnerabilities. The total number of requests generated in the attack is the product of the number of positions and the number of payloads in the payload set.&lt;/li>
&lt;li>&lt;strong>Battering ram&lt;/strong> - This uses a single set of payloads. It iterates through the payloads, and places the same payload into all of the defined payload positions at once. This attack type is useful where an attack requires the same input to be inserted in multiple places within the request (e.g. a username within a Cookie and a body parameter). The total number of requests generated in the attack is the number of payloads in the payload set.&lt;/li>
&lt;li>&lt;strong>Pitchfork&lt;/strong> - This uses multiple payload sets. There is a different payload set for each defined position (up to a maximum of 20). The attack iterates through all payload sets simultaneously, and places one payload into each defined position. In other words, the first request will place the first payload from payload set 1 into position 1 and the first payload from payload set 2 into position 2; the second request will place the second payload from payload set 1 into position 1 and the second payload from payload set 2 into position 2, etc. This attack type is useful where an attack requires different but related input to be inserted in multiple places within the request (e.g. a username in one parameter, and a known ID number corresponding to that username in another parameter). The total number of requests generated in the attack is the number of payloads in the smallest payload set.&lt;/li>
&lt;li>&lt;strong>Cluster bomb&lt;/strong> - This uses multiple payload sets. There is a different payload set for each defined position (up to a maximum of 20). The attack iterates through each payload set in turn, so that all permutations of payload combinations are tested. I.e., if there are two payload positions, the attack will place the first payload from payload set 2 into position 2, and iterate through all the payloads in payload set 1 in position 1; it will then place the second payload from payload set 2 into position 2, and iterate through all the payloads in payload set 1 in position 1. This attack type is useful where an attack requires different and unrelated or unknown input to be inserted in multiple places within the request (e.g. when guessing credentials, a username in one parameter, and a password in another parameter). The total number of requests generated in the attack is the product of the number of payloads in all defined payload sets - this may be extremely large.&lt;/li>
&lt;/ul>
&lt;p>There are also many different types of payloads you can use (&lt;a href="https://portswigger.net/burp/documentation/desktop/tools/intruder/payloads/types">here&lt;/a> is the entire list), from specifying your own list of words to generating random bytes. You can find lists of popular credentials online, for instance, &lt;a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords">here&lt;/a> is a repo with lists of most used passwords.&lt;/p>
&lt;h2 id="brute-force-active-directory">Brute Force Active Directory&lt;/h2>
&lt;p>Let&amp;rsquo;s say we have the target server &lt;strong>http://192.168.1.224/&lt;/strong> and we want to discover hidden files, directories or other resources there. Manually, we would make multiple requests like &lt;em>http://192.168.1.224/docs&lt;/em>, &lt;em>http://192.168.1.224/config.php&lt;/em> etc. or whatever we imagine might find and see if we get a 404 Not Found response or not. Luckily, there are command line tools and predefined wordlists in Kali (&lt;strong>/usr/share/wordlists/&lt;/strong>) doing exactly this for us.&lt;/p>
&lt;h2 id="dirb">DIRB&lt;/h2>
&lt;p>&lt;a href="https://tools.kali.org/web-applications/dirb">DIRB&lt;/a> is a Web Content Scanner, a Kali built in tool. It looks for existing (and/or hidden) Web Objects. It basically works by launching a dictionary based attack against a web server and analyzing the response.
DIRB comes with a set of preconfigured attack wordlists for easy usage but you can use your custom wordlists. For each filename, it check the existence on the webserver and returns the results which do not give a 404 Not Found response.&lt;/p>
&lt;p>Usage example: &lt;code>./dirb &amp;lt;url_base&amp;gt; [&amp;lt;wordlist_file(s)&amp;gt;] [options]&lt;/code>&lt;/p>
&lt;p>&lt;img src="./support/dirb_example.png" alt="DIRB example">&lt;/p>
&lt;p>The output lines with the results found (not 404) start with a &lt;code>+&lt;/code> and give details about status code and page size.&lt;/p>
&lt;p>You can read the documentation if you want to specify custom options, like custom file extensions to look for.&lt;/p>
&lt;h2 id="similar-tools">Similar tools&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://tools.kali.org/web-applications/dirbuster">DirBuster&lt;/a> - Kali built in, written in Java and the only one with a GUI and not a CLI&lt;/li>
&lt;li>&lt;a href="https://tools.kali.org/web-applications/gobuster">GoBuster&lt;/a> - Kali built in, written in Go, also run in command line, but with more configurable options, like setting cookies or the User-Agent&lt;/li>
&lt;li>&lt;a href="https://github.com/xmendez/wfuzz">wfuzz&lt;/a> - available on GitHub, written in Python, has a lot of options, can be easily installed with pip&lt;/li>
&lt;li>&lt;a href="https://github.com/ffuf/ffuf">ffuf&lt;/a> - also on GitHub, written in Go, has the option to mutate the files found&lt;/li>
&lt;/ul>
&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://hackr.io/blog/top-10-open-source-security-testing-tools-for-web-applications">https://hackr.io/blog/top-10-open-source-security-testing-tools-for-web-applications&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.knowledgehut.com/blog/security/enumeration-in-ethical-hacking">https://www.knowledgehut.com/blog/security/enumeration-in-ethical-hacking&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.greycampus.com/opencampus/ethical-hacking/enumeration-and-its-types">https://www.greycampus.com/opencampus/ethical-hacking/enumeration-and-its-types&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="challenges">Challenges&lt;/h2></description></item><item><title>Web:</title><link>/web/07-api/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/web/07-api/readme/</guid><description>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Application programming interfaces (APIs) and frameworks have become a critical part of almost every business. APIs are responsible for transferring information between systems within a company or to external companies. API may be a system API or a library API. Here we talk about web APIs, i.e. APIs provided by web applications. APIs are means through which a client accesses remote services. For example, when you log in to a website like Google or Facebook, an API processes your login credentials to verify they are correct. A framework, or software framework, is a platform for developing software applications. It provides a foundation on which software developers can build programs for a specific platform. For example, a framework may include predefined classes and functions that can be used to process input, manage hardware devices, and interact with system software.&lt;/p>
&lt;p>However, given the sensitive data being transferred through APIs, it’s critical to secure them. Moreover, from time to time people find vulnerabilities for versions of widely used frameworks, which puts numerous web apps at risk. Therefore, it&amp;rsquo;s best to be up to date and apply security patches as soon as a new vulnerability arises.&lt;/p>
&lt;h1 id="api-vulnerabilities">API Vulnerabilities&lt;/h1>
&lt;p>By nature, APIs expose application logic and sensitive data such as Personally Identifiable Information (PII) and because of this have increasingly become a target for attackers. PII is any data that could potentially be used to identify a particular person. Examples include a full name, Social Security number, driver&amp;rsquo;s license number, bank account number, passport number, and email address.&lt;/p>
&lt;h2 id="broken-object-level-authorization">Broken Object Level Authorization&lt;/h2>
&lt;p>An object refers to a data source that is associated with an authenticated entity. Object-level authorization is all about controlling access based on the scope of permissible user data and object access. A simple physical world example is a hotel room key which is coded to only open the room you paid for, as opposed to a master key used by a maid that opens all the rooms on the floor.&lt;br>
Attackers can exploit API endpoints that are vulnerable to broken object level authorization by manipulating the ID of an object that is sent within the client request. What this means is that the client can request information from an API endpoint that they are not supposed to have access to. This attack normally leads to unauthorized information disclosure, modification, or destruction of data.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>Say for instance there is an e-commerce platform that provides financial and hosted services to a group of different online stores (shops). The platform provides an API used to gain access to revenue charts for each of their hosted stores, and each store should only have access to their own revenue charts. However, while inspecting the client request from a single store who wants to gain access to their own revenue charts, an attacker can identify (find) the API endpoint for those revenue charts and identify the URL in use, for example &lt;code>/shops/{shop name}/revenue_data.json&lt;/code>. Using the names of other stores being hosted on the e-commerce platform, an attacker can create a simple script to modify the &lt;code>{shop name}&lt;/code> ID object in subsequent requests, and gain access to the revenue charts of every other store.&lt;/p>
&lt;h2 id="broken-authentication">Broken Authentication&lt;/h2>
&lt;p>Being different than Authorization discussed above, Authentication on the other hand is a complex and confusing mechanism concerning APIs. Since authentication endpoints are exposed to anyone by design, the endpoints that are responsible for user-authentication must be treated differently from regular API endpoints and implement extra layers of protection for credential stuffing attempts, in addition to brute force password and token guessing attacks.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>Suppose that an attacker obtained a list of leaked username/password combinations as the result of a data breach from another organization. If the API endpoint handling authentication does not implement brute force or credential stuffing protections like CAPTCHA, rate-limiting, account lockout, etc., an attacker can repeatedly attempt to gain access using the list of username/password combinations to determine what combination(s) work.&lt;/p>
&lt;h2 id="excessive-data-exposure">Excessive Data Exposure&lt;/h2>
&lt;p>By design, API endpoints often expose sensitive data since they frequently rely on the client app to perform data filtering. Attackers exploit this issue by sniffing the traffic to analyze the responses, looking for sensitive data that should not be exposed. This data is supposed to be filtered on the client app, before being presented to the user.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>Imagine that an IoT-based camera surveillance system allows administrators to add a newly-hired security guard as a system user, and the administrator wants to ensure the new user should only have access to certain cameras. These cameras are accessible via a mobile app that the security guard uses while at work. The newly hired security guard’s mobile app makes an API request to an endpoint in order to receive data about the cameras, and relies on the mobile app to filter which cameras the guard has access to. Although the mobile app only shows the cameras the guard can access, the actual API response contains a full list of all the cameras. Using the sniffed traffic, an attacker can manipulate the API request to show all cameras, bypassing the filtering on the mobile app.&lt;/p>
&lt;h2 id="lack-of-resources--rate-limiting">Lack of Resources &amp;amp; Rate Limiting&lt;/h2>
&lt;p>It is common to find API endpoints that do not implement any sort of rate limiting on the number of API requests, or they do not limit the type of requests that can consume considerable network, CPU, memory, and storage resources. The amount of resources required to satisfy a request greatly depends on the user input and endpoint business logic. Attackers exploit these issues causing denial-of-service attacks and associated endpoint outages.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>Let’s say that an attacker wants to cause a denial-of-service outage to a certain API that contains a very large list of users. The users’ list can be queried, but the application limits the number of users that can be displayed to 100 users. A normal request to the application would look like this: &lt;code>/api/users?page=1&amp;amp;size=100&lt;/code>. In this case, the request would return with the first page and the first 100 users. If the attacker changed the size parameter from 100 to 200000, it could cause a performance issue on the backend database, since the size parameter in use is so large. As a result, the API becomes unresponsive and is unable to handle further requests from this or any other client.&lt;/p>
&lt;h2 id="broken-function-level-authorization">Broken Function Level Authorization&lt;/h2>
&lt;p>Although different than Broken Object Level Authorization (described above), exploitation of this issue requires the attacker to send API requests to endpoints that they should not have access to, yet are exposed to anonymous users or regular, non-privileged users. These types of flaws are often easy to find and can allow attackers to access unauthorized functionality. For example, administrative functions are prime targets for this type of attack.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>To illustrate this further, imagine that during the registration process to a certain application that only allows invited users to join, the mobile app triggers an API request to GET /api/invites/{invite_guid}. GET is a standard HTTP method used to request information from a particular resource. In this case, the response to the GET contains details about the invite, including the user’s role and email address.&lt;/p>
&lt;p>Now, say that an attacker duplicated the request and manipulated the HTTP method by changing GET to POST. POST is an HTTP method used to send information to create or update a resource. The URL would look like this: &lt;code>POST /api/invites/new/{“email”:”hugo@malicious.com”,”role”:”admin”}&lt;/code>. In this case, the attacker easily exploits this issue and sends himself an email invite to create an admin account.&lt;/p>
&lt;h2 id="mass-assignment">Mass Assignment&lt;/h2>
&lt;p>Modern frameworks encourage developers to use functions that automatically bind input from the client into code variables and internal objects. What this means is that users should have the ability to update their username, contact details, etc. (within their profiles for example), but they should not be able to change their user-level permissions, adjust account balances, and other administrative-like functions. An API endpoint is considered vulnerable if it automatically converts the client input into internal object properties, without considering the sensitivity and the exposure level of these properties. This could allow an attacker to update things that they should not have access to.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>To illustrate this further, imagine that a ride sharing application provides the user the option to edit basic information about themselves in their user profile. For example, they can adjust their username, age, etc. In this case, the API request would look like this: &lt;code>PUT /api/v1/users/me&lt;/code> with the following legitimate information:&lt;/p>
&lt;p>&lt;code>{&amp;quot;username&amp;quot;:&amp;quot;john&amp;quot;,&amp;quot;age&amp;quot;:24}&lt;/code>&lt;/p>
&lt;p>However, the attacker determines that the request &lt;code>GET /api/v1/users/me&lt;/code> includes an additional credit_balance property (field) as shown below.&lt;/p>
&lt;p>&lt;code>{&amp;quot;username&amp;quot;:&amp;quot;john&amp;quot;,&amp;quot;age&amp;quot;:24,&amp;quot;credit_balance&amp;quot;:10}&lt;/code>&lt;/p>
&lt;p>The attacker desires to increase their credit balance on their own and replays the first request with the following payload:&lt;/p>
&lt;p>&lt;code>{&amp;quot;username&amp;quot;:&amp;quot;john&amp;quot;,&amp;quot;age&amp;quot;:24,&amp;quot;credit_balance&amp;quot;:99999}&lt;/code>&lt;/p>
&lt;p>Since the endpoint is vulnerable to mass assignment, the attacker can easily adjust their own &lt;code>credit_balance&lt;/code> at will, for example changing it from 10 credits to 99999 as shown above.&lt;/p>
&lt;h2 id="security-misconfiguration">Security Misconfiguration&lt;/h2>
&lt;p>Attackers will often attempt to find unpatched flaws, common endpoints, or unprotected files and directories to gain unauthorized access or knowledge of the system they want to attack. Security misconfigurations can not only expose sensitive user data, but also system details that may lead to full server compromise.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>Say for instance that an attacker uses a popular search engine like Shodan to search for computers and devices directly accessible from the Internet. The attacker found a server running a popular database management system, listening on the default TCP port. The database management system was using the default configuration, which has authentication disabled by default, and the attacker gained access to millions of records with PII, personal preferences, and authentication data.&lt;/p>
&lt;h2 id="injection">Injection&lt;/h2>
&lt;p>Injection flaws, such as SQL, NoSQL, command injection, etc., occur when untrusted data is sent to an interpreter as part of a command or query. Injection vulnerabilities cause computing systems to potentially process malicious data that attackers introduce. To put it in its simplest terms, attackers inject code into a vulnerable piece of software and change the way the software is intended to be executed. As a result, injection attacks can be somewhat disastrous, since they normally lead to data theft, data loss, data corruption, denial of service, etc.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>Suppose an attacker starts inspecting the network traffic of their web browser and identifies the following API request designed to help a user recover their password. The attacker identifies the request responsible to start the recovery-password process as follows:&lt;/p>
&lt;p>&lt;code>POST /api/accounts/recovery {“email”: “john@somehost.com”}&lt;/code>&lt;/p>
&lt;p>Then the attacker replays the request with a different payload:&lt;/p>
&lt;p>&lt;code>POST /api/account/recovery {“email”: “john@somehost.com’;WAITFOR DELAY ‘0:0:5’–“}&lt;/code>&lt;/p>
&lt;p>By adding the &lt;code>;WAITFOR DELAY ‘0:0:5’–”&lt;/code> the attacker observes that the response from the API took ~5 seconds longer, which helps confirm the API is vulnerable to SQL injection. Exploiting the injection vulnerability, the attacker was able to gain unauthorized access to the system.&lt;/p>
&lt;h2 id="improper-assets-management">Improper Assets Management&lt;/h2>
&lt;p>Old API versions are often unpatched and can become an easy way to compromise systems without having to fight state-of-the-art security systems, which might be in place to protect the most recent API versions. Attackers may gain access to sensitive data, or even take over the server through old, unpatched API versions connected to the same database.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>Say for instance that an organization redesigning their applications forgot about an old API version (api.someservice.com/v1) and left it unprotected, and with access to the user database. While targeting one of the latest released applications, an attacker found the API address (api.someservice.com/v2). Replacing v2 with v1 in the URL gave the attacker access to the old, unprotected API, exposing the personal identifiable information (PII) of millions of users.&lt;/p>
&lt;h2 id="insufficient-logging--monitoring">Insufficient Logging &amp;amp; Monitoring&lt;/h2>
&lt;p>Without logging and monitoring, or with insufficient logging and monitoring, it is almost impossible to track suspicious activities targeting APIs and respond to them in a timely fashion. Without visibility over ongoing malicious activities, attackers have plenty of time to potentially compromise systems and steal data. Most breach studies demonstrate the time to detect a breach is over 200 days, typically detected by external parties rather than internal processes or monitoring.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>Imagine that a video-sharing platform was hit by a &amp;ldquo;large-scale&amp;rdquo; credential stuffing attack. Despite failed logins being logged, no alerts were triggered during the timespan of the attack, and it proceeded without being noticed. As a reaction to user complaints about a possible breach, API logs were analyzed and the attack was detected, way after the fact. The company had to make a public announcement asking users to reset their passwords, and report the incident to their regulatory authorities.&lt;/p>
&lt;h1 id="framework-vulnerabilities">Framework Vulnerabilities&lt;/h1>
&lt;p>Web application framework is a collection of pieces of software designed to ease the development of web applications. Web application frameworks provide common solutions for a wide variety of tasks such as database access, input filtering for security purposes, authentication, session handling and templates for website development.&lt;/p>
&lt;p>There are several different types of web application frameworks:&lt;/p>
&lt;ul>
&lt;li>General purpose website frameworks (Ruby On Rails)&lt;/li>
&lt;li>Discussion forums, wikis and weblogs (WikiBase/WikiWikiWeb)&lt;/li>
&lt;li>Organizational portals (JBoss Portal)&lt;/li>
&lt;li>Content Management Systems (CMS) (Joomla, Drupal, Wordpress)&lt;/li>
&lt;/ul>
&lt;p>When performing a security audition (or hacking) of a website it is necessary to identify the implementation technologies of the target. This identification can be done manually or more commonly using automated tools, such as &lt;a href="https://builtwith.com/">BuiltWith&lt;/a> and &lt;a href="https://www.wappalyzer.com/">Wappalyzer&lt;/a>. Once the web application framework is detected further penetration steps depend on the framework. Quite a few websites are done with CMSs and contain no application-specific custom code. For these applications, identifying the CMSs modules used and their version is necessary. This information can be used further to search for vulnerabilities or perform a manual code inspection of the modules used. Finding a security flaw usually means that the website has not been properly updated. If a manual inspection of CMS modules reveals vulnerabilities, it is very likely that these modules are used in other websites, which makes them vulnerable as well.&lt;/p>
&lt;p>The most widely used web Frameworks provide lots of security mechanisms by default - for example, Django provides protection for SQL injection, XSS injection, clickjacking and many more. However, from time to time vulnerabilities are found and attackers have numerous possible targets, since some of these frameworks are extremely popular.&lt;/p>
&lt;p>The rest of the section contains examples of vulnerabilities found in various framework versions.&lt;/p>
&lt;h2 id="laravel">Laravel&lt;/h2>
&lt;p>Laravel is one of the &lt;a href="https://customerthink.com/what-makes-laravel-the-most-preferred-php-framework-for-web-development/">most preferred&lt;/a> PHP Frameworks for Web Development.&lt;/p>
&lt;p>In 2019 a vulnerability was found for the popular Laravel-query-builder package. Due to the way Laravel builder parses the string to query, the hacker can leverage this to attack the application with an SQL Injection attack.&lt;/p>
&lt;p>The package is parsing the URLs to add some filters to the queries.&lt;/p>
&lt;p>For example, if you want to sort the articles by title:&lt;/p>
&lt;p>&lt;code>https://example.com/articles?sort=title&lt;/code>&lt;/p>
&lt;p>You may use the following code to automatically sort by the package:&lt;/p>
&lt;p>&lt;code>use Spatie\QueryBuilder\QueryBuilder;&lt;/code>&lt;/p>
&lt;p>&lt;code>$articles = QueryBuilder::for(Article::class)-&amp;gt;get();&lt;/code>&lt;/p>
&lt;p>This will be translated into:&lt;/p>
&lt;p>&lt;code>Article::orderBy('title')-&amp;gt;get();&lt;/code>&lt;/p>
&lt;p>And the underlined SQL query will be:&lt;/p>
&lt;p>&lt;code>select * from 'articles' order by 'title' asc&lt;/code>&lt;/p>
&lt;p>The attacker can take advantage of this transformation to perform an SQL Injection attack, by changing the URL to:&lt;/p>
&lt;p>&lt;code>https://example.com/articles?sort=title-&amp;gt;&amp;quot;%27))injectedSQL&lt;/code>&lt;/p>
&lt;p>Since Laravel supports queries in JSON fields, it will guess that you want to query json &lt;code>title-&amp;gt;&lt;/code> so it replaces &lt;code>-&amp;gt;&lt;/code> with JSON MySQL functions. The attacker closes the functions brackets &lt;code>))&lt;/code> and adds his injected SQL.&lt;/p>
&lt;p>The final command:&lt;/p>
&lt;p>&lt;code>select * from articles order by json_unquote(json_extract(title, '$.&amp;quot;&amp;quot;'))&lt;/code>&lt;strong>&lt;code>injectedSQL&lt;/code>&lt;/strong>&lt;code>&amp;quot;')) asc&lt;/code>&lt;/p>
&lt;p>&lt;strong>Vulnerable versions:&lt;/strong>&lt;/p>
&lt;p>Laravel 5.6/5.7/5.8 with Laravel-query-builder &amp;lt; v1.17.1
Laravel 5.5 with Laravel-query-builder &amp;lt; v1.16.1&lt;/p>
&lt;h2 id="drupal">Drupal&lt;/h2>
&lt;p>Drupal is a free and open-source web content management framework written in PHP. Drupal provides a back-end framework for at least 2.3% of all websites worldwide – ranging from personal blogs to corporate, political, and government sites. According to builtwith.com, 473 of the Quantcast top 10,000 websites use Drupal, and that number jumps up to 4,341 when you look at the top 100,000.&lt;/p>
&lt;p>Drupal introduced a Form API in Drupal 6 which allowed alteration of the form data during the form rendering process. In 2018, Drupal released a patch adding just a single class, &lt;em>RequestSanitizer&lt;/em>, with a &lt;em>stripDangerousValues&lt;/em> method that unsets all the items in an input array for keys that start with a hash sign. This method sanitizes input data in $_GET, $_POST &amp;amp; $_COOKIES during the very early stages of Drupal’s bootstrap (immediately after loading the site configurations). It can be assumed that the reason why the patch was released is to make an existing vulnerability harder to find.&lt;/p>
&lt;p>The vulnerability was found in the forms. The user registration form which requires no authentication and can be accessed anonymously contains multiple input fields and can be exploited.&lt;/p>
&lt;p>&lt;img src="https://github.com/hexcellents/sss-web/blob/master/07-framework-api-vulnerabilities/support/drupal1.png" alt="Form Fields">&lt;/p>
&lt;p>It was highly probable that injecting a renderable array would exploit the vulnerability, the question was where?&lt;/p>
&lt;p>As it turns out, the “Email Address” field doesn’t sanitize the type of input it receives which allows hackers to inject the renderable array to the form array structure. Renderable arrays contain metadata that is used in the rendering process.&lt;/p>
&lt;p>&lt;img src="https://github.com/hexcellents/sss-web/blob/master/07-framework-api-vulnerabilities/support/drupal2.png" alt="Injected Array">&lt;/p>
&lt;p>Since Drupal treats the injected array as a value and not as an element, attackers need to trick Drupal into rendering it. Drupal renders an array on page load events or via Drupal AJAX API.&lt;/p>
&lt;p>The &amp;ldquo;Picture&amp;rdquo; field of the user registration form uses Drupal’s AJAX API to upload a picture and replace it with a thumbnail of the uploaded image.&lt;/p>
&lt;p>What&amp;rsquo;s more important about this attack is that a Russian Security Researcher posted a &lt;a href="https://github.com/a2u/CVE-2018-7600/blob/master/exploit.py">POC&lt;/a> on Github and soon after numerous people started using it to install cryptocurrency miners and malware backdoors.&lt;/p>
&lt;p>&lt;strong>Vulnerable versions:&lt;/strong>&lt;/p>
&lt;p>Drupal &amp;lt; 8.3.9 / &amp;lt; 8.4.6 / &amp;lt; 8.5.1 ~ user/register URL, attacking account/mail &amp;amp; #post_render parameter, using PHP&amp;rsquo;s passthru function&lt;br>
Drupal &amp;lt; 7.58 ~ user/password URL, attacking triggering_element_name form &amp;amp; #post_render parameter, using PHP&amp;rsquo;s passthru function&lt;/p>
&lt;h2 id="wordpress">WordPress&lt;/h2>
&lt;p>Details of a serious Denial of Service (DoS) vulnerability in WordPress have been published by an Israeli security researcher named Barak Tawily. This vulnerability can be used to take down a website in a matter of minutes.&lt;/p>
&lt;p>The vulnerability is listed on the CVE (Common Vulnerabilities and Exposures) website as CVE-2018-6389 and on Exploit DB as exploit number 43968. Barak Tawily first wrote about it on February 5, 2018 on his blog.&lt;/p>
&lt;p>This issue is related to a file called load-scripts.php, which is a part of the WordPress core. This file is used to improve the performance by loading multiple external JavaScript (JS) files in a single request.&lt;/p>
&lt;p>Barak first noticed the problem when he saw an unusual URL that was loading when he visited certain WordPress pages. That URL was:&lt;/p>
&lt;p>&lt;code>https://DOMAINNAME/wp-admin/load-scripts.php?c=1&amp;amp;load%5B%5D=jquery-ui-core&amp;amp;ver=4.9.1&lt;/code>&lt;/p>
&lt;p>He noticed that the load-scripts.php file was receiving a parameter called load[]. This parameter is an array that was receiving the names of the JS files that needed to be loaded. In this case, it was receiving jQuery UI Core, which is the name of one of the Javascript files used by the WordPress login page.&lt;/p>
&lt;p>Because WordPress is an open source platform, it was simple for Barak to review the application’s code and determine precisely how WordPress loaded these files. He discovered that load-scripts.php file was designed to economise the loading of external JS files. Another file, called load-styles.php, was doing the same thing for Cascading Style Sheet (CSS) files.&lt;/p>
&lt;p>This feature allowed the browser to receive multiple files with a single request, dramatically improving the load time of each admin page. Although it was only designed for use on admin pages, it was also being used on the login page — before the user had been authenticated. This oversight is responsible for the vulnerability.&lt;/p>
&lt;p>He continued to explore the source code of WordPress and discovered that there is a variable that contains a defined list of scripts that can be loaded. If one of the names in the load[] array matches one of these script names, the server will perform an I/O read action to load it. The list of scripts that are available is defined in a file called script-loader.php. It includes 181 different scripts. The server took ~2.2 seconds to gather the files, merge them into one file, and send them to the browser. After performing 500 requests, the server was overloaded and became unable to respond to subsequent requests. He posted a &lt;a href="https://www.youtube.com/watch?v=nNDsGTalXS0&amp;amp;feature=youtu.be">video&lt;/a> showing how quickly it could be used to take down a WordPress website.&lt;/p>
&lt;h1 id="resources">Resources&lt;/h1>
&lt;ul>
&lt;li>Metropolia University of Applied Sciences&lt;/li>
&lt;li>&lt;a href="https://blog.papertrailapp.com/common-api-vulnerabilities-and-how-to-secure-them/">https://blog.papertrailapp.com/common-api-vulnerabilities-and-how-to-secure-them/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://techterms.com/definition/framework">https://techterms.com/definition/framework&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://owasp.org/www-project-api-security/">https://owasp.org/www-project-api-security/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.checkmarx.com/blog/breaking-down-owasp-api-security-top10-part1">https://www.checkmarx.com/blog/breaking-down-owasp-api-security-top10-part1&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://securityboulevard.com/2020/01/breaking-down-the-owasp-api-security-top-10-part-2/">https://securityboulevard.com/2020/01/breaking-down-the-owasp-api-security-top-10-part-2/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://shieldfy.io/blog/serious-sql-injection-vulnerability-in-laravel-query-builder/">https://shieldfy.io/blog/serious-sql-injection-vulnerability-in-laravel-query-builder/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://research.checkpoint.com/2018/uncovering-drupalgeddon-2/">https://research.checkpoint.com/2018/uncovering-drupalgeddon-2/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.secpod.com/blog/drupalgeddon-2/">https://www.secpod.com/blog/drupalgeddon-2/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.threatpress.com/wordpress-vulnerability-dos/">https://blog.threatpress.com/wordpress-vulnerability-dos/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://freek.dev/1317-an-important-security-release-for-laravel-query-builder">https://freek.dev/1317-an-important-security-release-for-laravel-query-builder&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Web:</title><link>/web/08-secure-communication/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/web/08-secure-communication/readme/</guid><description>
&lt;p>http connections are plain text&lt;/p>
&lt;p>attackers controlling the middleboxes can intercept traffic (man-in-the-middle, MitM attack)&lt;/p>
&lt;p>information on MitM: &lt;a href="https://www.thesslstore.com/blog/man-in-the-middle-attack-2/,">https://www.thesslstore.com/blog/man-in-the-middle-attack-2/,&lt;/a> &lt;a href="https://charlesreid1.com/wiki/Man_in_the_Middle,">https://charlesreid1.com/wiki/Man_in_the_Middle,&lt;/a> &lt;a href="https://charlesreid1.com/wiki/Man_in_the_Middle/HTTPS">https://charlesreid1.com/wiki/Man_in_the_Middle/HTTPS&lt;/a>&lt;/p>
&lt;p>connections need to be security: confidentiality and integrity&lt;/p>
&lt;p>confidentiality: encryption and identity&lt;/p>
&lt;p>TLS: certificates (identity) + encryption (confidentiality)&lt;/p>
&lt;p>certificates: identity + symmetric key generation for encryption&lt;/p>
&lt;p>SSL1.0, SSL2.0, SSL3.0, TLS1.0, TLS1.1, TLS1.2, TLS1.3: &lt;a href="https://maulwuff.de/research/ssl-debugging.html">https://maulwuff.de/research/ssl-debugging.html&lt;/a>&lt;/p>
&lt;p>use wget + https (google.com)&lt;/p>
&lt;p>save certificate&lt;/p>
&lt;p>use &lt;code>openssl s_client&lt;/code>&lt;/p>
&lt;p>investigate certificate&lt;/p>
&lt;p>self-signed certificates&lt;/p>
&lt;p>use ssllabs&lt;/p>
&lt;p>certificate internals&lt;/p>
&lt;ul>
&lt;li>key exchange&lt;/li>
&lt;li>public key algorithm&lt;/li>
&lt;li>ciphers&lt;/li>
&lt;/ul>
&lt;p>issues: &lt;a href="https://www.venafi.com/education-center/ssl/common-ssl-attacks">https://www.venafi.com/education-center/ssl/common-ssl-attacks&lt;/a>&lt;/p>
&lt;p>HTTP spoofing: client (referal), server-name close, &lt;a href="https://doubleoctopus.com/security-wiki/threats-and-tools/https-spoofing/">https://doubleoctopus.com/security-wiki/threats-and-tools/https-spoofing/&lt;/a>&lt;/p>
&lt;p>client authentication&lt;/p>
&lt;p>SSL stripping: &lt;a href="https://charlesreid1.com/wiki/SSLStrip,">https://charlesreid1.com/wiki/SSLStrip,&lt;/a> &lt;a href="https://www.venafi.com/blog/what-are-ssl-stripping-attacks">https://www.venafi.com/blog/what-are-ssl-stripping-attacks&lt;/a>&lt;/p>
&lt;p>use SSLSniff: &lt;a href="https://charlesreid1.com/wiki/SSLSniff,">https://charlesreid1.com/wiki/SSLSniff,&lt;/a> &lt;a href="https://github.com/moxie0/sslsniff">https://github.com/moxie0/sslsniff&lt;/a>&lt;/p>
&lt;p>redirection HTTP to HTTPS, issues&lt;/p>
&lt;p>HSTS: &lt;a href="https://https.cio.gov/hsts/,">https://https.cio.gov/hsts/,&lt;/a> &lt;a href="https://www.sentinelstand.com/article/http-strict-transport-security-hsts-canonical-www-redirects,">https://www.sentinelstand.com/article/http-strict-transport-security-hsts-canonical-www-redirects,&lt;/a> &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security,">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security,&lt;/a> &lt;a href="https://security.stackexchange.com/questions/129273/whats-the-difference-between-using-hsts-and-doing-a-301-redirection">https://security.stackexchange.com/questions/129273/whats-the-difference-between-using-hsts-and-doing-a-301-redirection&lt;/a>&lt;/p>
&lt;p>mitmproxy: &lt;a href="https://mitmproxy.org/,">https://mitmproxy.org/,&lt;/a> &lt;a href="https://tools.kali.org/sniffingspoofing/mitmproxy">https://tools.kali.org/sniffingspoofing/mitmproxy&lt;/a>&lt;/p>
&lt;p>certificate pinning&lt;/p>
&lt;p>TLS / SSL attacks: &lt;a href="https://tools.ietf.org/html/rfc7457,">https://tools.ietf.org/html/rfc7457,&lt;/a> &lt;a href="https://www.acunetix.com/blog/articles/tls-vulnerabilities-attacks-final-part/,">https://www.acunetix.com/blog/articles/tls-vulnerabilities-attacks-final-part/,&lt;/a> &lt;a href="https://www.cloudinsidr.com/content/known-attack-vectors-against-tls-implementation-vulnerabilities/">https://www.cloudinsidr.com/content/known-attack-vectors-against-tls-implementation-vulnerabilities/&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Logjam: &lt;a href="https://weakdh.org/logjam.html">https://weakdh.org/logjam.html&lt;/a>&lt;/li>
&lt;li>BACKRONYM: &lt;a href="http://backronym.fail/">http://backronym.fail/&lt;/a>&lt;/li>
&lt;li>DROWN: &lt;a href="https://drownattack.com/">https://drownattack.com/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>connection downgrade&lt;/p>
&lt;p>protocol downgrade: &lt;a href="https://www.venafi.com/blog/preventing-downgrade-attacks">https://www.venafi.com/blog/preventing-downgrade-attacks&lt;/a>&lt;/p>
&lt;p>thc-ssl-dos: &lt;a href="https://tools.kali.org/stress-testing/thc-ssl-dos">https://tools.kali.org/stress-testing/thc-ssl-dos&lt;/a>&lt;/p>
&lt;p>sslsplit: &lt;a href="https://tools.kali.org/information-gathering/sslsplit">https://tools.kali.org/information-gathering/sslsplit&lt;/a>&lt;/p>
&lt;p>mitmengine: &lt;a href="https://portswigger.net/daily-swig/sysadmins-offered-new-tools-to-detect-https-interception,">https://portswigger.net/daily-swig/sysadmins-offered-new-tools-to-detect-https-interception,&lt;/a> &lt;a href="https://github.com/cloudflare/mitmengine">https://github.com/cloudflare/mitmengine&lt;/a>&lt;/p>
&lt;p>using stunnel, securing a plain-text connection: &lt;a href="https://www.stunnel.org/">https://www.stunnel.org/&lt;/a>&lt;/p>
&lt;p>TODO: Create a CA self-signed certificate, create new certificate, sign it with the CA self-signed certificate. See &lt;a href="https://blogg.bekk.no/how-to-sign-a-certificate-request-with-openssl-e046c933d3ae">https://blogg.bekk.no/how-to-sign-a-certificate-request-with-openssl-e046c933d3ae&lt;/a>&lt;/p>
&lt;p>Resources&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://tlseminar.github.io/class1/">https://tlseminar.github.io/class1/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="commands">Commands&lt;/h2>
&lt;pre>&lt;code>razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl s_client -connect www.upb.ro:443 -servername www.upb.ro
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl s_client -connect swarm.cs.pub.ro:443 -servername swarm.cs.pub.ro
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl s_client -connect facebook.com:443 -servername facebook.com
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl x509 -in facebook.crt -noout -text
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl s_client -show-certs -connect facebook.com:443 -servername facebook.com
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl s_client -show_certs -connect facebook.com:443 -servername facebook.com
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl verify -CAfile intermediary.crt facebook.crt
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl verify -CApath /etc/ssl/certs/ intermediary.crt
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl verify -CAfile /etc/ssl/certs/DigiCert_High_Assurance_EV_Root_CA.pem intermediary.crt
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ wget --no-check-certificate security.cs.pub.ro/summer-school/
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ telnet security.cs.pub.ro 80
Trying 141.85.227.114...
Connected to koala.cs.pub.ro.
Escape character is '^]'.
GET / HTTP/1.0
HTTP/1.1 200 OK
[...]
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ telnet 141.85.227.114 80
Trying 141.85.227.114...
Connected to 141.85.227.114.
Escape character is '^]'.
GET / HTTP/1.1
Host: security.cs.pub.ro
[...]
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl x509 -in local/ssl.crt/awesome-ca.com.crt -noout -text
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl genrsa -out local/ssl.key/bucuresti.ro.key 4096
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl rsa -in local/ssl.key/bucuresti.ro.key -noout -text
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl req -new -key local/ssl.key/bucuresti.ro.key -out local/ssl.csr/bucuresti.ro.csr
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl req -noout -text -in local/ssl.csr/bucuresti.ro.csr
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ cat local/ca.conf
[ ca ]
default_ca = ca_default
[ ca_default ]
dir = ./local/
certs = $dir
new_certs_dir = $dir/ssl.crt
database = $dir/ca.db.index
serial = $dir/ca.db.serial
RANDFILE = $dir/ca.db.rand
certificate = $dir/ssl.crt/awesome-ca.com.crt
private_key = $dir/ssl.key/awesome-ca.com.key
default_days = 365
default_crl_days = 30
default_md = sha256
preserve = no
policy = generic_policy
[ generic_policy ]
countryName = optional
stateOrProvinceName = optional
localityName = optional
organizationName = optional
organizationalUnitName = optional
commonName = optional
emailAddress = optional
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ echo &amp;quot;1234&amp;quot; &amp;gt; local/ca.db.serial
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ touch local/ca.db.index
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl ca -config local/ca.conf -out local/ssl.crt/bucuresti.ro.crt -infiles local/ssl.csr/bucuresti.ro.csr
Using configuration from local/ca.conf
Check that the request matches the signature
Signature ok
The Subject's Distinguished Name is as follows
countryName :PRINTABLE:'RO'
stateOrProvinceName :ASN.1 12:'Bucharest'
organizationName :ASN.1 12:'Internet Widgits Pty Ltd'
commonName :ASN.1 12:'bucuresti.ro'
Certificate is to be certified until Jul 16 15:19:40 2021 GMT (365 days)
Sign the certificate? [y/n]:y
1 out of 1 certificate requests certified, commit? [y/n]y
Write out database with 1 new entries
Data Base Updated
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl x509 -noout -text -in local/ssl.crt/bucuresti.ro.crt
razvan@yggdrasil:~/.../admin/admin.git/certs-ssl$ openssl verify -CAfile local/ssl.crt/awesome-ca.com.crt local/ssl.crt/bucuresti.ro.crt
local/ssl.crt/bucuresti.ro.crt: OK
&lt;/code>&lt;/pre></description></item><item><title>Web:</title><link>/web/09-privilege-escalation/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/web/09-privilege-escalation/readme/</guid><description>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>When performing an attack on a target, the last step of a malicious actor, before achieving full system compromise, is to elevate his or her privileges to an administrative account. Once the attacker reached this phase and successully escalated his access rights, he can do anything with the vulnerable application or computer system.&lt;/p>
&lt;h2 id="what-is-privilege-escalation">What is privilege escalation?&lt;/h2>
&lt;p>Privilege escalation vulnerabilities are security issues that allow users to gain more permissions and a higher level of access to systems or applications than their administrators intended. These types of flaws are valuable for attackers because they&amp;rsquo;re needed for full exploit chains but can be overlooked by defenders or developers because of their lower severity scores.&lt;/p>
&lt;p>In general, any violation of an intentional security boundary can be considered a privilege escalation issue, including gaining kernel access from a user application in an operating system, escaping a virtual machine to access the underlying hypervisor, gaining domain administrator access from a workstation, or gaining privileged roles in public web applications by exploiting misconfigurations.&lt;/p>
&lt;p>There are two main types of privilege escalation:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Horizontal Privilege Escalation&lt;/strong> is when a user gains the access rights of another user who has the same access level as he or she does.&lt;/li>
&lt;li>&lt;strong>Vertical Privilege Escalation&lt;/strong> is when an attacker uses a flaw in the system to gain access above what was intended for him or her.&lt;/li>
&lt;/ol>
&lt;h3 id="horizontal-privilege-escalation">Horizontal Privilege Escalation&lt;/h3>
&lt;p>Gaining access to a user account with the same level of privileges as the malicious actor might sound a little weird, but there are legitimate use-cases for this. Think about the following scenario:&lt;/p>
&lt;blockquote>
&lt;p>Bob and Alice both have their own accounts at the same bank. Bob has malicious intents and exploits a misconfiguration to gain access to Alice&amp;rsquo;s account. Even though they have the same level of access to the application&amp;rsquo;s functionality, Bob can now access Alice&amp;rsquo;s personal information, and is able to alter her account, transfer money on her behalf and many other things.&lt;/p>
&lt;/blockquote>
&lt;h3 id="vertical-privilege-escalation">Vertical Privilege Escalation&lt;/h3>
&lt;p>Generally, when someone attempts to hack into a system, it’s because they want to perform some action on the system. This could be damaging the system or stealing information. Oftentimes, this requires a privilege level the attacker does not possess. This is where vertical privilege escalation comes in.&lt;/p>
&lt;p>The attacker exploits a flaw in the system, abuses a misconfiguration, or uses another vector to elevate his privileges from a normal user to an administrator.&lt;/p>
&lt;p>Once the attacker managed to elevate his access rights, he will be able to perform any action the compromised account was able to perform.&lt;/p>
&lt;p>An actual scenario to better understand the potential damage:&lt;/p>
&lt;blockquote>
&lt;p>The attacker managed to capture the admin&amp;rsquo;s session cookies and takes over his session. Once logged in using the admin&amp;rsquo;s cookies, he has access to the administration panel of the web application. From here, he can steal sensitive information (such as users data), perform a Denial of Service (DoS) attack (by deleting website&amp;rsquo;s data), and create persistence (by locking out the actual administrators of the website).&lt;/p>
&lt;/blockquote>
&lt;h2 id="application-vs-system-privesc">Application vs System PrivEsc&lt;/h2>
&lt;p>In the context of Web Security, we can also speak of another way of categorizing privilege escalation:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Application Privilege Escalation&lt;/strong> is when the attacker uses the application accounts to gain further access to application functionality.&lt;/li>
&lt;li>&lt;strong>System Privilege Escalation&lt;/strong> is when the attacker has already gained access to the underlying system where the web application runs and wishes to elevate his privileges to the administrator&amp;rsquo;s account of the server.&lt;/li>
&lt;/ol>
&lt;p>We have already given a few examples of application privilege escalations in thre previous section, so now we will focus on system privilege escalation.&lt;/p>
&lt;h3 id="system-privilege-escalation">System Privilege Escalation&lt;/h3>
&lt;p>Security best practices suggest a very useful principle, called the &lt;strong>Principle of Least Privilege&lt;/strong>, in which a user is given the minimum levels of access – or permissions – needed to perform his/her job functions.&lt;/p>
&lt;p>Following this principle, web servers should always be run by an unprivileged user – say &lt;code>www-data&lt;/code> on a Linux system. The reciprocate of this is to &lt;strong>never&lt;/strong> run a web server as &lt;code>root&lt;/code>. This is &lt;em>very important&lt;/em>, as it adds an extra security layer in case the web application is compromised. If that happens, the attacker will have the same privileges on the system as the user running the application.&lt;/p>
&lt;p>Let&amp;rsquo;s say that an attacker managed to find an &lt;strong>RCE vulnerability&lt;/strong> (Remote Code Execution) on the web application. If the application is run by &lt;code>root&lt;/code>, the attacker will be able to perform any command on the system with the same privileges as &lt;code>root&lt;/code>. If, however, the application is run as &lt;code>www-data&lt;/code>, the attacker will only have access to a small part of the system and will have to find another vulnerability to elevate his privileges.&lt;/p>
&lt;h2 id="privilege-escalation-vectors">Privilege Escalation Vectors&lt;/h2>
&lt;h3 id="application-vectors">Application Vectors&lt;/h3>
&lt;p>First of all, let&amp;rsquo;s talk about how an attacker could perform a privilege escalation attack on the web application.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Broken Access Control&lt;/strong> - when a user can in fact access some resource or perform some action that they are not supposed to be able to access.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;strong>Example:&lt;/strong> The web application has an admin panel protected against unauthorized access, but uses API calls to retrieve users and perform actions. The developer forgot to secure these API endpoints with the same protection as the admin panel interface and the attacker discovered them, having unrestricted access to admin commands.&lt;/p>
&lt;/blockquote>
&lt;ol start="2">
&lt;li>&lt;strong>Session Hijacking&lt;/strong> - when a user steals another user / administrator session cookies and impersonates him.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;strong>Example:&lt;/strong> The attacker found an XSS vulnerability / performed a Man in the Middle Attack and stole the session cookie of another user. Now he is able to impersonate that user in any request by using their cookies. If the compromised account is a normal user, it&amp;rsquo;s called horizontal privilege escalation. If it&amp;rsquo;s an administrator account, it&amp;rsquo;s called vertical privilege escalation.&lt;/p>
&lt;/blockquote>
&lt;h3 id="system-vectors">System Vectors&lt;/h3>
&lt;p>Finally, let&amp;rsquo;s analyze a few methods where an attacker could gain elevated privileges once he has a foothold of the system (is able to execute commands on the underlying system).&lt;/p>
&lt;p>There are countless methods to elevate privileges on a Linux system. The key in finding them is to &lt;strong>enumerate&lt;/strong> the host for potential vectors.&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Kernel Exploit&lt;/strong>
&lt;ul>
&lt;li>CVE-2016-5195 (&lt;a href="https://dirtycow.ninja/">DirtyCow&lt;/a>) - Linux Kernel &amp;lt;= &lt;code>3.19.0-73.8&lt;/code>.
A race condition was found in the way the Linux kernel&amp;rsquo;s memory subsystem handled the copy-on-write (COW) breakage of private read-only memory mappings. An unprivileged local user could use this flaw to gain write access to otherwise read-only memory mappings and thus increase their privileges on the system.&lt;/li>
&lt;li>sudo &amp;lt;= &lt;code>v1.28&lt;/code>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&amp;gt; sudo -u#-1 /bin/bash
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>&lt;/code>&lt;/pre>&lt;/li>
&lt;li>More kernel exploits in this Git repos: &lt;a href="https://github.com/lucyoa/kernel-exploits">@lucyoa&lt;/a>, &lt;a href="https://github.com/offensive-security/exploitdb-bin-sploits/tree/master/bin-sploits">@offensive-security&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Exploiting SUDO Rights / SUID Binaries&lt;/strong>
&lt;ul>
&lt;li>Sudo configuration might allow a user to execute some command with another user privileges without knowing the password:
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&amp;gt; sudo -l
User demo may run the following commands on demo-host:
&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>root&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span> NOPASSWD: /usr/bin/vim
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>This would allow the attacker to create a privileged shell:
```bash
&amp;gt; sudo vim -c '!sh'
&lt;/code>&lt;/pre>&lt;pre>&lt;code>&lt;/code>&lt;/pre>&lt;/li>
&lt;li>SUID Binaries. SUID/Setuid stands for &amp;ldquo;set user ID upon execution&amp;rdquo;, and it is enabled by default in every Linux distributions. If a file with this bit is ran, the &lt;code>uid&lt;/code> will be changed by the owner one. If the file owner is &lt;code>root&lt;/code>, the &lt;code>uid&lt;/code> will be changed to &lt;code>root&lt;/code> even if it was executed from user &lt;code>bob&lt;/code>. SUID bit is represented by an &lt;code>s&lt;/code>.
Commands to list SUID binaries:
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&amp;gt; find / -perm -4000 -type f -exec ls -la &lt;span style="color:#ce5c00;font-weight:bold">{}&lt;/span> 2&amp;gt;/dev/null &lt;span style="color:#4e9a06">\;&lt;/span>
&amp;gt; find / -uid &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> -perm -4000 -type f 2&amp;gt;/dev/null
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code>&lt;/code>&lt;/pre>&lt;/li>
&lt;li>&lt;a href="https://gtfobins.github.io/">GTFOBins&lt;/a> are a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Path Hijacking&lt;/strong>
&lt;ul>
&lt;li>Path Hijacking occurs when a program uses the relative path to another program instead of the absolute path. Consider the following Python code:
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">os&lt;/span>
&lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">system&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;create_backup&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code> The `$PATH` variable is a Linux environment variable that specifies where to look for a specific binary when a full path is not provided. An attacker can exploit this mechanism by either being allowed to modify the `$PATH` variable or being able to write files inside directories specified there.
So, in order to exploit the above Python code, the attacker places a program called `create_backup` inside a location from the `$PATH` variable and Linux will execute the malicious program instead of the intended one.
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Docker Privilege Escalation / Container Escape&lt;/strong>
&lt;ul>
&lt;li>This requires the user to be privileged enough to run docker, i.e. being in the &lt;code>docker&lt;/code> group or being &lt;code>root&lt;/code>.
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&amp;gt; docker run -v /:/mnt --rm -it alpine chroot /mnt sh
&lt;/code>&lt;/pre>&lt;/div>&lt;pre>&lt;code> The command above creates a new container based on the `Linux Alpine` image, mounts the `/` directory from the host on `/mnt` inside the container and runs it with `/bin/sh`. Now the attacker can read any file on the system.
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>Escaping Docker privileged containers. Docker privileged containers are those run with the &lt;code>--privileged&lt;/code> flag. Unlike regular containers, these have root privilege to the host machine. A detailed article can be read &lt;a href="https://betterprogramming.pub/escaping-docker-privileged-containers-a7ae7d17f5a1">here&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Others&lt;/strong>
&lt;ul>
&lt;li>&lt;code>id&lt;/code> / &lt;code>whoami&lt;/code> - identify if the user is part of special groups, such as &lt;code>docker&lt;/code>, &lt;code>admin&lt;/code>, etc.&lt;/li>
&lt;li>&lt;code>cat /etc/passwd&lt;/code> - list system users for potential privilege escalation&lt;/li>
&lt;li>&lt;code>crontab -l&lt;/code> / &lt;code>ls -al /etc/cron* /etc/at*&lt;/code> - enumerate cron jobs (scheduled jobs) on the system.&lt;/li>
&lt;li>&lt;code>ps aux&lt;/code> / &lt;code>ps -ef&lt;/code> - inspect running processes&lt;/li>
&lt;li>&lt;code>find / -name authorized_keys 2&amp;gt; /dev/null&lt;/code> - find SSH authorized keys&lt;/li>
&lt;li>&lt;code>find / -name id_rsa 2&amp;gt; /dev/null&lt;/code> - find SSH private keys&lt;/li>
&lt;li>&lt;code>find / -type f -iname &amp;quot;.*&amp;quot; -ls 2&amp;gt;/dev/null&lt;/code> - find hidden files&lt;/li>
&lt;li>&lt;code>grep --color=auto -rnw '/' -ie &amp;quot;PASSWORD&amp;quot; --color=always 2&amp;gt; /dev/null&lt;/code> - find files containing passwords.&lt;/li>
&lt;li>Manually looking through web server logs, such as access or error logs for any sensitive information. Default locations for these logs:
&lt;ul>
&lt;li>&lt;code>/var/log/apache2/error.log&lt;/code>&lt;/li>
&lt;li>&lt;code>/var/log/apache/access.log&lt;/code>&lt;/li>
&lt;li>&lt;code>/var/log/apache2/access.log&lt;/code>&lt;/li>
&lt;li>&lt;code>/etc/httpd/logs/access_log&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="tools">Tools&lt;/h3>
&lt;p>There are many tools that automated the process of enumeration and could help you save a lot of time when looking for privilege escalation vectors. The best tool for Linux is &lt;a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS">LinPEAS&lt;/a>.&lt;/p>
&lt;h2 id="preventing-privilege-escalation">Preventing Privilege Escalation&lt;/h2>
&lt;p>When it comes to OS-level privilege escalation vulnerabilities, it&amp;rsquo;s vital to install security patches as soon as possible, not only for the OS, but for all third-party applications used on the system.&lt;/p>
&lt;p>Application whitelisting technologies can be used to restrict which programs may run on a system, enabling organizations to reduce a machine&amp;rsquo;s attack surface. Making sure that unneeded services are turned off and that unused hardware components and drivers are disabled is also very important.&lt;/p>
&lt;h2 id="further-reading">Further reading&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.csoonline.com/article/3564726/privilege-escalation-explained-why-these-flaws-are-so-valuable-to-hackers.html">https://www.csoonline.com/article/3564726/privilege-escalation-explained-why-these-flaws-are-so-valuable-to-hackers.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://portswigger.net/web-security/access-control">https://portswigger.net/web-security/access-control&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md">https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Linux%20-%20Privilege%20Escalation.md&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://book.hacktricks.xyz/linux-unix/privilege-escalation">https://book.hacktricks.xyz/linux-unix/privilege-escalation&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://dirtycow.ninja/">https://dirtycow.ninja/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/lucyoa/kernel-exploits">https://github.com/lucyoa/kernel-exploits&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/offensive-security/exploitdb-bin-sploits/tree/master/bin-sploits">https://github.com/offensive-security/exploitdb-bin-sploits/tree/master/bin-sploits&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gtfobins.github.io/">https://gtfobins.github.io/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://betterprogramming.pub/escaping-docker-privileged-containers-a7ae7d17f5a1">https://betterprogramming.pub/escaping-docker-privileged-containers-a7ae7d17f5a1&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS">https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://app.hackthebox.eu/machines">https://app.hackthebox.eu/machines&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="challenges">Challenges&lt;/h2>
&lt;ul>
&lt;li>Escalation&lt;/li>
&lt;/ul></description></item><item><title>Web:</title><link>/web/10-best-practices/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/web/10-best-practices/readme/</guid><description>
&lt;p>Session 10 content&lt;/p></description></item></channel></rss>